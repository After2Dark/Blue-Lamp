
Blue Lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002388  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e73cc  08002550  08002550  00012550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e991c  080e991c  00100004  2**0
                  CONTENTS
  4 .ARM          00000000  080e991c  080e991c  00100004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080e991c  080e991c  00100004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e991c  080e991c  000f991c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e9920  080e9920  000f9920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080e9924  00100000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fc24  20000004  080e9928  00100004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003fc28  080e9928  0010fc28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00100004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001ca7  00000000  00000000  00100034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000298  00000000  00000000  00101cdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00101f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000088  00000000  00000000  00102018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7a6  00000000  00000000  001020a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e42  00000000  00000000  0011d846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b40d  00000000  00000000  0011f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001baa95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d0  00000000  00000000  001baae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002538 	.word	0x08002538

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	08002538 	.word	0x08002538

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <initialization>:
uint8_t minute_2 = 0;
uint8_t hour = 0;
uint8_t hour_2 = 9;

void initialization()
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800024a:	4ba1      	ldr	r3, [pc, #644]	; (80004d0 <initialization+0x28c>)
 800024c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800024e:	4aa0      	ldr	r2, [pc, #640]	; (80004d0 <initialization+0x28c>)
 8000250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000254:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;
 8000256:	4b9e      	ldr	r3, [pc, #632]	; (80004d0 <initialization+0x28c>)
 8000258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800025a:	4a9d      	ldr	r2, [pc, #628]	; (80004d0 <initialization+0x28c>)
 800025c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000260:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000262:	4b9b      	ldr	r3, [pc, #620]	; (80004d0 <initialization+0x28c>)
 8000264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000266:	4a9a      	ldr	r2, [pc, #616]	; (80004d0 <initialization+0x28c>)
 8000268:	f043 0304 	orr.w	r3, r3, #4
 800026c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 800026e:	4b98      	ldr	r3, [pc, #608]	; (80004d0 <initialization+0x28c>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	4a97      	ldr	r2, [pc, #604]	; (80004d0 <initialization+0x28c>)
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN;
 800027a:	4b95      	ldr	r3, [pc, #596]	; (80004d0 <initialization+0x28c>)
 800027c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027e:	4a94      	ldr	r2, [pc, #592]	; (80004d0 <initialization+0x28c>)
 8000280:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000284:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOKEN;
 8000286:	4b92      	ldr	r3, [pc, #584]	; (80004d0 <initialization+0x28c>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028a:	4a91      	ldr	r2, [pc, #580]	; (80004d0 <initialization+0x28c>)
 800028c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000290:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 8000292:	4b8f      	ldr	r3, [pc, #572]	; (80004d0 <initialization+0x28c>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000296:	4a8e      	ldr	r2, [pc, #568]	; (80004d0 <initialization+0x28c>)
 8000298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800029c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800029e:	4b8c      	ldr	r3, [pc, #560]	; (80004d0 <initialization+0x28c>)
 80002a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002a2:	4a8b      	ldr	r2, [pc, #556]	; (80004d0 <initialization+0x28c>)
 80002a4:	f043 0302 	orr.w	r3, r3, #2
 80002a8:	6413      	str	r3, [r2, #64]	; 0x40

	// Freq
	RCC->CR |= RCC_CR_HSEON;
 80002aa:	4b89      	ldr	r3, [pc, #548]	; (80004d0 <initialization+0x28c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a88      	ldr	r2, [pc, #544]	; (80004d0 <initialization+0x28c>)
 80002b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002b4:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 80002b6:	bf00      	nop
 80002b8:	4b85      	ldr	r3, [pc, #532]	; (80004d0 <initialization+0x28c>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d0f9      	beq.n	80002b8 <initialization+0x74>
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 80002c4:	4b83      	ldr	r3, [pc, #524]	; (80004d4 <initialization+0x290>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a82      	ldr	r2, [pc, #520]	; (80004d4 <initialization+0x290>)
 80002ca:	f043 0305 	orr.w	r3, r3, #5
 80002ce:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0 | RCC_PLLCFGR_PLLM_3 | RCC_PLLCFGR_PLLM_4;
 80002d0:	4b7f      	ldr	r3, [pc, #508]	; (80004d0 <initialization+0x28c>)
 80002d2:	685b      	ldr	r3, [r3, #4]
 80002d4:	4a7e      	ldr	r2, [pc, #504]	; (80004d0 <initialization+0x28c>)
 80002d6:	f043 0319 	orr.w	r3, r3, #25
 80002da:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_4 | RCC_PLLCFGR_PLLN_5 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLN_8;
 80002dc:	4b7c      	ldr	r3, [pc, #496]	; (80004d0 <initialization+0x28c>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4a7b      	ldr	r2, [pc, #492]	; (80004d0 <initialization+0x28c>)
 80002e2:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 80002e6:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_6;
 80002e8:	4b79      	ldr	r3, [pc, #484]	; (80004d0 <initialization+0x28c>)
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	4a78      	ldr	r2, [pc, #480]	; (80004d0 <initialization+0x28c>)
 80002ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80002f2:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLP_0;
 80002f4:	4b76      	ldr	r3, [pc, #472]	; (80004d0 <initialization+0x28c>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	4a75      	ldr	r2, [pc, #468]	; (80004d0 <initialization+0x28c>)
 80002fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80002fe:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE2_2;
 8000300:	4b73      	ldr	r3, [pc, #460]	; (80004d0 <initialization+0x28c>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4a72      	ldr	r2, [pc, #456]	; (80004d0 <initialization+0x28c>)
 8000306:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 800030a:	6093      	str	r3, [r2, #8]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 800030c:	4b70      	ldr	r3, [pc, #448]	; (80004d0 <initialization+0x28c>)
 800030e:	685b      	ldr	r3, [r3, #4]
 8000310:	4a6f      	ldr	r2, [pc, #444]	; (80004d0 <initialization+0x28c>)
 8000312:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000316:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000318:	4b6d      	ldr	r3, [pc, #436]	; (80004d0 <initialization+0x28c>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a6c      	ldr	r2, [pc, #432]	; (80004d0 <initialization+0x28c>)
 800031e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000322:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000324:	bf00      	nop
 8000326:	4b6a      	ldr	r3, [pc, #424]	; (80004d0 <initialization+0x28c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800032e:	2b00      	cmp	r3, #0
 8000330:	d0f9      	beq.n	8000326 <initialization+0xe2>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000332:	4b67      	ldr	r3, [pc, #412]	; (80004d0 <initialization+0x28c>)
 8000334:	689b      	ldr	r3, [r3, #8]
 8000336:	4a66      	ldr	r2, [pc, #408]	; (80004d0 <initialization+0x28c>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 800033e:	bf00      	nop
 8000340:	4b63      	ldr	r3, [pc, #396]	; (80004d0 <initialization+0x28c>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f003 030c 	and.w	r3, r3, #12
 8000348:	2b08      	cmp	r3, #8
 800034a:	d1f9      	bne.n	8000340 <initialization+0xfc>
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7;
 800034c:	4b60      	ldr	r3, [pc, #384]	; (80004d0 <initialization+0x28c>)
 800034e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000352:	4a5f      	ldr	r2, [pc, #380]	; (80004d0 <initialization+0x28c>)
 8000354:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIR_0 | RCC_PLLSAICFGR_PLLSAIR_2;
 800035c:	4b5c      	ldr	r3, [pc, #368]	; (80004d0 <initialization+0x28c>)
 800035e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000362:	4a5b      	ldr	r2, [pc, #364]	; (80004d0 <initialization+0x28c>)
 8000364:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000368:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->DCKCFGR1 	|= RCC_DCKCFGR1_PLLSAIDIVR_0;
 800036c:	4b58      	ldr	r3, [pc, #352]	; (80004d0 <initialization+0x28c>)
 800036e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000372:	4a57      	ldr	r2, [pc, #348]	; (80004d0 <initialization+0x28c>)
 8000374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000378:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->DCKCFGR1 	&= ~RCC_DCKCFGR1_PLLSAIDIVR_1;
 800037c:	4b54      	ldr	r3, [pc, #336]	; (80004d0 <initialization+0x28c>)
 800037e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000382:	4a53      	ldr	r2, [pc, #332]	; (80004d0 <initialization+0x28c>)
 8000384:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000388:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->CR |= RCC_CR_PLLSAION;
 800038c:	4b50      	ldr	r3, [pc, #320]	; (80004d0 <initialization+0x28c>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a4f      	ldr	r2, [pc, #316]	; (80004d0 <initialization+0x28c>)
 8000392:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000396:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLSAIRDY) == 0);
 8000398:	bf00      	nop
 800039a:	4b4d      	ldr	r3, [pc, #308]	; (80004d0 <initialization+0x28c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <initialization+0x156>

	// PMW
	GPIOC->MODER |= GPIO_MODER_MODER6_1;
 80003a6:	4b4c      	ldr	r3, [pc, #304]	; (80004d8 <initialization+0x294>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	4a4b      	ldr	r2, [pc, #300]	; (80004d8 <initialization+0x294>)
 80003ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003b0:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= GPIO_AFRL_AFRL6_1;
 80003b2:	4b49      	ldr	r3, [pc, #292]	; (80004d8 <initialization+0x294>)
 80003b4:	6a1b      	ldr	r3, [r3, #32]
 80003b6:	4a48      	ldr	r2, [pc, #288]	; (80004d8 <initialization+0x294>)
 80003b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003bc:	6213      	str	r3, [r2, #32]
	TIM3->PSC = 1080;
 80003be:	4b47      	ldr	r3, [pc, #284]	; (80004dc <initialization+0x298>)
 80003c0:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80003c4:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 100;
 80003c6:	4b45      	ldr	r3, [pc, #276]	; (80004dc <initialization+0x298>)
 80003c8:	2264      	movs	r2, #100	; 0x64
 80003ca:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 50;
 80003cc:	4b43      	ldr	r3, [pc, #268]	; (80004dc <initialization+0x298>)
 80003ce:	2232      	movs	r2, #50	; 0x32
 80003d0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 80003d2:	4b42      	ldr	r3, [pc, #264]	; (80004dc <initialization+0x298>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a41      	ldr	r2, [pc, #260]	; (80004dc <initialization+0x298>)
 80003d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80003dc:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E;
 80003de:	4b3f      	ldr	r3, [pc, #252]	; (80004dc <initialization+0x298>)
 80003e0:	6a1b      	ldr	r3, [r3, #32]
 80003e2:	4a3e      	ldr	r2, [pc, #248]	; (80004dc <initialization+0x298>)
 80003e4:	f043 0301 	orr.w	r3, r3, #1
 80003e8:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_CEN;
 80003ea:	4b3c      	ldr	r3, [pc, #240]	; (80004dc <initialization+0x298>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	4a3b      	ldr	r2, [pc, #236]	; (80004dc <initialization+0x298>)
 80003f0:	f043 0301 	orr.w	r3, r3, #1
 80003f4:	6013      	str	r3, [r2, #0]
	// PI0 - D5
	// PI1 - D13
	// PI2 - D8
	// PI3 - D7
	// PB4 - D3
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PI | SYSCFG_EXTICR1_EXTI1_PI | SYSCFG_EXTICR1_EXTI2_PI | SYSCFG_EXTICR1_EXTI3_PI;
 80003f6:	4b3a      	ldr	r3, [pc, #232]	; (80004e0 <initialization+0x29c>)
 80003f8:	689a      	ldr	r2, [r3, #8]
 80003fa:	4939      	ldr	r1, [pc, #228]	; (80004e0 <initialization+0x29c>)
 80003fc:	f648 0388 	movw	r3, #34952	; 0x8888
 8000400:	4313      	orrs	r3, r2
 8000402:	608b      	str	r3, [r1, #8]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI4_PB;
 8000404:	4b36      	ldr	r3, [pc, #216]	; (80004e0 <initialization+0x29c>)
 8000406:	68db      	ldr	r3, [r3, #12]
 8000408:	4a35      	ldr	r2, [pc, #212]	; (80004e0 <initialization+0x29c>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR0 | EXTI_IMR_MR1 | EXTI_IMR_MR2 | EXTI_IMR_MR3 | EXTI_IMR_MR4;
 8000410:	4b34      	ldr	r3, [pc, #208]	; (80004e4 <initialization+0x2a0>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a33      	ldr	r2, [pc, #204]	; (80004e4 <initialization+0x2a0>)
 8000416:	f043 031f 	orr.w	r3, r3, #31
 800041a:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= EXTI_RTSR_TR0 | EXTI_RTSR_TR1 | EXTI_RTSR_TR2 | EXTI_RTSR_TR3 | EXTI_RTSR_TR4;
 800041c:	4b31      	ldr	r3, [pc, #196]	; (80004e4 <initialization+0x2a0>)
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	4a30      	ldr	r2, [pc, #192]	; (80004e4 <initialization+0x2a0>)
 8000422:	f043 031f 	orr.w	r3, r3, #31
 8000426:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(EXTI0_IRQn);
 8000428:	2006      	movs	r0, #6
 800042a:	f7ff feed 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn);
 800042e:	2007      	movs	r0, #7
 8000430:	f7ff feea 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 8000434:	2008      	movs	r0, #8
 8000436:	f7ff fee7 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 800043a:	2009      	movs	r0, #9
 800043c:	f7ff fee4 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn);
 8000440:	200a      	movs	r0, #10
 8000442:	f7ff fee1 	bl	8000208 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000446:	b662      	cpsie	i
}
 8000448:	bf00      	nop
	__enable_irq ();

	//B0 PE4
	GPIOE->MODER   &= ~GPIO_MODER_MODER4;
 800044a:	4b27      	ldr	r3, [pc, #156]	; (80004e8 <initialization+0x2a4>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a26      	ldr	r2, [pc, #152]	; (80004e8 <initialization+0x2a4>)
 8000450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000454:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |= GPIO_MODER_MODER4_1;
 8000456:	4b24      	ldr	r3, [pc, #144]	; (80004e8 <initialization+0x2a4>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a23      	ldr	r2, [pc, #140]	; (80004e8 <initialization+0x2a4>)
 800045c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000460:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 8000462:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <initialization+0x2a4>)
 8000464:	689b      	ldr	r3, [r3, #8]
 8000466:	4a20      	ldr	r2, [pc, #128]	; (80004e8 <initialization+0x2a4>)
 8000468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800046c:	6093      	str	r3, [r2, #8]
	GPIOE->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 800046e:	4b1e      	ldr	r3, [pc, #120]	; (80004e8 <initialization+0x2a4>)
 8000470:	6a1b      	ldr	r3, [r3, #32]
 8000472:	4a1d      	ldr	r2, [pc, #116]	; (80004e8 <initialization+0x2a4>)
 8000474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000478:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 800047a:	4b1b      	ldr	r3, [pc, #108]	; (80004e8 <initialization+0x2a4>)
 800047c:	6a1b      	ldr	r3, [r3, #32]
 800047e:	4a1a      	ldr	r2, [pc, #104]	; (80004e8 <initialization+0x2a4>)
 8000480:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000484:	6213      	str	r3, [r2, #32]

	//B1 PJ13
	GPIOJ->MODER   &= ~GPIO_MODER_MODER13;
 8000486:	4b19      	ldr	r3, [pc, #100]	; (80004ec <initialization+0x2a8>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	4a18      	ldr	r2, [pc, #96]	; (80004ec <initialization+0x2a8>)
 800048c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000490:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER13_1;
 8000492:	4b16      	ldr	r3, [pc, #88]	; (80004ec <initialization+0x2a8>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a15      	ldr	r2, [pc, #84]	; (80004ec <initialization+0x2a8>)
 8000498:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800049c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_1;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <initialization+0x2a8>)
 80004a0:	689b      	ldr	r3, [r3, #8]
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <initialization+0x2a8>)
 80004a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004a8:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL5_0;
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <initialization+0x2a8>)
 80004ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ae:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <initialization+0x2a8>)
 80004b0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004b4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 80004b6:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <initialization+0x2a8>)
 80004b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ba:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <initialization+0x2a8>)
 80004bc:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80004c0:	6253      	str	r3, [r2, #36]	; 0x24

	//B2 PJ14
	GPIOJ->MODER   &= ~GPIO_MODER_MODER14;
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <initialization+0x2a8>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4a09      	ldr	r2, [pc, #36]	; (80004ec <initialization+0x2a8>)
 80004c8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80004cc:	6013      	str	r3, [r2, #0]
 80004ce:	e00f      	b.n	80004f0 <initialization+0x2ac>
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40023c00 	.word	0x40023c00
 80004d8:	40020800 	.word	0x40020800
 80004dc:	40000400 	.word	0x40000400
 80004e0:	40013800 	.word	0x40013800
 80004e4:	40013c00 	.word	0x40013c00
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40022400 	.word	0x40022400
	GPIOJ->MODER   |= GPIO_MODER_MODER14_1;
 80004f0:	4b98      	ldr	r3, [pc, #608]	; (8000754 <initialization+0x510>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a97      	ldr	r2, [pc, #604]	; (8000754 <initialization+0x510>)
 80004f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004fa:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 80004fc:	4b95      	ldr	r3, [pc, #596]	; (8000754 <initialization+0x510>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4a94      	ldr	r2, [pc, #592]	; (8000754 <initialization+0x510>)
 8000502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000506:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 8000508:	4b92      	ldr	r3, [pc, #584]	; (8000754 <initialization+0x510>)
 800050a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050c:	4a91      	ldr	r2, [pc, #580]	; (8000754 <initialization+0x510>)
 800050e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000512:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000514:	4b8f      	ldr	r3, [pc, #572]	; (8000754 <initialization+0x510>)
 8000516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000518:	4a8e      	ldr	r2, [pc, #568]	; (8000754 <initialization+0x510>)
 800051a:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 800051e:	6253      	str	r3, [r2, #36]	; 0x24

	//B3 PJ15
	GPIOJ->MODER   &= ~GPIO_MODER_MODER15;
 8000520:	4b8c      	ldr	r3, [pc, #560]	; (8000754 <initialization+0x510>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a8b      	ldr	r2, [pc, #556]	; (8000754 <initialization+0x510>)
 8000526:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800052a:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER15_1;
 800052c:	4b89      	ldr	r3, [pc, #548]	; (8000754 <initialization+0x510>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a88      	ldr	r2, [pc, #544]	; (8000754 <initialization+0x510>)
 8000532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000536:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 8000538:	4b86      	ldr	r3, [pc, #536]	; (8000754 <initialization+0x510>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4a85      	ldr	r2, [pc, #532]	; (8000754 <initialization+0x510>)
 800053e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000542:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 8000544:	4b83      	ldr	r3, [pc, #524]	; (8000754 <initialization+0x510>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	4a82      	ldr	r2, [pc, #520]	; (8000754 <initialization+0x510>)
 800054a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800054e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000550:	4b80      	ldr	r3, [pc, #512]	; (8000754 <initialization+0x510>)
 8000552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000554:	4a7f      	ldr	r2, [pc, #508]	; (8000754 <initialization+0x510>)
 8000556:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 800055a:	6253      	str	r3, [r2, #36]	; 0x24

	//B4 PJ12
	GPIOJ->MODER   &= ~GPIO_MODER_MODER12;
 800055c:	4b7d      	ldr	r3, [pc, #500]	; (8000754 <initialization+0x510>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a7c      	ldr	r2, [pc, #496]	; (8000754 <initialization+0x510>)
 8000562:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000566:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER12_1;
 8000568:	4b7a      	ldr	r3, [pc, #488]	; (8000754 <initialization+0x510>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a79      	ldr	r2, [pc, #484]	; (8000754 <initialization+0x510>)
 800056e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000572:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12_1;
 8000574:	4b77      	ldr	r3, [pc, #476]	; (8000754 <initialization+0x510>)
 8000576:	689b      	ldr	r3, [r3, #8]
 8000578:	4a76      	ldr	r2, [pc, #472]	; (8000754 <initialization+0x510>)
 800057a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800057e:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL4_0;
 8000580:	4b74      	ldr	r3, [pc, #464]	; (8000754 <initialization+0x510>)
 8000582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000584:	4a73      	ldr	r2, [pc, #460]	; (8000754 <initialization+0x510>)
 8000586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 800058c:	4b71      	ldr	r3, [pc, #452]	; (8000754 <initialization+0x510>)
 800058e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000590:	4a70      	ldr	r2, [pc, #448]	; (8000754 <initialization+0x510>)
 8000592:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000596:	6253      	str	r3, [r2, #36]	; 0x24

	//B5 PK4
	GPIOK->MODER   &= ~GPIO_MODER_MODER4;
 8000598:	4b6f      	ldr	r3, [pc, #444]	; (8000758 <initialization+0x514>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a6e      	ldr	r2, [pc, #440]	; (8000758 <initialization+0x514>)
 800059e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005a2:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER4_1;
 80005a4:	4b6c      	ldr	r3, [pc, #432]	; (8000758 <initialization+0x514>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a6b      	ldr	r2, [pc, #428]	; (8000758 <initialization+0x514>)
 80005aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ae:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 80005b0:	4b69      	ldr	r3, [pc, #420]	; (8000758 <initialization+0x514>)
 80005b2:	689b      	ldr	r3, [r3, #8]
 80005b4:	4a68      	ldr	r2, [pc, #416]	; (8000758 <initialization+0x514>)
 80005b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ba:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 80005bc:	4b66      	ldr	r3, [pc, #408]	; (8000758 <initialization+0x514>)
 80005be:	6a1b      	ldr	r3, [r3, #32]
 80005c0:	4a65      	ldr	r2, [pc, #404]	; (8000758 <initialization+0x514>)
 80005c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c6:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 80005c8:	4b63      	ldr	r3, [pc, #396]	; (8000758 <initialization+0x514>)
 80005ca:	6a1b      	ldr	r3, [r3, #32]
 80005cc:	4a62      	ldr	r2, [pc, #392]	; (8000758 <initialization+0x514>)
 80005ce:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80005d2:	6213      	str	r3, [r2, #32]

	//B6 PK5
	GPIOK->MODER   &= ~GPIO_MODER_MODER5;
 80005d4:	4b60      	ldr	r3, [pc, #384]	; (8000758 <initialization+0x514>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a5f      	ldr	r2, [pc, #380]	; (8000758 <initialization+0x514>)
 80005da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80005de:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER5_1;
 80005e0:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <initialization+0x514>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a5c      	ldr	r2, [pc, #368]	; (8000758 <initialization+0x514>)
 80005e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005ea:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 80005ec:	4b5a      	ldr	r3, [pc, #360]	; (8000758 <initialization+0x514>)
 80005ee:	689b      	ldr	r3, [r3, #8]
 80005f0:	4a59      	ldr	r2, [pc, #356]	; (8000758 <initialization+0x514>)
 80005f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005f6:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 80005f8:	4b57      	ldr	r3, [pc, #348]	; (8000758 <initialization+0x514>)
 80005fa:	6a1b      	ldr	r3, [r3, #32]
 80005fc:	4a56      	ldr	r2, [pc, #344]	; (8000758 <initialization+0x514>)
 80005fe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000602:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000604:	4b54      	ldr	r3, [pc, #336]	; (8000758 <initialization+0x514>)
 8000606:	6a1b      	ldr	r3, [r3, #32]
 8000608:	4a53      	ldr	r2, [pc, #332]	; (8000758 <initialization+0x514>)
 800060a:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800060e:	6213      	str	r3, [r2, #32]

	//B7 PK6
	GPIOK->MODER   &= ~GPIO_MODER_MODER6;
 8000610:	4b51      	ldr	r3, [pc, #324]	; (8000758 <initialization+0x514>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a50      	ldr	r2, [pc, #320]	; (8000758 <initialization+0x514>)
 8000616:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800061a:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER6_1;
 800061c:	4b4e      	ldr	r3, [pc, #312]	; (8000758 <initialization+0x514>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a4d      	ldr	r2, [pc, #308]	; (8000758 <initialization+0x514>)
 8000622:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000626:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 8000628:	4b4b      	ldr	r3, [pc, #300]	; (8000758 <initialization+0x514>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	4a4a      	ldr	r2, [pc, #296]	; (8000758 <initialization+0x514>)
 800062e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000632:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 8000634:	4b48      	ldr	r3, [pc, #288]	; (8000758 <initialization+0x514>)
 8000636:	6a1b      	ldr	r3, [r3, #32]
 8000638:	4a47      	ldr	r2, [pc, #284]	; (8000758 <initialization+0x514>)
 800063a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800063e:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000640:	4b45      	ldr	r3, [pc, #276]	; (8000758 <initialization+0x514>)
 8000642:	6a1b      	ldr	r3, [r3, #32]
 8000644:	4a44      	ldr	r2, [pc, #272]	; (8000758 <initialization+0x514>)
 8000646:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 800064a:	6213      	str	r3, [r2, #32]

	//R0 PI 15
	GPIOI->MODER   &= ~GPIO_MODER_MODER15;
 800064c:	4b43      	ldr	r3, [pc, #268]	; (800075c <initialization+0x518>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a42      	ldr	r2, [pc, #264]	; (800075c <initialization+0x518>)
 8000652:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000656:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER15_1;
 8000658:	4b40      	ldr	r3, [pc, #256]	; (800075c <initialization+0x518>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a3f      	ldr	r2, [pc, #252]	; (800075c <initialization+0x518>)
 800065e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000662:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 8000664:	4b3d      	ldr	r3, [pc, #244]	; (800075c <initialization+0x518>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a3c      	ldr	r2, [pc, #240]	; (800075c <initialization+0x518>)
 800066a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800066e:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 8000670:	4b3a      	ldr	r3, [pc, #232]	; (800075c <initialization+0x518>)
 8000672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000674:	4a39      	ldr	r2, [pc, #228]	; (800075c <initialization+0x518>)
 8000676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800067a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800067c:	4b37      	ldr	r3, [pc, #220]	; (800075c <initialization+0x518>)
 800067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000680:	4a36      	ldr	r2, [pc, #216]	; (800075c <initialization+0x518>)
 8000682:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000686:	6253      	str	r3, [r2, #36]	; 0x24

	//R1 PJ0
	GPIOJ->MODER   &= ~GPIO_MODER_MODER0;
 8000688:	4b32      	ldr	r3, [pc, #200]	; (8000754 <initialization+0x510>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a31      	ldr	r2, [pc, #196]	; (8000754 <initialization+0x510>)
 800068e:	f023 0303 	bic.w	r3, r3, #3
 8000692:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER0_1;
 8000694:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <initialization+0x510>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a2e      	ldr	r2, [pc, #184]	; (8000754 <initialization+0x510>)
 800069a:	f043 0302 	orr.w	r3, r3, #2
 800069e:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <initialization+0x510>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <initialization+0x510>)
 80006a6:	f043 0302 	orr.w	r3, r3, #2
 80006aa:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <initialization+0x510>)
 80006ae:	6a1b      	ldr	r3, [r3, #32]
 80006b0:	4a28      	ldr	r2, [pc, #160]	; (8000754 <initialization+0x510>)
 80006b2:	f023 0301 	bic.w	r3, r3, #1
 80006b6:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 80006b8:	4b26      	ldr	r3, [pc, #152]	; (8000754 <initialization+0x510>)
 80006ba:	6a1b      	ldr	r3, [r3, #32]
 80006bc:	4a25      	ldr	r2, [pc, #148]	; (8000754 <initialization+0x510>)
 80006be:	f043 030e 	orr.w	r3, r3, #14
 80006c2:	6213      	str	r3, [r2, #32]

	//R2 PJ1
	GPIOJ->MODER   &= ~GPIO_MODER_MODER1;
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <initialization+0x510>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a22      	ldr	r2, [pc, #136]	; (8000754 <initialization+0x510>)
 80006ca:	f023 030c 	bic.w	r3, r3, #12
 80006ce:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER1_1;
 80006d0:	4b20      	ldr	r3, [pc, #128]	; (8000754 <initialization+0x510>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a1f      	ldr	r2, [pc, #124]	; (8000754 <initialization+0x510>)
 80006d6:	f043 0308 	orr.w	r3, r3, #8
 80006da:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <initialization+0x510>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <initialization+0x510>)
 80006e2:	f043 0308 	orr.w	r3, r3, #8
 80006e6:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 80006e8:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <initialization+0x510>)
 80006ea:	6a1b      	ldr	r3, [r3, #32]
 80006ec:	4a19      	ldr	r2, [pc, #100]	; (8000754 <initialization+0x510>)
 80006ee:	f023 0310 	bic.w	r3, r3, #16
 80006f2:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 80006f4:	4b17      	ldr	r3, [pc, #92]	; (8000754 <initialization+0x510>)
 80006f6:	6a1b      	ldr	r3, [r3, #32]
 80006f8:	4a16      	ldr	r2, [pc, #88]	; (8000754 <initialization+0x510>)
 80006fa:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80006fe:	6213      	str	r3, [r2, #32]

	//R3 PJ2
	GPIOJ->MODER   &= ~GPIO_MODER_MODER2;
 8000700:	4b14      	ldr	r3, [pc, #80]	; (8000754 <initialization+0x510>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a13      	ldr	r2, [pc, #76]	; (8000754 <initialization+0x510>)
 8000706:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800070a:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER2_1;
 800070c:	4b11      	ldr	r3, [pc, #68]	; (8000754 <initialization+0x510>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a10      	ldr	r2, [pc, #64]	; (8000754 <initialization+0x510>)
 8000712:	f043 0320 	orr.w	r3, r3, #32
 8000716:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <initialization+0x510>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <initialization+0x510>)
 800071e:	f043 0320 	orr.w	r3, r3, #32
 8000722:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <initialization+0x510>)
 8000726:	6a1b      	ldr	r3, [r3, #32]
 8000728:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <initialization+0x510>)
 800072a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800072e:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000730:	4b08      	ldr	r3, [pc, #32]	; (8000754 <initialization+0x510>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	4a07      	ldr	r2, [pc, #28]	; (8000754 <initialization+0x510>)
 8000736:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 800073a:	6213      	str	r3, [r2, #32]

	//R4 PJ3

	GPIOJ->MODER   &= ~GPIO_MODER_MODER3;
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <initialization+0x510>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <initialization+0x510>)
 8000742:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000746:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER3_1;
 8000748:	4b02      	ldr	r3, [pc, #8]	; (8000754 <initialization+0x510>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a01      	ldr	r2, [pc, #4]	; (8000754 <initialization+0x510>)
 800074e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000752:	e005      	b.n	8000760 <initialization+0x51c>
 8000754:	40022400 	.word	0x40022400
 8000758:	40022800 	.word	0x40022800
 800075c:	40022000 	.word	0x40022000
 8000760:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3_1;
 8000762:	4b99      	ldr	r3, [pc, #612]	; (80009c8 <initialization+0x784>)
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	4a98      	ldr	r2, [pc, #608]	; (80009c8 <initialization+0x784>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL3_0;
 800076e:	4b96      	ldr	r3, [pc, #600]	; (80009c8 <initialization+0x784>)
 8000770:	6a1b      	ldr	r3, [r3, #32]
 8000772:	4a95      	ldr	r2, [pc, #596]	; (80009c8 <initialization+0x784>)
 8000774:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000778:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 800077a:	4b93      	ldr	r3, [pc, #588]	; (80009c8 <initialization+0x784>)
 800077c:	6a1b      	ldr	r3, [r3, #32]
 800077e:	4a92      	ldr	r2, [pc, #584]	; (80009c8 <initialization+0x784>)
 8000780:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000784:	6213      	str	r3, [r2, #32]

	//R5 PJ4
	GPIOJ->MODER   &= ~GPIO_MODER_MODER4;
 8000786:	4b90      	ldr	r3, [pc, #576]	; (80009c8 <initialization+0x784>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a8f      	ldr	r2, [pc, #572]	; (80009c8 <initialization+0x784>)
 800078c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000790:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER4_1;
 8000792:	4b8d      	ldr	r3, [pc, #564]	; (80009c8 <initialization+0x784>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a8c      	ldr	r2, [pc, #560]	; (80009c8 <initialization+0x784>)
 8000798:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 800079e:	4b8a      	ldr	r3, [pc, #552]	; (80009c8 <initialization+0x784>)
 80007a0:	689b      	ldr	r3, [r3, #8]
 80007a2:	4a89      	ldr	r2, [pc, #548]	; (80009c8 <initialization+0x784>)
 80007a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007a8:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 80007aa:	4b87      	ldr	r3, [pc, #540]	; (80009c8 <initialization+0x784>)
 80007ac:	6a1b      	ldr	r3, [r3, #32]
 80007ae:	4a86      	ldr	r2, [pc, #536]	; (80009c8 <initialization+0x784>)
 80007b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007b4:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 80007b6:	4b84      	ldr	r3, [pc, #528]	; (80009c8 <initialization+0x784>)
 80007b8:	6a1b      	ldr	r3, [r3, #32]
 80007ba:	4a83      	ldr	r2, [pc, #524]	; (80009c8 <initialization+0x784>)
 80007bc:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80007c0:	6213      	str	r3, [r2, #32]

	//R6 PJ5
	GPIOJ->MODER   &= ~GPIO_MODER_MODER5;
 80007c2:	4b81      	ldr	r3, [pc, #516]	; (80009c8 <initialization+0x784>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4a80      	ldr	r2, [pc, #512]	; (80009c8 <initialization+0x784>)
 80007c8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80007cc:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER5_1;
 80007ce:	4b7e      	ldr	r3, [pc, #504]	; (80009c8 <initialization+0x784>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a7d      	ldr	r2, [pc, #500]	; (80009c8 <initialization+0x784>)
 80007d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007d8:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 80007da:	4b7b      	ldr	r3, [pc, #492]	; (80009c8 <initialization+0x784>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	4a7a      	ldr	r2, [pc, #488]	; (80009c8 <initialization+0x784>)
 80007e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e4:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 80007e6:	4b78      	ldr	r3, [pc, #480]	; (80009c8 <initialization+0x784>)
 80007e8:	6a1b      	ldr	r3, [r3, #32]
 80007ea:	4a77      	ldr	r2, [pc, #476]	; (80009c8 <initialization+0x784>)
 80007ec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007f0:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 80007f2:	4b75      	ldr	r3, [pc, #468]	; (80009c8 <initialization+0x784>)
 80007f4:	6a1b      	ldr	r3, [r3, #32]
 80007f6:	4a74      	ldr	r2, [pc, #464]	; (80009c8 <initialization+0x784>)
 80007f8:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80007fc:	6213      	str	r3, [r2, #32]

	//R7 PJ6
	GPIOJ->MODER   &= ~GPIO_MODER_MODER6;
 80007fe:	4b72      	ldr	r3, [pc, #456]	; (80009c8 <initialization+0x784>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a71      	ldr	r2, [pc, #452]	; (80009c8 <initialization+0x784>)
 8000804:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000808:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER6_1;
 800080a:	4b6f      	ldr	r3, [pc, #444]	; (80009c8 <initialization+0x784>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a6e      	ldr	r2, [pc, #440]	; (80009c8 <initialization+0x784>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 8000816:	4b6c      	ldr	r3, [pc, #432]	; (80009c8 <initialization+0x784>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	4a6b      	ldr	r2, [pc, #428]	; (80009c8 <initialization+0x784>)
 800081c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000820:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 8000822:	4b69      	ldr	r3, [pc, #420]	; (80009c8 <initialization+0x784>)
 8000824:	6a1b      	ldr	r3, [r3, #32]
 8000826:	4a68      	ldr	r2, [pc, #416]	; (80009c8 <initialization+0x784>)
 8000828:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800082c:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 800082e:	4b66      	ldr	r3, [pc, #408]	; (80009c8 <initialization+0x784>)
 8000830:	6a1b      	ldr	r3, [r3, #32]
 8000832:	4a65      	ldr	r2, [pc, #404]	; (80009c8 <initialization+0x784>)
 8000834:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000838:	6213      	str	r3, [r2, #32]

	//G0 PJ7
	GPIOJ->MODER   &= ~GPIO_MODER_MODER7;
 800083a:	4b63      	ldr	r3, [pc, #396]	; (80009c8 <initialization+0x784>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a62      	ldr	r2, [pc, #392]	; (80009c8 <initialization+0x784>)
 8000840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000844:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER7_1;
 8000846:	4b60      	ldr	r3, [pc, #384]	; (80009c8 <initialization+0x784>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a5f      	ldr	r2, [pc, #380]	; (80009c8 <initialization+0x784>)
 800084c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000850:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 8000852:	4b5d      	ldr	r3, [pc, #372]	; (80009c8 <initialization+0x784>)
 8000854:	689b      	ldr	r3, [r3, #8]
 8000856:	4a5c      	ldr	r2, [pc, #368]	; (80009c8 <initialization+0x784>)
 8000858:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800085c:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 800085e:	4b5a      	ldr	r3, [pc, #360]	; (80009c8 <initialization+0x784>)
 8000860:	6a1b      	ldr	r3, [r3, #32]
 8000862:	4a59      	ldr	r2, [pc, #356]	; (80009c8 <initialization+0x784>)
 8000864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000868:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800086a:	4b57      	ldr	r3, [pc, #348]	; (80009c8 <initialization+0x784>)
 800086c:	6a1b      	ldr	r3, [r3, #32]
 800086e:	4a56      	ldr	r2, [pc, #344]	; (80009c8 <initialization+0x784>)
 8000870:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000874:	6213      	str	r3, [r2, #32]

	//G1 PJ8
	GPIOJ->MODER   &= ~GPIO_MODER_MODER8;
 8000876:	4b54      	ldr	r3, [pc, #336]	; (80009c8 <initialization+0x784>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a53      	ldr	r2, [pc, #332]	; (80009c8 <initialization+0x784>)
 800087c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000880:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER8_1;
 8000882:	4b51      	ldr	r3, [pc, #324]	; (80009c8 <initialization+0x784>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a50      	ldr	r2, [pc, #320]	; (80009c8 <initialization+0x784>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800088c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1;
 800088e:	4b4e      	ldr	r3, [pc, #312]	; (80009c8 <initialization+0x784>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4a4d      	ldr	r2, [pc, #308]	; (80009c8 <initialization+0x784>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL0_0;
 800089a:	4b4b      	ldr	r3, [pc, #300]	; (80009c8 <initialization+0x784>)
 800089c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800089e:	4a4a      	ldr	r2, [pc, #296]	; (80009c8 <initialization+0x784>)
 80008a0:	f023 0301 	bic.w	r3, r3, #1
 80008a4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 80008a6:	4b48      	ldr	r3, [pc, #288]	; (80009c8 <initialization+0x784>)
 80008a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008aa:	4a47      	ldr	r2, [pc, #284]	; (80009c8 <initialization+0x784>)
 80008ac:	f043 030e 	orr.w	r3, r3, #14
 80008b0:	6253      	str	r3, [r2, #36]	; 0x24

	//G2 PJ9
	GPIOJ->MODER   &= ~GPIO_MODER_MODER9;
 80008b2:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <initialization+0x784>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a44      	ldr	r2, [pc, #272]	; (80009c8 <initialization+0x784>)
 80008b8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80008bc:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER9_1;
 80008be:	4b42      	ldr	r3, [pc, #264]	; (80009c8 <initialization+0x784>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a41      	ldr	r2, [pc, #260]	; (80009c8 <initialization+0x784>)
 80008c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008c8:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 80008ca:	4b3f      	ldr	r3, [pc, #252]	; (80009c8 <initialization+0x784>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	4a3e      	ldr	r2, [pc, #248]	; (80009c8 <initialization+0x784>)
 80008d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008d4:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 80008d6:	4b3c      	ldr	r3, [pc, #240]	; (80009c8 <initialization+0x784>)
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	4a3b      	ldr	r2, [pc, #236]	; (80009c8 <initialization+0x784>)
 80008dc:	f023 0310 	bic.w	r3, r3, #16
 80008e0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 80008e2:	4b39      	ldr	r3, [pc, #228]	; (80009c8 <initialization+0x784>)
 80008e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e6:	4a38      	ldr	r2, [pc, #224]	; (80009c8 <initialization+0x784>)
 80008e8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80008ec:	6253      	str	r3, [r2, #36]	; 0x24

	//G3 PJ10
	GPIOJ->MODER   &= ~GPIO_MODER_MODER10;
 80008ee:	4b36      	ldr	r3, [pc, #216]	; (80009c8 <initialization+0x784>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	4a35      	ldr	r2, [pc, #212]	; (80009c8 <initialization+0x784>)
 80008f4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80008f8:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER10_1;
 80008fa:	4b33      	ldr	r3, [pc, #204]	; (80009c8 <initialization+0x784>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a32      	ldr	r2, [pc, #200]	; (80009c8 <initialization+0x784>)
 8000900:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000904:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 8000906:	4b30      	ldr	r3, [pc, #192]	; (80009c8 <initialization+0x784>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <initialization+0x784>)
 800090c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000910:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 8000912:	4b2d      	ldr	r3, [pc, #180]	; (80009c8 <initialization+0x784>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	4a2c      	ldr	r2, [pc, #176]	; (80009c8 <initialization+0x784>)
 8000918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800091c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 800091e:	4b2a      	ldr	r3, [pc, #168]	; (80009c8 <initialization+0x784>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000922:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <initialization+0x784>)
 8000924:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000928:	6253      	str	r3, [r2, #36]	; 0x24

	//G4 PJ11
	GPIOJ->MODER   &= ~GPIO_MODER_MODER11;
 800092a:	4b27      	ldr	r3, [pc, #156]	; (80009c8 <initialization+0x784>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a26      	ldr	r2, [pc, #152]	; (80009c8 <initialization+0x784>)
 8000930:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000934:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER11_1;
 8000936:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <initialization+0x784>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a23      	ldr	r2, [pc, #140]	; (80009c8 <initialization+0x784>)
 800093c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000940:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11_1;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <initialization+0x784>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	4a20      	ldr	r2, [pc, #128]	; (80009c8 <initialization+0x784>)
 8000948:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800094c:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL3_0;
 800094e:	4b1e      	ldr	r3, [pc, #120]	; (80009c8 <initialization+0x784>)
 8000950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000952:	4a1d      	ldr	r2, [pc, #116]	; (80009c8 <initialization+0x784>)
 8000954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000958:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <initialization+0x784>)
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <initialization+0x784>)
 8000960:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000964:	6253      	str	r3, [r2, #36]	; 0x24

	//G5 PK0
	GPIOK->MODER   &= ~GPIO_MODER_MODER0;
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <initialization+0x788>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <initialization+0x788>)
 800096c:	f023 0303 	bic.w	r3, r3, #3
 8000970:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER0_1;
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <initialization+0x788>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a15      	ldr	r2, [pc, #84]	; (80009cc <initialization+0x788>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 800097e:	4b13      	ldr	r3, [pc, #76]	; (80009cc <initialization+0x788>)
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <initialization+0x788>)
 8000984:	f043 0302 	orr.w	r3, r3, #2
 8000988:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <initialization+0x788>)
 800098c:	6a1b      	ldr	r3, [r3, #32]
 800098e:	4a0f      	ldr	r2, [pc, #60]	; (80009cc <initialization+0x788>)
 8000990:	f023 0301 	bic.w	r3, r3, #1
 8000994:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000996:	4b0d      	ldr	r3, [pc, #52]	; (80009cc <initialization+0x788>)
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <initialization+0x788>)
 800099c:	f043 030e 	orr.w	r3, r3, #14
 80009a0:	6213      	str	r3, [r2, #32]

	//G6 PK1
	GPIOK->MODER   &= ~GPIO_MODER_MODER1;
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <initialization+0x788>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a09      	ldr	r2, [pc, #36]	; (80009cc <initialization+0x788>)
 80009a8:	f023 030c 	bic.w	r3, r3, #12
 80009ac:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER1_1;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <initialization+0x788>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a06      	ldr	r2, [pc, #24]	; (80009cc <initialization+0x788>)
 80009b4:	f043 0308 	orr.w	r3, r3, #8
 80009b8:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <initialization+0x788>)
 80009bc:	689b      	ldr	r3, [r3, #8]
 80009be:	4a03      	ldr	r2, [pc, #12]	; (80009cc <initialization+0x788>)
 80009c0:	f043 0308 	orr.w	r3, r3, #8
 80009c4:	e004      	b.n	80009d0 <initialization+0x78c>
 80009c6:	bf00      	nop
 80009c8:	40022400 	.word	0x40022400
 80009cc:	40022800 	.word	0x40022800
 80009d0:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 80009d2:	4b95      	ldr	r3, [pc, #596]	; (8000c28 <initialization+0x9e4>)
 80009d4:	6a1b      	ldr	r3, [r3, #32]
 80009d6:	4a94      	ldr	r2, [pc, #592]	; (8000c28 <initialization+0x9e4>)
 80009d8:	f023 0310 	bic.w	r3, r3, #16
 80009dc:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 80009de:	4b92      	ldr	r3, [pc, #584]	; (8000c28 <initialization+0x9e4>)
 80009e0:	6a1b      	ldr	r3, [r3, #32]
 80009e2:	4a91      	ldr	r2, [pc, #580]	; (8000c28 <initialization+0x9e4>)
 80009e4:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80009e8:	6213      	str	r3, [r2, #32]

	//G7 PK2
	GPIOK->MODER   &= ~GPIO_MODER_MODER2;
 80009ea:	4b8f      	ldr	r3, [pc, #572]	; (8000c28 <initialization+0x9e4>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a8e      	ldr	r2, [pc, #568]	; (8000c28 <initialization+0x9e4>)
 80009f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009f4:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER2_1;
 80009f6:	4b8c      	ldr	r3, [pc, #560]	; (8000c28 <initialization+0x9e4>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a8b      	ldr	r2, [pc, #556]	; (8000c28 <initialization+0x9e4>)
 80009fc:	f043 0320 	orr.w	r3, r3, #32
 8000a00:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 8000a02:	4b89      	ldr	r3, [pc, #548]	; (8000c28 <initialization+0x9e4>)
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	4a88      	ldr	r2, [pc, #544]	; (8000c28 <initialization+0x9e4>)
 8000a08:	f043 0320 	orr.w	r3, r3, #32
 8000a0c:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 8000a0e:	4b86      	ldr	r3, [pc, #536]	; (8000c28 <initialization+0x9e4>)
 8000a10:	6a1b      	ldr	r3, [r3, #32]
 8000a12:	4a85      	ldr	r2, [pc, #532]	; (8000c28 <initialization+0x9e4>)
 8000a14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a18:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000a1a:	4b83      	ldr	r3, [pc, #524]	; (8000c28 <initialization+0x9e4>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4a82      	ldr	r2, [pc, #520]	; (8000c28 <initialization+0x9e4>)
 8000a20:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000a24:	6213      	str	r3, [r2, #32]

	//VSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER9;
 8000a26:	4b81      	ldr	r3, [pc, #516]	; (8000c2c <initialization+0x9e8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a80      	ldr	r2, [pc, #512]	; (8000c2c <initialization+0x9e8>)
 8000a2c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000a30:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER9_1;
 8000a32:	4b7e      	ldr	r3, [pc, #504]	; (8000c2c <initialization+0x9e8>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4a7d      	ldr	r2, [pc, #500]	; (8000c2c <initialization+0x9e8>)
 8000a38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a3c:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 8000a3e:	4b7b      	ldr	r3, [pc, #492]	; (8000c2c <initialization+0x9e8>)
 8000a40:	689b      	ldr	r3, [r3, #8]
 8000a42:	4a7a      	ldr	r2, [pc, #488]	; (8000c2c <initialization+0x9e8>)
 8000a44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a48:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 8000a4a:	4b78      	ldr	r3, [pc, #480]	; (8000c2c <initialization+0x9e8>)
 8000a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a4e:	4a77      	ldr	r2, [pc, #476]	; (8000c2c <initialization+0x9e8>)
 8000a50:	f023 0310 	bic.w	r3, r3, #16
 8000a54:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000a56:	4b75      	ldr	r3, [pc, #468]	; (8000c2c <initialization+0x9e8>)
 8000a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5a:	4a74      	ldr	r2, [pc, #464]	; (8000c2c <initialization+0x9e8>)
 8000a5c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000a60:	6253      	str	r3, [r2, #36]	; 0x24

	//HSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER10;
 8000a62:	4b72      	ldr	r3, [pc, #456]	; (8000c2c <initialization+0x9e8>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a71      	ldr	r2, [pc, #452]	; (8000c2c <initialization+0x9e8>)
 8000a68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000a6c:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER10_1;
 8000a6e:	4b6f      	ldr	r3, [pc, #444]	; (8000c2c <initialization+0x9e8>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	4a6e      	ldr	r2, [pc, #440]	; (8000c2c <initialization+0x9e8>)
 8000a74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a78:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 8000a7a:	4b6c      	ldr	r3, [pc, #432]	; (8000c2c <initialization+0x9e8>)
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	4a6b      	ldr	r2, [pc, #428]	; (8000c2c <initialization+0x9e8>)
 8000a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a84:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 8000a86:	4b69      	ldr	r3, [pc, #420]	; (8000c2c <initialization+0x9e8>)
 8000a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8a:	4a68      	ldr	r2, [pc, #416]	; (8000c2c <initialization+0x9e8>)
 8000a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a90:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000a92:	4b66      	ldr	r3, [pc, #408]	; (8000c2c <initialization+0x9e8>)
 8000a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a96:	4a65      	ldr	r2, [pc, #404]	; (8000c2c <initialization+0x9e8>)
 8000a98:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000a9c:	6253      	str	r3, [r2, #36]	; 0x24

	//CLK
	GPIOI->MODER   &= ~GPIO_MODER_MODER14;
 8000a9e:	4b63      	ldr	r3, [pc, #396]	; (8000c2c <initialization+0x9e8>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a62      	ldr	r2, [pc, #392]	; (8000c2c <initialization+0x9e8>)
 8000aa4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000aa8:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER14_1;
 8000aaa:	4b60      	ldr	r3, [pc, #384]	; (8000c2c <initialization+0x9e8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <initialization+0x9e8>)
 8000ab0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ab4:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 8000ab6:	4b5d      	ldr	r3, [pc, #372]	; (8000c2c <initialization+0x9e8>)
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	4a5c      	ldr	r2, [pc, #368]	; (8000c2c <initialization+0x9e8>)
 8000abc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ac0:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 8000ac2:	4b5a      	ldr	r3, [pc, #360]	; (8000c2c <initialization+0x9e8>)
 8000ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac6:	4a59      	ldr	r2, [pc, #356]	; (8000c2c <initialization+0x9e8>)
 8000ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000acc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000ace:	4b57      	ldr	r3, [pc, #348]	; (8000c2c <initialization+0x9e8>)
 8000ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad2:	4a56      	ldr	r2, [pc, #344]	; (8000c2c <initialization+0x9e8>)
 8000ad4:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000ad8:	6253      	str	r3, [r2, #36]	; 0x24

	//DE
	GPIOK->MODER   &= ~GPIO_MODER_MODER7;
 8000ada:	4b53      	ldr	r3, [pc, #332]	; (8000c28 <initialization+0x9e4>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a52      	ldr	r2, [pc, #328]	; (8000c28 <initialization+0x9e4>)
 8000ae0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ae4:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER7_1;
 8000ae6:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <initialization+0x9e4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a4f      	ldr	r2, [pc, #316]	; (8000c28 <initialization+0x9e4>)
 8000aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000af0:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 8000af2:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <initialization+0x9e4>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	4a4c      	ldr	r2, [pc, #304]	; (8000c28 <initialization+0x9e4>)
 8000af8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afc:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 8000afe:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <initialization+0x9e4>)
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <initialization+0x9e4>)
 8000b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b08:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000b0a:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <initialization+0x9e4>)
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4a46      	ldr	r2, [pc, #280]	; (8000c28 <initialization+0x9e4>)
 8000b10:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000b14:	6213      	str	r3, [r2, #32]

	//LED
	GPIOK->MODER &= ~GPIO_MODER_MODER3;
 8000b16:	4b44      	ldr	r3, [pc, #272]	; (8000c28 <initialization+0x9e4>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a43      	ldr	r2, [pc, #268]	; (8000c28 <initialization+0x9e4>)
 8000b1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b20:	6013      	str	r3, [r2, #0]
	GPIOK->MODER |= GPIO_MODER_MODER3_0;
 8000b22:	4b41      	ldr	r3, [pc, #260]	; (8000c28 <initialization+0x9e4>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <initialization+0x9e4>)
 8000b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b2c:	6013      	str	r3, [r2, #0]
	GPIOK->BSRR |= GPIO_BSRR_BS_3;
 8000b2e:	4b3e      	ldr	r3, [pc, #248]	; (8000c28 <initialization+0x9e4>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	4a3d      	ldr	r2, [pc, #244]	; (8000c28 <initialization+0x9e4>)
 8000b34:	f043 0308 	orr.w	r3, r3, #8
 8000b38:	6193      	str	r3, [r2, #24]

	//ON
	GPIOI->MODER &= ~GPIO_MODER_MODER12;
 8000b3a:	4b3c      	ldr	r3, [pc, #240]	; (8000c2c <initialization+0x9e8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a3b      	ldr	r2, [pc, #236]	; (8000c2c <initialization+0x9e8>)
 8000b40:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000b44:	6013      	str	r3, [r2, #0]
	GPIOI->MODER |= GPIO_MODER_MODER12_0;
 8000b46:	4b39      	ldr	r3, [pc, #228]	; (8000c2c <initialization+0x9e8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a38      	ldr	r2, [pc, #224]	; (8000c2c <initialization+0x9e8>)
 8000b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b50:	6013      	str	r3, [r2, #0]
	GPIOI->BSRR |= GPIO_BSRR_BS_12;
 8000b52:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <initialization+0x9e8>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a35      	ldr	r2, [pc, #212]	; (8000c2c <initialization+0x9e8>)
 8000b58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b5c:	6193      	str	r3, [r2, #24]

	GPIOC->MODER &= ~GPIO_MODER_MODER7;
 8000b5e:	4b34      	ldr	r3, [pc, #208]	; (8000c30 <initialization+0x9ec>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a33      	ldr	r2, [pc, #204]	; (8000c30 <initialization+0x9ec>)
 8000b64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b68:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 8000b6a:	4b31      	ldr	r3, [pc, #196]	; (8000c30 <initialization+0x9ec>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a30      	ldr	r2, [pc, #192]	; (8000c30 <initialization+0x9ec>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BS_7;
 8000b76:	4b2e      	ldr	r3, [pc, #184]	; (8000c30 <initialization+0x9ec>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a2d      	ldr	r2, [pc, #180]	; (8000c30 <initialization+0x9ec>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b80:	6193      	str	r3, [r2, #24]

	LTDC->SSCR |= ((DISPLAY_HSYNC - 1) << 16 | (DISPLAY_VSYNC - 1));
 8000b82:	4b2c      	ldr	r3, [pc, #176]	; (8000c34 <initialization+0x9f0>)
 8000b84:	689a      	ldr	r2, [r3, #8]
 8000b86:	492b      	ldr	r1, [pc, #172]	; (8000c34 <initialization+0x9f0>)
 8000b88:	4b2b      	ldr	r3, [pc, #172]	; (8000c38 <initialization+0x9f4>)
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	608b      	str	r3, [r1, #8]
	LTDC->BPCR |= ((DISPLAY_HSYNC+DISPLAY_HBP-1) << 16 | (DISPLAY_VSYNC+DISPLAY_VBP-1));
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <initialization+0x9f0>)
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	4928      	ldr	r1, [pc, #160]	; (8000c34 <initialization+0x9f0>)
 8000b94:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <initialization+0x9f8>)
 8000b96:	4313      	orrs	r3, r2
 8000b98:	60cb      	str	r3, [r1, #12]
	LTDC->AWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP - 1) << 16 | (DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1));
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <initialization+0x9f0>)
 8000b9c:	691a      	ldr	r2, [r3, #16]
 8000b9e:	4925      	ldr	r1, [pc, #148]	; (8000c34 <initialization+0x9f0>)
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <initialization+0x9fc>)
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	610b      	str	r3, [r1, #16]
	LTDC->TWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP + DISPLAY_HFP -1)<< 16 |(DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP + DISPLAY_VFP - 1));
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <initialization+0x9f0>)
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	4922      	ldr	r1, [pc, #136]	; (8000c34 <initialization+0x9f0>)
 8000bac:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <initialization+0xa00>)
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	614b      	str	r3, [r1, #20]
	LTDC_Layer2->WHPCR |= (((DISPLAY_WIDTH + DISPLAY_HBP + DISPLAY_HSYNC - 1) << 16) | (DISPLAY_HBP + DISPLAY_HSYNC));
 8000bb2:	4b25      	ldr	r3, [pc, #148]	; (8000c48 <initialization+0xa04>)
 8000bb4:	685a      	ldr	r2, [r3, #4]
 8000bb6:	4924      	ldr	r1, [pc, #144]	; (8000c48 <initialization+0xa04>)
 8000bb8:	4b24      	ldr	r3, [pc, #144]	; (8000c4c <initialization+0xa08>)
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	604b      	str	r3, [r1, #4]
	LTDC_Layer2->WVPCR |= (((DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1) << 16) |(DISPLAY_VSYNC + DISPLAY_VBP));
 8000bbe:	4b22      	ldr	r3, [pc, #136]	; (8000c48 <initialization+0xa04>)
 8000bc0:	689a      	ldr	r2, [r3, #8]
 8000bc2:	4921      	ldr	r1, [pc, #132]	; (8000c48 <initialization+0xa04>)
 8000bc4:	4b22      	ldr	r3, [pc, #136]	; (8000c50 <initialization+0xa0c>)
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	608b      	str	r3, [r1, #8]
	LTDC_Layer2->PFCR = 2;
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <initialization+0xa04>)
 8000bcc:	2202      	movs	r2, #2
 8000bce:	611a      	str	r2, [r3, #16]
	LTDC_Layer2->BFCR |= ((4 << 8) | 5);
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <initialization+0xa04>)
 8000bd2:	69da      	ldr	r2, [r3, #28]
 8000bd4:	491c      	ldr	r1, [pc, #112]	; (8000c48 <initialization+0xa04>)
 8000bd6:	f240 4305 	movw	r3, #1029	; 0x405
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	61cb      	str	r3, [r1, #28]
	LTDC_Layer2->CACR = 0xff;
 8000bde:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <initialization+0xa04>)
 8000be0:	22ff      	movs	r2, #255	; 0xff
 8000be2:	615a      	str	r2, [r3, #20]
	LTDC_Layer2->CFBLR |= (((PIXEL_SIZE * DISPLAY_WIDTH) << 16) | (PIXEL_SIZE * DISPLAY_WIDTH + 3));
 8000be4:	4b18      	ldr	r3, [pc, #96]	; (8000c48 <initialization+0xa04>)
 8000be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be8:	4917      	ldr	r1, [pc, #92]	; (8000c48 <initialization+0xa04>)
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <initialization+0xa10>)
 8000bec:	4313      	orrs	r3, r2
 8000bee:	62cb      	str	r3, [r1, #44]	; 0x2c
	LTDC_Layer2->CFBLNR |= DISPLAY_HEIGHT;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <initialization+0xa04>)
 8000bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf4:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <initialization+0xa04>)
 8000bf6:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8000bfa:	6313      	str	r3, [r2, #48]	; 0x30
	LTDC_Layer2->CR |= LTDC_LxCR_LEN;
 8000bfc:	4b12      	ldr	r3, [pc, #72]	; (8000c48 <initialization+0xa04>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <initialization+0xa04>)
 8000c02:	f043 0301 	orr.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <initialization+0x9f0>)
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <initialization+0x9f0>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	6253      	str	r3, [r2, #36]	; 0x24
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <initialization+0x9f0>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <initialization+0x9f0>)
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6193      	str	r3, [r2, #24]

	for(int i = 0; i <= 130559; ++i)
 8000c20:	2300      	movs	r3, #0
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	e023      	b.n	8000c6e <initialization+0xa2a>
 8000c26:	bf00      	nop
 8000c28:	40022800 	.word	0x40022800
 8000c2c:	40022000 	.word	0x40022000
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40016800 	.word	0x40016800
 8000c38:	001d0009 	.word	0x001d0009
 8000c3c:	002a000b 	.word	0x002a000b
 8000c40:	020a011b 	.word	0x020a011b
 8000c44:	022a011d 	.word	0x022a011d
 8000c48:	40016904 	.word	0x40016904
 8000c4c:	020a002b 	.word	0x020a002b
 8000c50:	011b000c 	.word	0x011b000c
 8000c54:	07800783 	.word	0x07800783
		screen[i] = main_picture[i];
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <initialization+0xa48>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <initialization+0xa4c>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i <= 130559; ++i)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000c74:	dbf0      	blt.n	8000c58 <initialization+0xa14>

	GPIOK->BSRR |= GPIO_BSRR_BS_3;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <initialization+0xa50>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <initialization+0xa50>)
 8000c7c:	f043 0308 	orr.w	r3, r3, #8
 8000c80:	6193      	str	r3, [r2, #24]
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	080a9d1c 	.word	0x080a9d1c
 8000c90:	20000020 	.word	0x20000020
 8000c94:	40022800 	.word	0x40022800

08000c98 <change_digit_1>:

void change_digit_1(int poz, int number)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b099      	sub	sp, #100	; 0x64
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
	int x = 0;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
	int k = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	65bb      	str	r3, [r7, #88]	; 0x58

	if(poz==1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d101      	bne.n	8000cb4 <change_digit_1+0x1c>
		x = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b02      	cmp	r3, #2
 8000cb8:	d101      	bne.n	8000cbe <change_digit_1+0x26>
		x = 38;
 8000cba:	2326      	movs	r3, #38	; 0x26
 8000cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==3)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d101      	bne.n	8000cc8 <change_digit_1+0x30>
		x = 86;
 8000cc4:	2356      	movs	r3, #86	; 0x56
 8000cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==4)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d101      	bne.n	8000cd2 <change_digit_1+0x3a>
		x = 124;
 8000cce:	237c      	movs	r3, #124	; 0x7c
 8000cd0:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(number==0)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d126      	bne.n	8000d26 <change_digit_1+0x8e>
		for(int i = 0; i <= 57; ++i)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	657b      	str	r3, [r7, #84]	; 0x54
 8000cdc:	e020      	b.n	8000d20 <change_digit_1+0x88>
			for(int j = 0; j <= 32; ++j)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	653b      	str	r3, [r7, #80]	; 0x50
 8000ce2:	e017      	b.n	8000d14 <change_digit_1+0x7c>
				screen[x+5113+i*480+j] = zero_picture_1[k++];
 8000ce4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000ce6:	1c4b      	adds	r3, r1, #1
 8000ce8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cec:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000cf0:	441a      	add	r2, r3
 8000cf2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	011b      	lsls	r3, r3, #4
 8000cf8:	1a1b      	subs	r3, r3, r0
 8000cfa:	015b      	lsls	r3, r3, #5
 8000cfc:	441a      	add	r2, r3
 8000cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d00:	4413      	add	r3, r2
 8000d02:	4aa0      	ldr	r2, [pc, #640]	; (8000f84 <change_digit_1+0x2ec>)
 8000d04:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000d08:	4a9f      	ldr	r2, [pc, #636]	; (8000f88 <change_digit_1+0x2f0>)
 8000d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d10:	3301      	adds	r3, #1
 8000d12:	653b      	str	r3, [r7, #80]	; 0x50
 8000d14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d16:	2b20      	cmp	r3, #32
 8000d18:	dde4      	ble.n	8000ce4 <change_digit_1+0x4c>
		for(int i = 0; i <= 57; ++i)
 8000d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	657b      	str	r3, [r7, #84]	; 0x54
 8000d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d22:	2b39      	cmp	r3, #57	; 0x39
 8000d24:	dddb      	ble.n	8000cde <change_digit_1+0x46>
	if(number==1)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d126      	bne.n	8000d7a <change_digit_1+0xe2>
		for(int i = 0; i <= 57; ++i)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d30:	e020      	b.n	8000d74 <change_digit_1+0xdc>
			for(int j = 0; j <= 32; ++j)
 8000d32:	2300      	movs	r3, #0
 8000d34:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d36:	e017      	b.n	8000d68 <change_digit_1+0xd0>
				screen[x+5113+i*480+j] = one_picture_1[k++];
 8000d38:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d3a:	1c4b      	adds	r3, r1, #1
 8000d3c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d40:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000d44:	441a      	add	r2, r3
 8000d46:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000d48:	4603      	mov	r3, r0
 8000d4a:	011b      	lsls	r3, r3, #4
 8000d4c:	1a1b      	subs	r3, r3, r0
 8000d4e:	015b      	lsls	r3, r3, #5
 8000d50:	441a      	add	r2, r3
 8000d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d54:	4413      	add	r3, r2
 8000d56:	4a8d      	ldr	r2, [pc, #564]	; (8000f8c <change_digit_1+0x2f4>)
 8000d58:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000d5c:	4a8a      	ldr	r2, [pc, #552]	; (8000f88 <change_digit_1+0x2f0>)
 8000d5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000d62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d64:	3301      	adds	r3, #1
 8000d66:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d6a:	2b20      	cmp	r3, #32
 8000d6c:	dde4      	ble.n	8000d38 <change_digit_1+0xa0>
		for(int i = 0; i <= 57; ++i)
 8000d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d70:	3301      	adds	r3, #1
 8000d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d76:	2b39      	cmp	r3, #57	; 0x39
 8000d78:	dddb      	ble.n	8000d32 <change_digit_1+0x9a>
	if(number==2)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	d126      	bne.n	8000dce <change_digit_1+0x136>
		for(int i = 0; i <= 57; ++i)
 8000d80:	2300      	movs	r3, #0
 8000d82:	647b      	str	r3, [r7, #68]	; 0x44
 8000d84:	e020      	b.n	8000dc8 <change_digit_1+0x130>
			for(int j = 0; j <= 32; ++j)
 8000d86:	2300      	movs	r3, #0
 8000d88:	643b      	str	r3, [r7, #64]	; 0x40
 8000d8a:	e017      	b.n	8000dbc <change_digit_1+0x124>
				screen[x+5113+i*480+j] = two_picture_1[k++];
 8000d8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d8e:	1c4b      	adds	r3, r1, #1
 8000d90:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d94:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000d98:	441a      	add	r2, r3
 8000d9a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	011b      	lsls	r3, r3, #4
 8000da0:	1a1b      	subs	r3, r3, r0
 8000da2:	015b      	lsls	r3, r3, #5
 8000da4:	441a      	add	r2, r3
 8000da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000da8:	4413      	add	r3, r2
 8000daa:	4a79      	ldr	r2, [pc, #484]	; (8000f90 <change_digit_1+0x2f8>)
 8000dac:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000db0:	4a75      	ldr	r2, [pc, #468]	; (8000f88 <change_digit_1+0x2f0>)
 8000db2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db8:	3301      	adds	r3, #1
 8000dba:	643b      	str	r3, [r7, #64]	; 0x40
 8000dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dbe:	2b20      	cmp	r3, #32
 8000dc0:	dde4      	ble.n	8000d8c <change_digit_1+0xf4>
		for(int i = 0; i <= 57; ++i)
 8000dc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8000dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dca:	2b39      	cmp	r3, #57	; 0x39
 8000dcc:	dddb      	ble.n	8000d86 <change_digit_1+0xee>
	if(number==3)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d126      	bne.n	8000e22 <change_digit_1+0x18a>
		for(int i = 0; i <= 57; ++i)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dd8:	e020      	b.n	8000e1c <change_digit_1+0x184>
			for(int j = 0; j <= 32; ++j)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dde:	e017      	b.n	8000e10 <change_digit_1+0x178>
				screen[x+5113+i*480+j] = three_picture_1[k++];
 8000de0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000de2:	1c4b      	adds	r3, r1, #1
 8000de4:	65bb      	str	r3, [r7, #88]	; 0x58
 8000de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000de8:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000dec:	441a      	add	r2, r3
 8000dee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000df0:	4603      	mov	r3, r0
 8000df2:	011b      	lsls	r3, r3, #4
 8000df4:	1a1b      	subs	r3, r3, r0
 8000df6:	015b      	lsls	r3, r3, #5
 8000df8:	441a      	add	r2, r3
 8000dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dfc:	4413      	add	r3, r2
 8000dfe:	4a65      	ldr	r2, [pc, #404]	; (8000f94 <change_digit_1+0x2fc>)
 8000e00:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000e04:	4a60      	ldr	r2, [pc, #384]	; (8000f88 <change_digit_1+0x2f0>)
 8000e06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e12:	2b20      	cmp	r3, #32
 8000e14:	dde4      	ble.n	8000de0 <change_digit_1+0x148>
		for(int i = 0; i <= 57; ++i)
 8000e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e18:	3301      	adds	r3, #1
 8000e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1e:	2b39      	cmp	r3, #57	; 0x39
 8000e20:	dddb      	ble.n	8000dda <change_digit_1+0x142>
	if(number==4)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d126      	bne.n	8000e76 <change_digit_1+0x1de>
		for(int i = 0; i <= 57; ++i)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e2c:	e020      	b.n	8000e70 <change_digit_1+0x1d8>
			for(int j = 0; j <= 32; ++j)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
 8000e32:	e017      	b.n	8000e64 <change_digit_1+0x1cc>
				screen[x+5113+i*480+j] = four_picture_1[k++];
 8000e34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e36:	1c4b      	adds	r3, r1, #1
 8000e38:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e3c:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000e40:	441a      	add	r2, r3
 8000e42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e44:	4603      	mov	r3, r0
 8000e46:	011b      	lsls	r3, r3, #4
 8000e48:	1a1b      	subs	r3, r3, r0
 8000e4a:	015b      	lsls	r3, r3, #5
 8000e4c:	441a      	add	r2, r3
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	4413      	add	r3, r2
 8000e52:	4a51      	ldr	r2, [pc, #324]	; (8000f98 <change_digit_1+0x300>)
 8000e54:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000e58:	4a4b      	ldr	r2, [pc, #300]	; (8000f88 <change_digit_1+0x2f0>)
 8000e5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	3301      	adds	r3, #1
 8000e62:	633b      	str	r3, [r7, #48]	; 0x30
 8000e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e66:	2b20      	cmp	r3, #32
 8000e68:	dde4      	ble.n	8000e34 <change_digit_1+0x19c>
		for(int i = 0; i <= 57; ++i)
 8000e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e72:	2b39      	cmp	r3, #57	; 0x39
 8000e74:	dddb      	ble.n	8000e2e <change_digit_1+0x196>
	if(number==5)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b05      	cmp	r3, #5
 8000e7a:	d126      	bne.n	8000eca <change_digit_1+0x232>
		for(int i = 0; i <= 57; ++i)
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e80:	e020      	b.n	8000ec4 <change_digit_1+0x22c>
			for(int j = 0; j <= 32; ++j)
 8000e82:	2300      	movs	r3, #0
 8000e84:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e86:	e017      	b.n	8000eb8 <change_digit_1+0x220>
				screen[x+5113+i*480+j] = five_picture_1[k++];
 8000e88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e8a:	1c4b      	adds	r3, r1, #1
 8000e8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e90:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000e94:	441a      	add	r2, r3
 8000e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e98:	4603      	mov	r3, r0
 8000e9a:	011b      	lsls	r3, r3, #4
 8000e9c:	1a1b      	subs	r3, r3, r0
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	441a      	add	r2, r3
 8000ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ea4:	4413      	add	r3, r2
 8000ea6:	4a3d      	ldr	r2, [pc, #244]	; (8000f9c <change_digit_1+0x304>)
 8000ea8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000eac:	4a36      	ldr	r2, [pc, #216]	; (8000f88 <change_digit_1+0x2f0>)
 8000eae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eba:	2b20      	cmp	r3, #32
 8000ebc:	dde4      	ble.n	8000e88 <change_digit_1+0x1f0>
		for(int i = 0; i <= 57; ++i)
 8000ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec6:	2b39      	cmp	r3, #57	; 0x39
 8000ec8:	dddb      	ble.n	8000e82 <change_digit_1+0x1ea>
	if(number==6)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	2b06      	cmp	r3, #6
 8000ece:	d126      	bne.n	8000f1e <change_digit_1+0x286>
		for(int i = 0; i <= 57; ++i)
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed4:	e020      	b.n	8000f18 <change_digit_1+0x280>
			for(int j = 0; j <= 32; ++j)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	623b      	str	r3, [r7, #32]
 8000eda:	e017      	b.n	8000f0c <change_digit_1+0x274>
				screen[x+5113+i*480+j] = six_picture_1[k++];
 8000edc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000ede:	1c4b      	adds	r3, r1, #1
 8000ee0:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ee4:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000ee8:	441a      	add	r2, r3
 8000eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eec:	4603      	mov	r3, r0
 8000eee:	011b      	lsls	r3, r3, #4
 8000ef0:	1a1b      	subs	r3, r3, r0
 8000ef2:	015b      	lsls	r3, r3, #5
 8000ef4:	441a      	add	r2, r3
 8000ef6:	6a3b      	ldr	r3, [r7, #32]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a29      	ldr	r2, [pc, #164]	; (8000fa0 <change_digit_1+0x308>)
 8000efc:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000f00:	4a21      	ldr	r2, [pc, #132]	; (8000f88 <change_digit_1+0x2f0>)
 8000f02:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	6a3b      	ldr	r3, [r7, #32]
 8000f0e:	2b20      	cmp	r3, #32
 8000f10:	dde4      	ble.n	8000edc <change_digit_1+0x244>
		for(int i = 0; i <= 57; ++i)
 8000f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f14:	3301      	adds	r3, #1
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
 8000f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1a:	2b39      	cmp	r3, #57	; 0x39
 8000f1c:	dddb      	ble.n	8000ed6 <change_digit_1+0x23e>
	if(number==7)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	2b07      	cmp	r3, #7
 8000f22:	d126      	bne.n	8000f72 <change_digit_1+0x2da>
		for(int i = 0; i <= 57; ++i)
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
 8000f28:	e020      	b.n	8000f6c <change_digit_1+0x2d4>
			for(int j = 0; j <= 32; ++j)
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	e017      	b.n	8000f60 <change_digit_1+0x2c8>
				screen[x+5113+i*480+j] = seven_picture_1[k++];
 8000f30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f32:	1c4b      	adds	r3, r1, #1
 8000f34:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f38:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000f3c:	441a      	add	r2, r3
 8000f3e:	69f8      	ldr	r0, [r7, #28]
 8000f40:	4603      	mov	r3, r0
 8000f42:	011b      	lsls	r3, r3, #4
 8000f44:	1a1b      	subs	r3, r3, r0
 8000f46:	015b      	lsls	r3, r3, #5
 8000f48:	441a      	add	r2, r3
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	4a15      	ldr	r2, [pc, #84]	; (8000fa4 <change_digit_1+0x30c>)
 8000f50:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000f54:	4a0c      	ldr	r2, [pc, #48]	; (8000f88 <change_digit_1+0x2f0>)
 8000f56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61bb      	str	r3, [r7, #24]
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	2b20      	cmp	r3, #32
 8000f64:	dde4      	ble.n	8000f30 <change_digit_1+0x298>
		for(int i = 0; i <= 57; ++i)
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	2b39      	cmp	r3, #57	; 0x39
 8000f70:	dddb      	ble.n	8000f2a <change_digit_1+0x292>
	if(number==8)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d138      	bne.n	8000fea <change_digit_1+0x352>
		for(int i = 0; i <= 57; ++i)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	e032      	b.n	8000fe4 <change_digit_1+0x34c>
			for(int j = 0; j <= 32; ++j)
 8000f7e:	2300      	movs	r3, #0
 8000f80:	613b      	str	r3, [r7, #16]
 8000f82:	e029      	b.n	8000fd8 <change_digit_1+0x340>
 8000f84:	08009cf0 	.word	0x08009cf0
 8000f88:	20000020 	.word	0x20000020
 8000f8c:	0800522c 	.word	0x0800522c
 8000f90:	08008dfc 	.word	0x08008dfc
 8000f94:	08007f08 	.word	0x08007f08
 8000f98:	08003444 	.word	0x08003444
 8000f9c:	08002550 	.word	0x08002550
 8000fa0:	08007014 	.word	0x08007014
 8000fa4:	08006120 	.word	0x08006120
				screen[x+5113+i*480+j] = eigth_picture_1[k++];
 8000fa8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000faa:	1c4b      	adds	r3, r1, #1
 8000fac:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fb0:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000fb4:	441a      	add	r2, r3
 8000fb6:	6978      	ldr	r0, [r7, #20]
 8000fb8:	4603      	mov	r3, r0
 8000fba:	011b      	lsls	r3, r3, #4
 8000fbc:	1a1b      	subs	r3, r3, r0
 8000fbe:	015b      	lsls	r3, r3, #5
 8000fc0:	441a      	add	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	4a25      	ldr	r2, [pc, #148]	; (800105c <change_digit_1+0x3c4>)
 8000fc8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000fcc:	4a24      	ldr	r2, [pc, #144]	; (8001060 <change_digit_1+0x3c8>)
 8000fce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	2b20      	cmp	r3, #32
 8000fdc:	dde4      	ble.n	8000fa8 <change_digit_1+0x310>
		for(int i = 0; i <= 57; ++i)
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b39      	cmp	r3, #57	; 0x39
 8000fe8:	ddc9      	ble.n	8000f7e <change_digit_1+0x2e6>
	if(number==9)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	2b09      	cmp	r3, #9
 8000fee:	d126      	bne.n	800103e <change_digit_1+0x3a6>
		for(int i = 0; i <= 57; ++i)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	e020      	b.n	8001038 <change_digit_1+0x3a0>
			for(int j = 0; j <= 32; ++j)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	e017      	b.n	800102c <change_digit_1+0x394>
				screen[x+5113+i*480+j] = nine_picture_1[k++];
 8000ffc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000ffe:	1c4b      	adds	r3, r1, #1
 8001000:	65bb      	str	r3, [r7, #88]	; 0x58
 8001002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001004:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8001008:	441a      	add	r2, r3
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	4603      	mov	r3, r0
 800100e:	011b      	lsls	r3, r3, #4
 8001010:	1a1b      	subs	r3, r3, r0
 8001012:	015b      	lsls	r3, r3, #5
 8001014:	441a      	add	r2, r3
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	4413      	add	r3, r2
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <change_digit_1+0x3cc>)
 800101c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <change_digit_1+0x3c8>)
 8001022:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	3301      	adds	r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	2b20      	cmp	r3, #32
 8001030:	dde4      	ble.n	8000ffc <change_digit_1+0x364>
		for(int i = 0; i <= 57; ++i)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3301      	adds	r3, #1
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b39      	cmp	r3, #57	; 0x39
 800103c:	dddb      	ble.n	8000ff6 <change_digit_1+0x35e>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <change_digit_1+0x3d0>)
 8001040:	4a07      	ldr	r2, [pc, #28]	; (8001060 <change_digit_1+0x3c8>)
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <change_digit_1+0x3d4>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	4a08      	ldr	r2, [pc, #32]	; (800106c <change_digit_1+0x3d4>)
 800104a:	f043 0302 	orr.w	r3, r3, #2
 800104e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001050:	bf00      	nop
 8001052:	3764      	adds	r7, #100	; 0x64
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	0800abe4 	.word	0x0800abe4
 8001060:	20000020 	.word	0x20000020
 8001064:	08004338 	.word	0x08004338
 8001068:	40016904 	.word	0x40016904
 800106c:	40016800 	.word	0x40016800

08001070 <change_digit_2>:

void change_digit_2(int poz, int number)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b098      	sub	sp, #96	; 0x60
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
	change_digit_1(poz, number);
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff fe0b 	bl	8000c98 <change_digit_1>
	int x = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	65fb      	str	r3, [r7, #92]	; 0x5c
	int k = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	65bb      	str	r3, [r7, #88]	; 0x58

	if(poz==1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <change_digit_2+0x24>
		x = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2b02      	cmp	r3, #2
 8001098:	d101      	bne.n	800109e <change_digit_2+0x2e>
		x = 110;
 800109a:	236e      	movs	r3, #110	; 0x6e
 800109c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==3)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d101      	bne.n	80010a8 <change_digit_2+0x38>
		x = 246;
 80010a4:	23f6      	movs	r3, #246	; 0xf6
 80010a6:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==4)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d102      	bne.n	80010b4 <change_digit_2+0x44>
		x = 356;
 80010ae:	f44f 73b2 	mov.w	r3, #356	; 0x164
 80010b2:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(number==0)
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d126      	bne.n	8001108 <change_digit_2+0x98>
		for(int i = 0; i <= 173; ++i)
 80010ba:	2300      	movs	r3, #0
 80010bc:	657b      	str	r3, [r7, #84]	; 0x54
 80010be:	e020      	b.n	8001102 <change_digit_2+0x92>
			for(int j = 0; j <= 98; ++j)
 80010c0:	2300      	movs	r3, #0
 80010c2:	653b      	str	r3, [r7, #80]	; 0x50
 80010c4:	e017      	b.n	80010f6 <change_digit_2+0x86>
				screen[x+42253+i*480+j] = zero_picture_2[k++];
 80010c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80010c8:	1c4b      	adds	r3, r1, #1
 80010ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80010cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ce:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80010d2:	441a      	add	r2, r3
 80010d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80010d6:	4603      	mov	r3, r0
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	1a1b      	subs	r3, r3, r0
 80010dc:	015b      	lsls	r3, r3, #5
 80010de:	441a      	add	r2, r3
 80010e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010e2:	4413      	add	r3, r2
 80010e4:	4aa0      	ldr	r2, [pc, #640]	; (8001368 <change_digit_2+0x2f8>)
 80010e6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80010ea:	4aa0      	ldr	r2, [pc, #640]	; (800136c <change_digit_2+0x2fc>)
 80010ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80010f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f2:	3301      	adds	r3, #1
 80010f4:	653b      	str	r3, [r7, #80]	; 0x50
 80010f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010f8:	2b62      	cmp	r3, #98	; 0x62
 80010fa:	dde4      	ble.n	80010c6 <change_digit_2+0x56>
		for(int i = 0; i <= 173; ++i)
 80010fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010fe:	3301      	adds	r3, #1
 8001100:	657b      	str	r3, [r7, #84]	; 0x54
 8001102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001104:	2bad      	cmp	r3, #173	; 0xad
 8001106:	dddb      	ble.n	80010c0 <change_digit_2+0x50>
	if(number==1)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d126      	bne.n	800115c <change_digit_2+0xec>
		for(int i = 0; i <= 173; ++i)
 800110e:	2300      	movs	r3, #0
 8001110:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001112:	e020      	b.n	8001156 <change_digit_2+0xe6>
			for(int j = 0; j <= 98; ++j)
 8001114:	2300      	movs	r3, #0
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
 8001118:	e017      	b.n	800114a <change_digit_2+0xda>
				screen[x+42253+i*480+j] = one_picture_2[k++];
 800111a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800111c:	1c4b      	adds	r3, r1, #1
 800111e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001122:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001126:	441a      	add	r2, r3
 8001128:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800112a:	4603      	mov	r3, r0
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	1a1b      	subs	r3, r3, r0
 8001130:	015b      	lsls	r3, r3, #5
 8001132:	441a      	add	r2, r3
 8001134:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001136:	4413      	add	r3, r2
 8001138:	4a8d      	ldr	r2, [pc, #564]	; (8001370 <change_digit_2+0x300>)
 800113a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800113e:	4a8b      	ldr	r2, [pc, #556]	; (800136c <change_digit_2+0x2fc>)
 8001140:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001146:	3301      	adds	r3, #1
 8001148:	64bb      	str	r3, [r7, #72]	; 0x48
 800114a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800114c:	2b62      	cmp	r3, #98	; 0x62
 800114e:	dde4      	ble.n	800111a <change_digit_2+0xaa>
		for(int i = 0; i <= 173; ++i)
 8001150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001152:	3301      	adds	r3, #1
 8001154:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001158:	2bad      	cmp	r3, #173	; 0xad
 800115a:	dddb      	ble.n	8001114 <change_digit_2+0xa4>
	if(number==2)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d126      	bne.n	80011b0 <change_digit_2+0x140>
		for(int i = 0; i <= 173; ++i)
 8001162:	2300      	movs	r3, #0
 8001164:	647b      	str	r3, [r7, #68]	; 0x44
 8001166:	e020      	b.n	80011aa <change_digit_2+0x13a>
			for(int j = 0; j <= 98; ++j)
 8001168:	2300      	movs	r3, #0
 800116a:	643b      	str	r3, [r7, #64]	; 0x40
 800116c:	e017      	b.n	800119e <change_digit_2+0x12e>
				screen[x+42253+i*480+j] = two_picture_2[k++];
 800116e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001170:	1c4b      	adds	r3, r1, #1
 8001172:	65bb      	str	r3, [r7, #88]	; 0x58
 8001174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001176:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800117a:	441a      	add	r2, r3
 800117c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800117e:	4603      	mov	r3, r0
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	1a1b      	subs	r3, r3, r0
 8001184:	015b      	lsls	r3, r3, #5
 8001186:	441a      	add	r2, r3
 8001188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800118a:	4413      	add	r3, r2
 800118c:	4a79      	ldr	r2, [pc, #484]	; (8001374 <change_digit_2+0x304>)
 800118e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001192:	4a76      	ldr	r2, [pc, #472]	; (800136c <change_digit_2+0x2fc>)
 8001194:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800119a:	3301      	adds	r3, #1
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
 800119e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a0:	2b62      	cmp	r3, #98	; 0x62
 80011a2:	dde4      	ble.n	800116e <change_digit_2+0xfe>
		for(int i = 0; i <= 173; ++i)
 80011a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011a6:	3301      	adds	r3, #1
 80011a8:	647b      	str	r3, [r7, #68]	; 0x44
 80011aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011ac:	2bad      	cmp	r3, #173	; 0xad
 80011ae:	dddb      	ble.n	8001168 <change_digit_2+0xf8>
	if(number==3)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d126      	bne.n	8001204 <change_digit_2+0x194>
		for(int i = 0; i <= 173; ++i)
 80011b6:	2300      	movs	r3, #0
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011ba:	e020      	b.n	80011fe <change_digit_2+0x18e>
			for(int j = 0; j <= 98; ++j)
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
 80011c0:	e017      	b.n	80011f2 <change_digit_2+0x182>
				screen[x+42253+i*480+j] = three_picture_2[k++];
 80011c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80011c4:	1c4b      	adds	r3, r1, #1
 80011c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80011c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011ca:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80011ce:	441a      	add	r2, r3
 80011d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011d2:	4603      	mov	r3, r0
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	1a1b      	subs	r3, r3, r0
 80011d8:	015b      	lsls	r3, r3, #5
 80011da:	441a      	add	r2, r3
 80011dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011de:	4413      	add	r3, r2
 80011e0:	4a65      	ldr	r2, [pc, #404]	; (8001378 <change_digit_2+0x308>)
 80011e2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80011e6:	4a61      	ldr	r2, [pc, #388]	; (800136c <change_digit_2+0x2fc>)
 80011e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80011ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ee:	3301      	adds	r3, #1
 80011f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80011f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011f4:	2b62      	cmp	r3, #98	; 0x62
 80011f6:	dde4      	ble.n	80011c2 <change_digit_2+0x152>
		for(int i = 0; i <= 173; ++i)
 80011f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011fa:	3301      	adds	r3, #1
 80011fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001200:	2bad      	cmp	r3, #173	; 0xad
 8001202:	dddb      	ble.n	80011bc <change_digit_2+0x14c>
	if(number==4)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d126      	bne.n	8001258 <change_digit_2+0x1e8>
		for(int i = 0; i <= 173; ++i)
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
 800120e:	e020      	b.n	8001252 <change_digit_2+0x1e2>
			for(int j = 0; j <= 98; ++j)
 8001210:	2300      	movs	r3, #0
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
 8001214:	e017      	b.n	8001246 <change_digit_2+0x1d6>
				screen[x+42253+i*480+j] = four_picture_2[k++];
 8001216:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001218:	1c4b      	adds	r3, r1, #1
 800121a:	65bb      	str	r3, [r7, #88]	; 0x58
 800121c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800121e:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001222:	441a      	add	r2, r3
 8001224:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001226:	4603      	mov	r3, r0
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	1a1b      	subs	r3, r3, r0
 800122c:	015b      	lsls	r3, r3, #5
 800122e:	441a      	add	r2, r3
 8001230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001232:	4413      	add	r3, r2
 8001234:	4a51      	ldr	r2, [pc, #324]	; (800137c <change_digit_2+0x30c>)
 8001236:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800123a:	4a4c      	ldr	r2, [pc, #304]	; (800136c <change_digit_2+0x2fc>)
 800123c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001242:	3301      	adds	r3, #1
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
 8001246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001248:	2b62      	cmp	r3, #98	; 0x62
 800124a:	dde4      	ble.n	8001216 <change_digit_2+0x1a6>
		for(int i = 0; i <= 173; ++i)
 800124c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124e:	3301      	adds	r3, #1
 8001250:	637b      	str	r3, [r7, #52]	; 0x34
 8001252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001254:	2bad      	cmp	r3, #173	; 0xad
 8001256:	dddb      	ble.n	8001210 <change_digit_2+0x1a0>
	if(number==5)
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	2b05      	cmp	r3, #5
 800125c:	d126      	bne.n	80012ac <change_digit_2+0x23c>
		for(int i = 0; i <= 173; ++i)
 800125e:	2300      	movs	r3, #0
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001262:	e020      	b.n	80012a6 <change_digit_2+0x236>
			for(int j = 0; j <= 98; ++j)
 8001264:	2300      	movs	r3, #0
 8001266:	62bb      	str	r3, [r7, #40]	; 0x28
 8001268:	e017      	b.n	800129a <change_digit_2+0x22a>
				screen[x+42253+i*480+j] = five_picture_2[k++];
 800126a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800126c:	1c4b      	adds	r3, r1, #1
 800126e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001270:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001272:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001276:	441a      	add	r2, r3
 8001278:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800127a:	4603      	mov	r3, r0
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	1a1b      	subs	r3, r3, r0
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	441a      	add	r2, r3
 8001284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001286:	4413      	add	r3, r2
 8001288:	4a3d      	ldr	r2, [pc, #244]	; (8001380 <change_digit_2+0x310>)
 800128a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800128e:	4a37      	ldr	r2, [pc, #220]	; (800136c <change_digit_2+0x2fc>)
 8001290:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001296:	3301      	adds	r3, #1
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
 800129a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129c:	2b62      	cmp	r3, #98	; 0x62
 800129e:	dde4      	ble.n	800126a <change_digit_2+0x1fa>
		for(int i = 0; i <= 173; ++i)
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	3301      	adds	r3, #1
 80012a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a8:	2bad      	cmp	r3, #173	; 0xad
 80012aa:	dddb      	ble.n	8001264 <change_digit_2+0x1f4>
	if(number==6)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d126      	bne.n	8001300 <change_digit_2+0x290>
		for(int i = 0; i <= 173; ++i)
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
 80012b6:	e020      	b.n	80012fa <change_digit_2+0x28a>
			for(int j = 0; j <= 98; ++j)
 80012b8:	2300      	movs	r3, #0
 80012ba:	623b      	str	r3, [r7, #32]
 80012bc:	e017      	b.n	80012ee <change_digit_2+0x27e>
				screen[x+42253+i*480+j] = six_picture_2[k++];
 80012be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80012c0:	1c4b      	adds	r3, r1, #1
 80012c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80012c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012c6:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80012ca:	441a      	add	r2, r3
 80012cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012ce:	4603      	mov	r3, r0
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	1a1b      	subs	r3, r3, r0
 80012d4:	015b      	lsls	r3, r3, #5
 80012d6:	441a      	add	r2, r3
 80012d8:	6a3b      	ldr	r3, [r7, #32]
 80012da:	4413      	add	r3, r2
 80012dc:	4a29      	ldr	r2, [pc, #164]	; (8001384 <change_digit_2+0x314>)
 80012de:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80012e2:	4a22      	ldr	r2, [pc, #136]	; (800136c <change_digit_2+0x2fc>)
 80012e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80012e8:	6a3b      	ldr	r3, [r7, #32]
 80012ea:	3301      	adds	r3, #1
 80012ec:	623b      	str	r3, [r7, #32]
 80012ee:	6a3b      	ldr	r3, [r7, #32]
 80012f0:	2b62      	cmp	r3, #98	; 0x62
 80012f2:	dde4      	ble.n	80012be <change_digit_2+0x24e>
		for(int i = 0; i <= 173; ++i)
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	3301      	adds	r3, #1
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	2bad      	cmp	r3, #173	; 0xad
 80012fe:	dddb      	ble.n	80012b8 <change_digit_2+0x248>
	if(number==7)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2b07      	cmp	r3, #7
 8001304:	d126      	bne.n	8001354 <change_digit_2+0x2e4>
		for(int i = 0; i <= 173; ++i)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e020      	b.n	800134e <change_digit_2+0x2de>
			for(int j = 0; j <= 98; ++j)
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	e017      	b.n	8001342 <change_digit_2+0x2d2>
				screen[x+42253+i*480+j] = seven_picture_2[k++];
 8001312:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001314:	1c4b      	adds	r3, r1, #1
 8001316:	65bb      	str	r3, [r7, #88]	; 0x58
 8001318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131a:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800131e:	441a      	add	r2, r3
 8001320:	69f8      	ldr	r0, [r7, #28]
 8001322:	4603      	mov	r3, r0
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	1a1b      	subs	r3, r3, r0
 8001328:	015b      	lsls	r3, r3, #5
 800132a:	441a      	add	r2, r3
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	4413      	add	r3, r2
 8001330:	4a15      	ldr	r2, [pc, #84]	; (8001388 <change_digit_2+0x318>)
 8001332:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <change_digit_2+0x2fc>)
 8001338:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	3301      	adds	r3, #1
 8001340:	61bb      	str	r3, [r7, #24]
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	2b62      	cmp	r3, #98	; 0x62
 8001346:	dde4      	ble.n	8001312 <change_digit_2+0x2a2>
		for(int i = 0; i <= 173; ++i)
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2bad      	cmp	r3, #173	; 0xad
 8001352:	dddb      	ble.n	800130c <change_digit_2+0x29c>
	if(number==8)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	2b08      	cmp	r3, #8
 8001358:	d139      	bne.n	80013ce <change_digit_2+0x35e>
		for(int i = 0; i <= 173; ++i)
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e033      	b.n	80013c8 <change_digit_2+0x358>
			for(int j = 0; j <= 98; ++j)
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	e02a      	b.n	80013bc <change_digit_2+0x34c>
 8001366:	bf00      	nop
 8001368:	0804ef78 	.word	0x0804ef78
 800136c:	20000020 	.word	0x20000020
 8001370:	08024e94 	.word	0x08024e94
 8001374:	080468e4 	.word	0x080468e4
 8001378:	0803e250 	.word	0x0803e250
 800137c:	0801416c 	.word	0x0801416c
 8001380:	0800bad8 	.word	0x0800bad8
 8001384:	08035bbc 	.word	0x08035bbc
 8001388:	0802d528 	.word	0x0802d528
				screen[x+42253+i*480+j] = eigth_picture_2[k++];
 800138c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800138e:	1c4b      	adds	r3, r1, #1
 8001390:	65bb      	str	r3, [r7, #88]	; 0x58
 8001392:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001394:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001398:	441a      	add	r2, r3
 800139a:	6978      	ldr	r0, [r7, #20]
 800139c:	4603      	mov	r3, r0
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	1a1b      	subs	r3, r3, r0
 80013a2:	015b      	lsls	r3, r3, #5
 80013a4:	441a      	add	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4413      	add	r3, r2
 80013aa:	4a24      	ldr	r2, [pc, #144]	; (800143c <change_digit_2+0x3cc>)
 80013ac:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80013b0:	4a23      	ldr	r2, [pc, #140]	; (8001440 <change_digit_2+0x3d0>)
 80013b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	3301      	adds	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	2b62      	cmp	r3, #98	; 0x62
 80013c0:	dde4      	ble.n	800138c <change_digit_2+0x31c>
		for(int i = 0; i <= 173; ++i)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	3301      	adds	r3, #1
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	2bad      	cmp	r3, #173	; 0xad
 80013cc:	ddc8      	ble.n	8001360 <change_digit_2+0x2f0>
	if(number==9)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	2b09      	cmp	r3, #9
 80013d2:	d126      	bne.n	8001422 <change_digit_2+0x3b2>
		for(int i = 0; i <= 173; ++i)
 80013d4:	2300      	movs	r3, #0
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	e020      	b.n	800141c <change_digit_2+0x3ac>
			for(int j = 0; j <= 98; ++j)
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	e017      	b.n	8001410 <change_digit_2+0x3a0>
				screen[x+42253+i*480+j] = nine_picture_2[k++];
 80013e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80013e2:	1c4b      	adds	r3, r1, #1
 80013e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80013e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013e8:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80013ec:	441a      	add	r2, r3
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	4603      	mov	r3, r0
 80013f2:	011b      	lsls	r3, r3, #4
 80013f4:	1a1b      	subs	r3, r3, r0
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	441a      	add	r2, r3
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <change_digit_2+0x3d4>)
 8001400:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001404:	4a0e      	ldr	r2, [pc, #56]	; (8001440 <change_digit_2+0x3d0>)
 8001406:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	3301      	adds	r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	2b62      	cmp	r3, #98	; 0x62
 8001414:	dde4      	ble.n	80013e0 <change_digit_2+0x370>
		for(int i = 0; i <= 173; ++i)
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3301      	adds	r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	2bad      	cmp	r3, #173	; 0xad
 8001420:	dddb      	ble.n	80013da <change_digit_2+0x36a>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <change_digit_2+0x3d8>)
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <change_digit_2+0x3d0>)
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <change_digit_2+0x3dc>)
 800142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <change_digit_2+0x3dc>)
 800142e:	f043 0302 	orr.w	r3, r3, #2
 8001432:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001434:	bf00      	nop
 8001436:	3760      	adds	r7, #96	; 0x60
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	0805760c 	.word	0x0805760c
 8001440:	20000020 	.word	0x20000020
 8001444:	0801c800 	.word	0x0801c800
 8001448:	40016904 	.word	0x40016904
 800144c:	40016800 	.word	0x40016800

08001450 <change_digit_3>:

void change_digit_3(int number)
{
 8001450:	b480      	push	{r7}
 8001452:	b0c7      	sub	sp, #284	; 0x11c
 8001454:	af00      	add	r7, sp, #0
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	6018      	str	r0, [r3, #0]
	int k = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	if(number==0)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	f040 809c 	bne.w	80015a2 <change_digit_3+0x152>
	{
		for(int i = 0; i <= 57; ++i)
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001470:	e029      	b.n	80014c6 <change_digit_3+0x76>
			for(int j = 0; j <= 32; ++j)
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001478:	e01c      	b.n	80014b4 <change_digit_3+0x64>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 800147a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800147e:	1c53      	adds	r3, r2, #1
 8001480:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001484:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001488:	460b      	mov	r3, r1
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	1a5b      	subs	r3, r3, r1
 800148e:	015b      	lsls	r3, r3, #5
 8001490:	4619      	mov	r1, r3
 8001492:	f241 3349 	movw	r3, #4937	; 0x1349
 8001496:	440b      	add	r3, r1
 8001498:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800149c:	440b      	add	r3, r1
 800149e:	49cd      	ldr	r1, [pc, #820]	; (80017d4 <change_digit_3+0x384>)
 80014a0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80014a4:	4acc      	ldr	r2, [pc, #816]	; (80017d8 <change_digit_3+0x388>)
 80014a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80014aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014ae:	3301      	adds	r3, #1
 80014b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	ddde      	ble.n	800147a <change_digit_3+0x2a>
		for(int i = 0; i <= 57; ++i)
 80014bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014c0:	3301      	adds	r3, #1
 80014c2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80014c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014ca:	2b39      	cmp	r3, #57	; 0x39
 80014cc:	ddd1      	ble.n	8001472 <change_digit_3+0x22>
		k = 0;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80014da:	e029      	b.n	8001530 <change_digit_3+0xe0>
			for(int j = 0; j <= 32; ++j)
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014e2:	e01c      	b.n	800151e <change_digit_3+0xce>
				screen[38+4861+i*480+j] = none_picture_3[k++];
 80014e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014e8:	1c53      	adds	r3, r2, #1
 80014ea:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014ee:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80014f2:	460b      	mov	r3, r1
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	1a5b      	subs	r3, r3, r1
 80014f8:	015b      	lsls	r3, r3, #5
 80014fa:	4619      	mov	r1, r3
 80014fc:	f241 3323 	movw	r3, #4899	; 0x1323
 8001500:	440b      	add	r3, r1
 8001502:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001506:	440b      	add	r3, r1
 8001508:	49b4      	ldr	r1, [pc, #720]	; (80017dc <change_digit_3+0x38c>)
 800150a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800150e:	4ab2      	ldr	r2, [pc, #712]	; (80017d8 <change_digit_3+0x388>)
 8001510:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001514:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001518:	3301      	adds	r3, #1
 800151a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800151e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001522:	2b20      	cmp	r3, #32
 8001524:	ddde      	ble.n	80014e4 <change_digit_3+0x94>
		for(int i = 0; i <= 57; ++i)
 8001526:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800152a:	3301      	adds	r3, #1
 800152c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001530:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001534:	2b39      	cmp	r3, #57	; 0x39
 8001536:	ddd1      	ble.n	80014dc <change_digit_3+0x8c>
		k = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001544:	e029      	b.n	800159a <change_digit_3+0x14a>
			for(int j = 0; j <= 32; ++j)
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800154c:	e01c      	b.n	8001588 <change_digit_3+0x138>
				screen[4861+i*480+j] = none_picture_3[k++];
 800154e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001552:	1c53      	adds	r3, r2, #1
 8001554:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001558:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800155c:	460b      	mov	r3, r1
 800155e:	011b      	lsls	r3, r3, #4
 8001560:	1a5b      	subs	r3, r3, r1
 8001562:	015b      	lsls	r3, r3, #5
 8001564:	4619      	mov	r1, r3
 8001566:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800156a:	440b      	add	r3, r1
 800156c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8001570:	440b      	add	r3, r1
 8001572:	499a      	ldr	r1, [pc, #616]	; (80017dc <change_digit_3+0x38c>)
 8001574:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001578:	4a97      	ldr	r2, [pc, #604]	; (80017d8 <change_digit_3+0x388>)
 800157a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800157e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001582:	3301      	adds	r3, #1
 8001584:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001588:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800158c:	2b20      	cmp	r3, #32
 800158e:	ddde      	ble.n	800154e <change_digit_3+0xfe>
		for(int i = 0; i <= 57; ++i)
 8001590:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001594:	3301      	adds	r3, #1
 8001596:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800159a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800159e:	2b39      	cmp	r3, #57	; 0x39
 80015a0:	ddd1      	ble.n	8001546 <change_digit_3+0xf6>
	}

	if(number==10)
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2b0a      	cmp	r3, #10
 80015a8:	f040 809c 	bne.w	80016e4 <change_digit_3+0x294>
	{
		for(int i = 0; i <= 57; ++i)
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015b2:	e029      	b.n	8001608 <change_digit_3+0x1b8>
			for(int j = 0; j <= 32; ++j)
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015ba:	e01c      	b.n	80015f6 <change_digit_3+0x1a6>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80015bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015c0:	1c53      	adds	r3, r2, #1
 80015c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015c6:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80015ca:	460b      	mov	r3, r1
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	1a5b      	subs	r3, r3, r1
 80015d0:	015b      	lsls	r3, r3, #5
 80015d2:	4619      	mov	r1, r3
 80015d4:	f241 3349 	movw	r3, #4937	; 0x1349
 80015d8:	440b      	add	r3, r1
 80015da:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80015de:	440b      	add	r3, r1
 80015e0:	497c      	ldr	r1, [pc, #496]	; (80017d4 <change_digit_3+0x384>)
 80015e2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80015e6:	4a7c      	ldr	r2, [pc, #496]	; (80017d8 <change_digit_3+0x388>)
 80015e8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80015ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015f0:	3301      	adds	r3, #1
 80015f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015fa:	2b20      	cmp	r3, #32
 80015fc:	ddde      	ble.n	80015bc <change_digit_3+0x16c>
		for(int i = 0; i <= 57; ++i)
 80015fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001602:	3301      	adds	r3, #1
 8001604:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001608:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800160c:	2b39      	cmp	r3, #57	; 0x39
 800160e:	ddd1      	ble.n	80015b4 <change_digit_3+0x164>
		k = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800161c:	e029      	b.n	8001672 <change_digit_3+0x222>
			for(int j = 0; j <= 32; ++j)
 800161e:	2300      	movs	r3, #0
 8001620:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001624:	e01c      	b.n	8001660 <change_digit_3+0x210>
				screen[38+4861+i*480+j] = one_picture_3[k++];
 8001626:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800162a:	1c53      	adds	r3, r2, #1
 800162c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001630:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001634:	460b      	mov	r3, r1
 8001636:	011b      	lsls	r3, r3, #4
 8001638:	1a5b      	subs	r3, r3, r1
 800163a:	015b      	lsls	r3, r3, #5
 800163c:	4619      	mov	r1, r3
 800163e:	f241 3323 	movw	r3, #4899	; 0x1323
 8001642:	440b      	add	r3, r1
 8001644:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001648:	440b      	add	r3, r1
 800164a:	4965      	ldr	r1, [pc, #404]	; (80017e0 <change_digit_3+0x390>)
 800164c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001650:	4a61      	ldr	r2, [pc, #388]	; (80017d8 <change_digit_3+0x388>)
 8001652:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001656:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800165a:	3301      	adds	r3, #1
 800165c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001660:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001664:	2b20      	cmp	r3, #32
 8001666:	ddde      	ble.n	8001626 <change_digit_3+0x1d6>
		for(int i = 0; i <= 57; ++i)
 8001668:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800166c:	3301      	adds	r3, #1
 800166e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001672:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001676:	2b39      	cmp	r3, #57	; 0x39
 8001678:	ddd1      	ble.n	800161e <change_digit_3+0x1ce>
		k = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001680:	2300      	movs	r3, #0
 8001682:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001686:	e029      	b.n	80016dc <change_digit_3+0x28c>
			for(int j = 0; j <= 32; ++j)
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800168e:	e01c      	b.n	80016ca <change_digit_3+0x27a>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001690:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001694:	1c53      	adds	r3, r2, #1
 8001696:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800169a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800169e:	460b      	mov	r3, r1
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	1a5b      	subs	r3, r3, r1
 80016a4:	015b      	lsls	r3, r3, #5
 80016a6:	4619      	mov	r1, r3
 80016a8:	f241 23fd 	movw	r3, #4861	; 0x12fd
 80016ac:	440b      	add	r3, r1
 80016ae:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80016b2:	440b      	add	r3, r1
 80016b4:	4949      	ldr	r1, [pc, #292]	; (80017dc <change_digit_3+0x38c>)
 80016b6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80016ba:	4a47      	ldr	r2, [pc, #284]	; (80017d8 <change_digit_3+0x388>)
 80016bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80016c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016c4:	3301      	adds	r3, #1
 80016c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	ddde      	ble.n	8001690 <change_digit_3+0x240>
		for(int i = 0; i <= 57; ++i)
 80016d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016d6:	3301      	adds	r3, #1
 80016d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016e0:	2b39      	cmp	r3, #57	; 0x39
 80016e2:	ddd1      	ble.n	8001688 <change_digit_3+0x238>
	}

	if(number==20)
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b14      	cmp	r3, #20
 80016ea:	f040 80a7 	bne.w	800183c <change_digit_3+0x3ec>
	{
		for(int i = 0; i <= 57; ++i)
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80016f4:	e029      	b.n	800174a <change_digit_3+0x2fa>
			for(int j = 0; j <= 32; ++j)
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80016fc:	e01c      	b.n	8001738 <change_digit_3+0x2e8>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80016fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001702:	1c53      	adds	r3, r2, #1
 8001704:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001708:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 800170c:	460b      	mov	r3, r1
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	1a5b      	subs	r3, r3, r1
 8001712:	015b      	lsls	r3, r3, #5
 8001714:	4619      	mov	r1, r3
 8001716:	f241 3349 	movw	r3, #4937	; 0x1349
 800171a:	440b      	add	r3, r1
 800171c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001720:	440b      	add	r3, r1
 8001722:	492c      	ldr	r1, [pc, #176]	; (80017d4 <change_digit_3+0x384>)
 8001724:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001728:	4a2b      	ldr	r2, [pc, #172]	; (80017d8 <change_digit_3+0x388>)
 800172a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800172e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001732:	3301      	adds	r3, #1
 8001734:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800173c:	2b20      	cmp	r3, #32
 800173e:	ddde      	ble.n	80016fe <change_digit_3+0x2ae>
		for(int i = 0; i <= 57; ++i)
 8001740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001744:	3301      	adds	r3, #1
 8001746:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800174a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800174e:	2b39      	cmp	r3, #57	; 0x39
 8001750:	ddd1      	ble.n	80016f6 <change_digit_3+0x2a6>
		k = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800175e:	e029      	b.n	80017b4 <change_digit_3+0x364>
			for(int j = 0; j <= 32; ++j)
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001766:	e01c      	b.n	80017a2 <change_digit_3+0x352>
				screen[38+4861+i*480+j] = two_picture_3[k++];
 8001768:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800176c:	1c53      	adds	r3, r2, #1
 800176e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001772:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001776:	460b      	mov	r3, r1
 8001778:	011b      	lsls	r3, r3, #4
 800177a:	1a5b      	subs	r3, r3, r1
 800177c:	015b      	lsls	r3, r3, #5
 800177e:	4619      	mov	r1, r3
 8001780:	f241 3323 	movw	r3, #4899	; 0x1323
 8001784:	440b      	add	r3, r1
 8001786:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800178a:	440b      	add	r3, r1
 800178c:	4915      	ldr	r1, [pc, #84]	; (80017e4 <change_digit_3+0x394>)
 800178e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001792:	4a11      	ldr	r2, [pc, #68]	; (80017d8 <change_digit_3+0x388>)
 8001794:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800179c:	3301      	adds	r3, #1
 800179e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017a6:	2b20      	cmp	r3, #32
 80017a8:	ddde      	ble.n	8001768 <change_digit_3+0x318>
		for(int i = 0; i <= 57; ++i)
 80017aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017ae:	3301      	adds	r3, #1
 80017b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80017b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017b8:	2b39      	cmp	r3, #57	; 0x39
 80017ba:	ddd1      	ble.n	8001760 <change_digit_3+0x310>
		k = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80017c8:	e034      	b.n	8001834 <change_digit_3+0x3e4>
			for(int j = 0; j <= 32; ++j)
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017d0:	e027      	b.n	8001822 <change_digit_3+0x3d2>
 80017d2:	bf00      	nop
 80017d4:	08068334 	.word	0x08068334
 80017d8:	20000020 	.word	0x20000020
 80017dc:	0806297c 	.word	0x0806297c
 80017e0:	08063870 	.word	0x08063870
 80017e4:	08067440 	.word	0x08067440
				screen[4861+i*480+j] = none_picture_3[k++];
 80017e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017ec:	1c53      	adds	r3, r2, #1
 80017ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017f2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80017f6:	460b      	mov	r3, r1
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	1a5b      	subs	r3, r3, r1
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	4619      	mov	r1, r3
 8001800:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001804:	440b      	add	r3, r1
 8001806:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800180a:	440b      	add	r3, r1
 800180c:	49cd      	ldr	r1, [pc, #820]	; (8001b44 <change_digit_3+0x6f4>)
 800180e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001812:	4acd      	ldr	r2, [pc, #820]	; (8001b48 <change_digit_3+0x6f8>)
 8001814:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800181c:	3301      	adds	r3, #1
 800181e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001822:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001826:	2b20      	cmp	r3, #32
 8001828:	ddde      	ble.n	80017e8 <change_digit_3+0x398>
		for(int i = 0; i <= 57; ++i)
 800182a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800182e:	3301      	adds	r3, #1
 8001830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001834:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001838:	2b39      	cmp	r3, #57	; 0x39
 800183a:	ddc6      	ble.n	80017ca <change_digit_3+0x37a>
	}

	if(number==30)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b1e      	cmp	r3, #30
 8001842:	f040 809c 	bne.w	800197e <change_digit_3+0x52e>
	{
		for(int i = 0; i <= 57; ++i)
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800184c:	e029      	b.n	80018a2 <change_digit_3+0x452>
			for(int j = 0; j <= 32; ++j)
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001854:	e01c      	b.n	8001890 <change_digit_3+0x440>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001856:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800185a:	1c53      	adds	r3, r2, #1
 800185c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001860:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001864:	460b      	mov	r3, r1
 8001866:	011b      	lsls	r3, r3, #4
 8001868:	1a5b      	subs	r3, r3, r1
 800186a:	015b      	lsls	r3, r3, #5
 800186c:	4619      	mov	r1, r3
 800186e:	f241 3349 	movw	r3, #4937	; 0x1349
 8001872:	440b      	add	r3, r1
 8001874:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001878:	440b      	add	r3, r1
 800187a:	49b4      	ldr	r1, [pc, #720]	; (8001b4c <change_digit_3+0x6fc>)
 800187c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001880:	4ab1      	ldr	r2, [pc, #708]	; (8001b48 <change_digit_3+0x6f8>)
 8001882:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001886:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800188a:	3301      	adds	r3, #1
 800188c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001894:	2b20      	cmp	r3, #32
 8001896:	ddde      	ble.n	8001856 <change_digit_3+0x406>
		for(int i = 0; i <= 57; ++i)
 8001898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800189c:	3301      	adds	r3, #1
 800189e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80018a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018a6:	2b39      	cmp	r3, #57	; 0x39
 80018a8:	ddd1      	ble.n	800184e <change_digit_3+0x3fe>
		k = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018b6:	e029      	b.n	800190c <change_digit_3+0x4bc>
			for(int j = 0; j <= 32; ++j)
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80018be:	e01c      	b.n	80018fa <change_digit_3+0x4aa>
				screen[38+4861+i*480+j] = three_picture_3[k++];
 80018c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018c4:	1c53      	adds	r3, r2, #1
 80018c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018ca:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80018ce:	460b      	mov	r3, r1
 80018d0:	011b      	lsls	r3, r3, #4
 80018d2:	1a5b      	subs	r3, r3, r1
 80018d4:	015b      	lsls	r3, r3, #5
 80018d6:	4619      	mov	r1, r3
 80018d8:	f241 3323 	movw	r3, #4899	; 0x1323
 80018dc:	440b      	add	r3, r1
 80018de:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80018e2:	440b      	add	r3, r1
 80018e4:	499a      	ldr	r1, [pc, #616]	; (8001b50 <change_digit_3+0x700>)
 80018e6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80018ea:	4a97      	ldr	r2, [pc, #604]	; (8001b48 <change_digit_3+0x6f8>)
 80018ec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80018f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018f4:	3301      	adds	r3, #1
 80018f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80018fa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018fe:	2b20      	cmp	r3, #32
 8001900:	ddde      	ble.n	80018c0 <change_digit_3+0x470>
		for(int i = 0; i <= 57; ++i)
 8001902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001906:	3301      	adds	r3, #1
 8001908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800190c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001910:	2b39      	cmp	r3, #57	; 0x39
 8001912:	ddd1      	ble.n	80018b8 <change_digit_3+0x468>
		k = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800191a:	2300      	movs	r3, #0
 800191c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001920:	e029      	b.n	8001976 <change_digit_3+0x526>
			for(int j = 0; j <= 32; ++j)
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001928:	e01c      	b.n	8001964 <change_digit_3+0x514>
				screen[4861+i*480+j] = none_picture_3[k++];
 800192a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800192e:	1c53      	adds	r3, r2, #1
 8001930:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001934:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001938:	460b      	mov	r3, r1
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	1a5b      	subs	r3, r3, r1
 800193e:	015b      	lsls	r3, r3, #5
 8001940:	4619      	mov	r1, r3
 8001942:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001946:	440b      	add	r3, r1
 8001948:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800194c:	440b      	add	r3, r1
 800194e:	497d      	ldr	r1, [pc, #500]	; (8001b44 <change_digit_3+0x6f4>)
 8001950:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001954:	4a7c      	ldr	r2, [pc, #496]	; (8001b48 <change_digit_3+0x6f8>)
 8001956:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800195a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800195e:	3301      	adds	r3, #1
 8001960:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001964:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001968:	2b20      	cmp	r3, #32
 800196a:	ddde      	ble.n	800192a <change_digit_3+0x4da>
		for(int i = 0; i <= 57; ++i)
 800196c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001970:	3301      	adds	r3, #1
 8001972:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001976:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800197a:	2b39      	cmp	r3, #57	; 0x39
 800197c:	ddd1      	ble.n	8001922 <change_digit_3+0x4d2>
	}

	if(number==40)
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b28      	cmp	r3, #40	; 0x28
 8001984:	f040 809c 	bne.w	8001ac0 <change_digit_3+0x670>
	{
		for(int i = 0; i <= 57; ++i)
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800198e:	e029      	b.n	80019e4 <change_digit_3+0x594>
			for(int j = 0; j <= 32; ++j)
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001996:	e01c      	b.n	80019d2 <change_digit_3+0x582>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001998:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800199c:	1c53      	adds	r3, r2, #1
 800199e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80019a2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80019a6:	460b      	mov	r3, r1
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	1a5b      	subs	r3, r3, r1
 80019ac:	015b      	lsls	r3, r3, #5
 80019ae:	4619      	mov	r1, r3
 80019b0:	f241 3349 	movw	r3, #4937	; 0x1349
 80019b4:	440b      	add	r3, r1
 80019b6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80019ba:	440b      	add	r3, r1
 80019bc:	4963      	ldr	r1, [pc, #396]	; (8001b4c <change_digit_3+0x6fc>)
 80019be:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80019c2:	4a61      	ldr	r2, [pc, #388]	; (8001b48 <change_digit_3+0x6f8>)
 80019c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80019c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019cc:	3301      	adds	r3, #1
 80019ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	ddde      	ble.n	8001998 <change_digit_3+0x548>
		for(int i = 0; i <= 57; ++i)
 80019da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019de:	3301      	adds	r3, #1
 80019e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80019e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019e8:	2b39      	cmp	r3, #57	; 0x39
 80019ea:	ddd1      	ble.n	8001990 <change_digit_3+0x540>
		k = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019f8:	e029      	b.n	8001a4e <change_digit_3+0x5fe>
			for(int j = 0; j <= 32; ++j)
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a00:	e01c      	b.n	8001a3c <change_digit_3+0x5ec>
				screen[38+4861+i*480+j] = four_picture_3[k++];
 8001a02:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a06:	1c53      	adds	r3, r2, #1
 8001a08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a0c:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001a10:	460b      	mov	r3, r1
 8001a12:	011b      	lsls	r3, r3, #4
 8001a14:	1a5b      	subs	r3, r3, r1
 8001a16:	015b      	lsls	r3, r3, #5
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f241 3323 	movw	r3, #4899	; 0x1323
 8001a1e:	440b      	add	r3, r1
 8001a20:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001a24:	440b      	add	r3, r1
 8001a26:	494b      	ldr	r1, [pc, #300]	; (8001b54 <change_digit_3+0x704>)
 8001a28:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001a2c:	4a46      	ldr	r2, [pc, #280]	; (8001b48 <change_digit_3+0x6f8>)
 8001a2e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a36:	3301      	adds	r3, #1
 8001a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a3c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	ddde      	ble.n	8001a02 <change_digit_3+0x5b2>
		for(int i = 0; i <= 57; ++i)
 8001a44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a48:	3301      	adds	r3, #1
 8001a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a52:	2b39      	cmp	r3, #57	; 0x39
 8001a54:	ddd1      	ble.n	80019fa <change_digit_3+0x5aa>
		k = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a62:	e029      	b.n	8001ab8 <change_digit_3+0x668>
			for(int j = 0; j <= 32; ++j)
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a6a:	e01c      	b.n	8001aa6 <change_digit_3+0x656>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001a6c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a70:	1c53      	adds	r3, r2, #1
 8001a72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a76:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	1a5b      	subs	r3, r3, r1
 8001a80:	015b      	lsls	r3, r3, #5
 8001a82:	4619      	mov	r1, r3
 8001a84:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001a88:	440b      	add	r3, r1
 8001a8a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001a8e:	440b      	add	r3, r1
 8001a90:	492c      	ldr	r1, [pc, #176]	; (8001b44 <change_digit_3+0x6f4>)
 8001a92:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001a96:	4a2c      	ldr	r2, [pc, #176]	; (8001b48 <change_digit_3+0x6f8>)
 8001a98:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001a9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aaa:	2b20      	cmp	r3, #32
 8001aac:	ddde      	ble.n	8001a6c <change_digit_3+0x61c>
		for(int i = 0; i <= 57; ++i)
 8001aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ab8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001abc:	2b39      	cmp	r3, #57	; 0x39
 8001abe:	ddd1      	ble.n	8001a64 <change_digit_3+0x614>
	}

	if(number==50)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b32      	cmp	r3, #50	; 0x32
 8001ac6:	f040 80a6 	bne.w	8001c16 <change_digit_3+0x7c6>
	{
		for(int i = 0; i <= 57; ++i)
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ad0:	e029      	b.n	8001b26 <change_digit_3+0x6d6>
			for(int j = 0; j <= 32; ++j)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ad8:	e01c      	b.n	8001b14 <change_digit_3+0x6c4>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001ada:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ade:	1c53      	adds	r3, r2, #1
 8001ae0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ae4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001ae8:	460b      	mov	r3, r1
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	1a5b      	subs	r3, r3, r1
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	4619      	mov	r1, r3
 8001af2:	f241 3349 	movw	r3, #4937	; 0x1349
 8001af6:	440b      	add	r3, r1
 8001af8:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001afc:	440b      	add	r3, r1
 8001afe:	4913      	ldr	r1, [pc, #76]	; (8001b4c <change_digit_3+0x6fc>)
 8001b00:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b04:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <change_digit_3+0x6f8>)
 8001b06:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	ddde      	ble.n	8001ada <change_digit_3+0x68a>
		for(int i = 0; i <= 57; ++i)
 8001b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b20:	3301      	adds	r3, #1
 8001b22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b2a:	2b39      	cmp	r3, #57	; 0x39
 8001b2c:	ddd1      	ble.n	8001ad2 <change_digit_3+0x682>
		k = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b3a:	e033      	b.n	8001ba4 <change_digit_3+0x754>
			for(int j = 0; j <= 32; ++j)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b42:	e026      	b.n	8001b92 <change_digit_3+0x742>
 8001b44:	0806297c 	.word	0x0806297c
 8001b48:	20000020 	.word	0x20000020
 8001b4c:	08068334 	.word	0x08068334
 8001b50:	0806654c 	.word	0x0806654c
 8001b54:	08060b94 	.word	0x08060b94
				screen[38+4861+i*480+j] = five_picture_3[k++];
 8001b58:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b5c:	1c53      	adds	r3, r2, #1
 8001b5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001b66:	460b      	mov	r3, r1
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	1a5b      	subs	r3, r3, r1
 8001b6c:	015b      	lsls	r3, r3, #5
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f241 3323 	movw	r3, #4899	; 0x1323
 8001b74:	440b      	add	r3, r1
 8001b76:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001b7a:	440b      	add	r3, r1
 8001b7c:	49b0      	ldr	r1, [pc, #704]	; (8001e40 <change_digit_3+0x9f0>)
 8001b7e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b82:	4ab0      	ldr	r2, [pc, #704]	; (8001e44 <change_digit_3+0x9f4>)
 8001b84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b96:	2b20      	cmp	r3, #32
 8001b98:	ddde      	ble.n	8001b58 <change_digit_3+0x708>
		for(int i = 0; i <= 57; ++i)
 8001b9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ba4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ba8:	2b39      	cmp	r3, #57	; 0x39
 8001baa:	ddc7      	ble.n	8001b3c <change_digit_3+0x6ec>
		k = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bb8:	e029      	b.n	8001c0e <change_digit_3+0x7be>
			for(int j = 0; j <= 32; ++j)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bc0:	e01c      	b.n	8001bfc <change_digit_3+0x7ac>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001bc2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bc6:	1c53      	adds	r3, r2, #1
 8001bc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001bcc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	011b      	lsls	r3, r3, #4
 8001bd4:	1a5b      	subs	r3, r3, r1
 8001bd6:	015b      	lsls	r3, r3, #5
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001bde:	440b      	add	r3, r1
 8001be0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001be4:	440b      	add	r3, r1
 8001be6:	4998      	ldr	r1, [pc, #608]	; (8001e48 <change_digit_3+0x9f8>)
 8001be8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001bec:	4a95      	ldr	r2, [pc, #596]	; (8001e44 <change_digit_3+0x9f4>)
 8001bee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001bf2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	ddde      	ble.n	8001bc2 <change_digit_3+0x772>
		for(int i = 0; i <= 57; ++i)
 8001c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c12:	2b39      	cmp	r3, #57	; 0x39
 8001c14:	ddd1      	ble.n	8001bba <change_digit_3+0x76a>
	}

	if(number==60)
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b3c      	cmp	r3, #60	; 0x3c
 8001c1c:	f040 8083 	bne.w	8001d26 <change_digit_3+0x8d6>
	{
		for(int i = 0; i <= 57; ++i)
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c26:	e024      	b.n	8001c72 <change_digit_3+0x822>
			for(int j = 0; j <= 32; ++j)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c2c:	e019      	b.n	8001c62 <change_digit_3+0x812>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001c2e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c32:	1c53      	adds	r3, r2, #1
 8001c34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c38:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	1a5b      	subs	r3, r3, r1
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	4619      	mov	r1, r3
 8001c46:	f241 3349 	movw	r3, #4937	; 0x1349
 8001c4a:	440b      	add	r3, r1
 8001c4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c4e:	440b      	add	r3, r1
 8001c50:	497e      	ldr	r1, [pc, #504]	; (8001e4c <change_digit_3+0x9fc>)
 8001c52:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001c56:	4a7b      	ldr	r2, [pc, #492]	; (8001e44 <change_digit_3+0x9f4>)
 8001c58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001c5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c5e:	3301      	adds	r3, #1
 8001c60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	dde2      	ble.n	8001c2e <change_digit_3+0x7de>
		for(int i = 0; i <= 57; ++i)
 8001c68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c76:	2b39      	cmp	r3, #57	; 0x39
 8001c78:	ddd6      	ble.n	8001c28 <change_digit_3+0x7d8>
		k = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001c80:	2300      	movs	r3, #0
 8001c82:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c84:	e021      	b.n	8001cca <change_digit_3+0x87a>
			for(int j = 0; j <= 32; ++j)
 8001c86:	2300      	movs	r3, #0
 8001c88:	677b      	str	r3, [r7, #116]	; 0x74
 8001c8a:	e018      	b.n	8001cbe <change_digit_3+0x86e>
				screen[38+4861+i*480+j] = six_picture_3[k++];
 8001c8c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c90:	1c53      	adds	r3, r2, #1
 8001c92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c96:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c98:	460b      	mov	r3, r1
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	1a5b      	subs	r3, r3, r1
 8001c9e:	015b      	lsls	r3, r3, #5
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f241 3323 	movw	r3, #4899	; 0x1323
 8001ca6:	440b      	add	r3, r1
 8001ca8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001caa:	440b      	add	r3, r1
 8001cac:	4968      	ldr	r1, [pc, #416]	; (8001e50 <change_digit_3+0xa00>)
 8001cae:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001cb2:	4a64      	ldr	r2, [pc, #400]	; (8001e44 <change_digit_3+0x9f4>)
 8001cb4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001cb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cba:	3301      	adds	r3, #1
 8001cbc:	677b      	str	r3, [r7, #116]	; 0x74
 8001cbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cc0:	2b20      	cmp	r3, #32
 8001cc2:	dde3      	ble.n	8001c8c <change_digit_3+0x83c>
		for(int i = 0; i <= 57; ++i)
 8001cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ccc:	2b39      	cmp	r3, #57	; 0x39
 8001cce:	ddda      	ble.n	8001c86 <change_digit_3+0x836>
		k = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	673b      	str	r3, [r7, #112]	; 0x70
 8001cda:	e021      	b.n	8001d20 <change_digit_3+0x8d0>
			for(int j = 0; j <= 32; ++j)
 8001cdc:	2300      	movs	r3, #0
 8001cde:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001ce0:	e018      	b.n	8001d14 <change_digit_3+0x8c4>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001ce2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ce6:	1c53      	adds	r3, r2, #1
 8001ce8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001cec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001cee:	460b      	mov	r3, r1
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	1a5b      	subs	r3, r3, r1
 8001cf4:	015b      	lsls	r3, r3, #5
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001cfc:	440b      	add	r3, r1
 8001cfe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001d00:	440b      	add	r3, r1
 8001d02:	4951      	ldr	r1, [pc, #324]	; (8001e48 <change_digit_3+0x9f8>)
 8001d04:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d08:	4a4e      	ldr	r2, [pc, #312]	; (8001e44 <change_digit_3+0x9f4>)
 8001d0a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d10:	3301      	adds	r3, #1
 8001d12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d16:	2b20      	cmp	r3, #32
 8001d18:	dde3      	ble.n	8001ce2 <change_digit_3+0x892>
		for(int i = 0; i <= 57; ++i)
 8001d1a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	673b      	str	r3, [r7, #112]	; 0x70
 8001d20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d22:	2b39      	cmp	r3, #57	; 0x39
 8001d24:	ddda      	ble.n	8001cdc <change_digit_3+0x88c>
	}

	if(number==70)
 8001d26:	1d3b      	adds	r3, r7, #4
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b46      	cmp	r3, #70	; 0x46
 8001d2c:	d17d      	bne.n	8001e2a <change_digit_3+0x9da>
	{
		for(int i = 0; i <= 57; ++i)
 8001d2e:	2300      	movs	r3, #0
 8001d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d32:	e021      	b.n	8001d78 <change_digit_3+0x928>
			for(int j = 0; j <= 32; ++j)
 8001d34:	2300      	movs	r3, #0
 8001d36:	667b      	str	r3, [r7, #100]	; 0x64
 8001d38:	e018      	b.n	8001d6c <change_digit_3+0x91c>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001d3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d3e:	1c53      	adds	r3, r2, #1
 8001d40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001d44:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d46:	460b      	mov	r3, r1
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	1a5b      	subs	r3, r3, r1
 8001d4c:	015b      	lsls	r3, r3, #5
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f241 3349 	movw	r3, #4937	; 0x1349
 8001d54:	440b      	add	r3, r1
 8001d56:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d58:	440b      	add	r3, r1
 8001d5a:	493c      	ldr	r1, [pc, #240]	; (8001e4c <change_digit_3+0x9fc>)
 8001d5c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d60:	4a38      	ldr	r2, [pc, #224]	; (8001e44 <change_digit_3+0x9f4>)
 8001d62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001d66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d68:	3301      	adds	r3, #1
 8001d6a:	667b      	str	r3, [r7, #100]	; 0x64
 8001d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	dde3      	ble.n	8001d3a <change_digit_3+0x8ea>
		for(int i = 0; i <= 57; ++i)
 8001d72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d74:	3301      	adds	r3, #1
 8001d76:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d7a:	2b39      	cmp	r3, #57	; 0x39
 8001d7c:	ddda      	ble.n	8001d34 <change_digit_3+0x8e4>
		k = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001d84:	2300      	movs	r3, #0
 8001d86:	663b      	str	r3, [r7, #96]	; 0x60
 8001d88:	e021      	b.n	8001dce <change_digit_3+0x97e>
			for(int j = 0; j <= 32; ++j)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d8e:	e018      	b.n	8001dc2 <change_digit_3+0x972>
				screen[38+4861+i*480+j] = seven_picture_3[k++];
 8001d90:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d94:	1c53      	adds	r3, r2, #1
 8001d96:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001d9a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	1a5b      	subs	r3, r3, r1
 8001da2:	015b      	lsls	r3, r3, #5
 8001da4:	4619      	mov	r1, r3
 8001da6:	f241 3323 	movw	r3, #4899	; 0x1323
 8001daa:	440b      	add	r3, r1
 8001dac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001dae:	440b      	add	r3, r1
 8001db0:	4928      	ldr	r1, [pc, #160]	; (8001e54 <change_digit_3+0xa04>)
 8001db2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001db6:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <change_digit_3+0x9f4>)
 8001db8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001dbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	dde3      	ble.n	8001d90 <change_digit_3+0x940>
		for(int i = 0; i <= 57; ++i)
 8001dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dca:	3301      	adds	r3, #1
 8001dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8001dce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd0:	2b39      	cmp	r3, #57	; 0x39
 8001dd2:	ddda      	ble.n	8001d8a <change_digit_3+0x93a>
		k = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001dda:	2300      	movs	r3, #0
 8001ddc:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dde:	e021      	b.n	8001e24 <change_digit_3+0x9d4>
			for(int j = 0; j <= 32; ++j)
 8001de0:	2300      	movs	r3, #0
 8001de2:	657b      	str	r3, [r7, #84]	; 0x54
 8001de4:	e018      	b.n	8001e18 <change_digit_3+0x9c8>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001de6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001dea:	1c53      	adds	r3, r2, #1
 8001dec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001df0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001df2:	460b      	mov	r3, r1
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a5b      	subs	r3, r3, r1
 8001df8:	015b      	lsls	r3, r3, #5
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001e00:	440b      	add	r3, r1
 8001e02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e04:	440b      	add	r3, r1
 8001e06:	4910      	ldr	r1, [pc, #64]	; (8001e48 <change_digit_3+0x9f8>)
 8001e08:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <change_digit_3+0x9f4>)
 8001e0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e14:	3301      	adds	r3, #1
 8001e16:	657b      	str	r3, [r7, #84]	; 0x54
 8001e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	dde3      	ble.n	8001de6 <change_digit_3+0x996>
		for(int i = 0; i <= 57; ++i)
 8001e1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e20:	3301      	adds	r3, #1
 8001e22:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e26:	2b39      	cmp	r3, #57	; 0x39
 8001e28:	ddda      	ble.n	8001de0 <change_digit_3+0x990>
	}

	if(number==80)
 8001e2a:	1d3b      	adds	r3, r7, #4
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b50      	cmp	r3, #80	; 0x50
 8001e30:	f040 808a 	bne.w	8001f48 <change_digit_3+0xaf8>
	{
		for(int i = 0; i <= 57; ++i)
 8001e34:	2300      	movs	r3, #0
 8001e36:	653b      	str	r3, [r7, #80]	; 0x50
 8001e38:	e02d      	b.n	8001e96 <change_digit_3+0xa46>
			for(int j = 0; j <= 32; ++j)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e3e:	e024      	b.n	8001e8a <change_digit_3+0xa3a>
 8001e40:	0805fca0 	.word	0x0805fca0
 8001e44:	20000020 	.word	0x20000020
 8001e48:	0806297c 	.word	0x0806297c
 8001e4c:	08068334 	.word	0x08068334
 8001e50:	08065658 	.word	0x08065658
 8001e54:	08064764 	.word	0x08064764
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001e58:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e5c:	1c53      	adds	r3, r2, #1
 8001e5e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001e62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e64:	460b      	mov	r3, r1
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	1a5b      	subs	r3, r3, r1
 8001e6a:	015b      	lsls	r3, r3, #5
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f241 3349 	movw	r3, #4937	; 0x1349
 8001e72:	440b      	add	r3, r1
 8001e74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e76:	440b      	add	r3, r1
 8001e78:	49b1      	ldr	r1, [pc, #708]	; (8002140 <change_digit_3+0xcf0>)
 8001e7a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e7e:	4ab1      	ldr	r2, [pc, #708]	; (8002144 <change_digit_3+0xcf4>)
 8001e80:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e86:	3301      	adds	r3, #1
 8001e88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e8c:	2b20      	cmp	r3, #32
 8001e8e:	dde3      	ble.n	8001e58 <change_digit_3+0xa08>
		for(int i = 0; i <= 57; ++i)
 8001e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e92:	3301      	adds	r3, #1
 8001e94:	653b      	str	r3, [r7, #80]	; 0x50
 8001e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e98:	2b39      	cmp	r3, #57	; 0x39
 8001e9a:	ddce      	ble.n	8001e3a <change_digit_3+0x9ea>
		k = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ea6:	e021      	b.n	8001eec <change_digit_3+0xa9c>
			for(int j = 0; j <= 32; ++j)
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8001eac:	e018      	b.n	8001ee0 <change_digit_3+0xa90>
				screen[38+4861+i*480+j] = eigth_picture_3[k++];
 8001eae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001eb2:	1c53      	adds	r3, r2, #1
 8001eb4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001eb8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001eba:	460b      	mov	r3, r1
 8001ebc:	011b      	lsls	r3, r3, #4
 8001ebe:	1a5b      	subs	r3, r3, r1
 8001ec0:	015b      	lsls	r3, r3, #5
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f241 3323 	movw	r3, #4899	; 0x1323
 8001ec8:	440b      	add	r3, r1
 8001eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ecc:	440b      	add	r3, r1
 8001ece:	499e      	ldr	r1, [pc, #632]	; (8002148 <change_digit_3+0xcf8>)
 8001ed0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ed4:	4a9b      	ldr	r2, [pc, #620]	; (8002144 <change_digit_3+0xcf4>)
 8001ed6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001eda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001edc:	3301      	adds	r3, #1
 8001ede:	647b      	str	r3, [r7, #68]	; 0x44
 8001ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	dde3      	ble.n	8001eae <change_digit_3+0xa5e>
		for(int i = 0; i <= 57; ++i)
 8001ee6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee8:	3301      	adds	r3, #1
 8001eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eee:	2b39      	cmp	r3, #57	; 0x39
 8001ef0:	ddda      	ble.n	8001ea8 <change_digit_3+0xa58>
		k = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	643b      	str	r3, [r7, #64]	; 0x40
 8001efc:	e021      	b.n	8001f42 <change_digit_3+0xaf2>
			for(int j = 0; j <= 32; ++j)
 8001efe:	2300      	movs	r3, #0
 8001f00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f02:	e018      	b.n	8001f36 <change_digit_3+0xae6>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001f04:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f08:	1c53      	adds	r3, r2, #1
 8001f0a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f10:	460b      	mov	r3, r1
 8001f12:	011b      	lsls	r3, r3, #4
 8001f14:	1a5b      	subs	r3, r3, r1
 8001f16:	015b      	lsls	r3, r3, #5
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001f1e:	440b      	add	r3, r1
 8001f20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f22:	440b      	add	r3, r1
 8001f24:	4989      	ldr	r1, [pc, #548]	; (800214c <change_digit_3+0xcfc>)
 8001f26:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f2a:	4a86      	ldr	r2, [pc, #536]	; (8002144 <change_digit_3+0xcf4>)
 8001f2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f32:	3301      	adds	r3, #1
 8001f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	dde3      	ble.n	8001f04 <change_digit_3+0xab4>
		for(int i = 0; i <= 57; ++i)
 8001f3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f3e:	3301      	adds	r3, #1
 8001f40:	643b      	str	r3, [r7, #64]	; 0x40
 8001f42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f44:	2b39      	cmp	r3, #57	; 0x39
 8001f46:	ddda      	ble.n	8001efe <change_digit_3+0xaae>
	}

	if(number==90)
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b5a      	cmp	r3, #90	; 0x5a
 8001f4e:	d17d      	bne.n	800204c <change_digit_3+0xbfc>
	{
		for(int i = 0; i <= 57; ++i)
 8001f50:	2300      	movs	r3, #0
 8001f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f54:	e021      	b.n	8001f9a <change_digit_3+0xb4a>
			for(int j = 0; j <= 32; ++j)
 8001f56:	2300      	movs	r3, #0
 8001f58:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5a:	e018      	b.n	8001f8e <change_digit_3+0xb3e>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001f5c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f60:	1c53      	adds	r3, r2, #1
 8001f62:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f68:	460b      	mov	r3, r1
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	1a5b      	subs	r3, r3, r1
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	4619      	mov	r1, r3
 8001f72:	f241 3349 	movw	r3, #4937	; 0x1349
 8001f76:	440b      	add	r3, r1
 8001f78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f7a:	440b      	add	r3, r1
 8001f7c:	4970      	ldr	r1, [pc, #448]	; (8002140 <change_digit_3+0xcf0>)
 8001f7e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f82:	4a70      	ldr	r2, [pc, #448]	; (8002144 <change_digit_3+0xcf4>)
 8001f84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8a:	3301      	adds	r3, #1
 8001f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	dde3      	ble.n	8001f5c <change_digit_3+0xb0c>
		for(int i = 0; i <= 57; ++i)
 8001f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f96:	3301      	adds	r3, #1
 8001f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9c:	2b39      	cmp	r3, #57	; 0x39
 8001f9e:	ddda      	ble.n	8001f56 <change_digit_3+0xb06>
		k = 0;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
 8001faa:	e021      	b.n	8001ff0 <change_digit_3+0xba0>
			for(int j = 0; j <= 32; ++j)
 8001fac:	2300      	movs	r3, #0
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fb0:	e018      	b.n	8001fe4 <change_digit_3+0xb94>
				screen[38+4861+i*480+j] = nine_picture_3[k++];
 8001fb2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fb6:	1c53      	adds	r3, r2, #1
 8001fb8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001fbc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	1a5b      	subs	r3, r3, r1
 8001fc4:	015b      	lsls	r3, r3, #5
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f241 3323 	movw	r3, #4899	; 0x1323
 8001fcc:	440b      	add	r3, r1
 8001fce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fd0:	440b      	add	r3, r1
 8001fd2:	495f      	ldr	r1, [pc, #380]	; (8002150 <change_digit_3+0xd00>)
 8001fd4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001fd8:	4a5a      	ldr	r2, [pc, #360]	; (8002144 <change_digit_3+0xcf4>)
 8001fda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	dde3      	ble.n	8001fb2 <change_digit_3+0xb62>
		for(int i = 0; i <= 57; ++i)
 8001fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fec:	3301      	adds	r3, #1
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
 8001ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff2:	2b39      	cmp	r3, #57	; 0x39
 8001ff4:	ddda      	ble.n	8001fac <change_digit_3+0xb5c>
		k = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002000:	e021      	b.n	8002046 <change_digit_3+0xbf6>
			for(int j = 0; j <= 32; ++j)
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	e018      	b.n	800203a <change_digit_3+0xbea>
				screen[4861+i*480+j] = none_picture_3[k++];
 8002008:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800200c:	1c53      	adds	r3, r2, #1
 800200e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002012:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002014:	460b      	mov	r3, r1
 8002016:	011b      	lsls	r3, r3, #4
 8002018:	1a5b      	subs	r3, r3, r1
 800201a:	015b      	lsls	r3, r3, #5
 800201c:	4619      	mov	r1, r3
 800201e:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8002022:	440b      	add	r3, r1
 8002024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002026:	440b      	add	r3, r1
 8002028:	4948      	ldr	r1, [pc, #288]	; (800214c <change_digit_3+0xcfc>)
 800202a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800202e:	4a45      	ldr	r2, [pc, #276]	; (8002144 <change_digit_3+0xcf4>)
 8002030:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002036:	3301      	adds	r3, #1
 8002038:	627b      	str	r3, [r7, #36]	; 0x24
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	2b20      	cmp	r3, #32
 800203e:	dde3      	ble.n	8002008 <change_digit_3+0xbb8>
		for(int i = 0; i <= 57; ++i)
 8002040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002042:	3301      	adds	r3, #1
 8002044:	62bb      	str	r3, [r7, #40]	; 0x28
 8002046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002048:	2b39      	cmp	r3, #57	; 0x39
 800204a:	ddda      	ble.n	8002002 <change_digit_3+0xbb2>
	}

	if(number==100)
 800204c:	1d3b      	adds	r3, r7, #4
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2b64      	cmp	r3, #100	; 0x64
 8002052:	f040 80b1 	bne.w	80021b8 <change_digit_3+0xd68>
	{
		for(int i = 0; i <= 57; ++i)
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
 800205a:	e021      	b.n	80020a0 <change_digit_3+0xc50>
			for(int j = 0; j <= 32; ++j)
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
 8002060:	e018      	b.n	8002094 <change_digit_3+0xc44>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8002062:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002066:	1c53      	adds	r3, r2, #1
 8002068:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800206c:	6a39      	ldr	r1, [r7, #32]
 800206e:	460b      	mov	r3, r1
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	1a5b      	subs	r3, r3, r1
 8002074:	015b      	lsls	r3, r3, #5
 8002076:	4619      	mov	r1, r3
 8002078:	f241 3349 	movw	r3, #4937	; 0x1349
 800207c:	440b      	add	r3, r1
 800207e:	69f9      	ldr	r1, [r7, #28]
 8002080:	440b      	add	r3, r1
 8002082:	492f      	ldr	r1, [pc, #188]	; (8002140 <change_digit_3+0xcf0>)
 8002084:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002088:	4a2e      	ldr	r2, [pc, #184]	; (8002144 <change_digit_3+0xcf4>)
 800208a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3301      	adds	r3, #1
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	2b20      	cmp	r3, #32
 8002098:	dde3      	ble.n	8002062 <change_digit_3+0xc12>
		for(int i = 0; i <= 57; ++i)
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	3301      	adds	r3, #1
 800209e:	623b      	str	r3, [r7, #32]
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	2b39      	cmp	r3, #57	; 0x39
 80020a4:	ddda      	ble.n	800205c <change_digit_3+0xc0c>
		k = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80020ac:	f107 0318 	add.w	r3, r7, #24
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e031      	b.n	800211a <change_digit_3+0xcca>
			for(int j = 0; j <= 32; ++j)
 80020b6:	f107 0314 	add.w	r3, r7, #20
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	e020      	b.n	8002102 <change_digit_3+0xcb2>
				screen[38+4861+i*480+j] = zero_picture_3[k++];
 80020c0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020c4:	1c53      	adds	r3, r2, #1
 80020c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80020ca:	f107 0318 	add.w	r3, r7, #24
 80020ce:	6819      	ldr	r1, [r3, #0]
 80020d0:	460b      	mov	r3, r1
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a5b      	subs	r3, r3, r1
 80020d6:	015b      	lsls	r3, r3, #5
 80020d8:	4619      	mov	r1, r3
 80020da:	f241 3323 	movw	r3, #4899	; 0x1323
 80020de:	440b      	add	r3, r1
 80020e0:	f107 0114 	add.w	r1, r7, #20
 80020e4:	6809      	ldr	r1, [r1, #0]
 80020e6:	440b      	add	r3, r1
 80020e8:	4915      	ldr	r1, [pc, #84]	; (8002140 <change_digit_3+0xcf0>)
 80020ea:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80020ee:	4a15      	ldr	r2, [pc, #84]	; (8002144 <change_digit_3+0xcf4>)
 80020f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	f107 0214 	add.w	r2, r7, #20
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	3201      	adds	r2, #1
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b20      	cmp	r3, #32
 800210a:	ddd9      	ble.n	80020c0 <change_digit_3+0xc70>
		for(int i = 0; i <= 57; ++i)
 800210c:	f107 0318 	add.w	r3, r7, #24
 8002110:	f107 0218 	add.w	r2, r7, #24
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	3201      	adds	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	f107 0318 	add.w	r3, r7, #24
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2b39      	cmp	r3, #57	; 0x39
 8002122:	ddc8      	ble.n	80020b6 <change_digit_3+0xc66>
		k = 0;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800212a:	f107 0310 	add.w	r3, r7, #16
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	e03c      	b.n	80021ae <change_digit_3+0xd5e>
			for(int j = 0; j <= 32; ++j)
 8002134:	f107 030c 	add.w	r3, r7, #12
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e02b      	b.n	8002196 <change_digit_3+0xd46>
 800213e:	bf00      	nop
 8002140:	08068334 	.word	0x08068334
 8002144:	20000020 	.word	0x20000020
 8002148:	08069228 	.word	0x08069228
 800214c:	0806297c 	.word	0x0806297c
 8002150:	08061a88 	.word	0x08061a88
				screen[4861+i*480+j] = one_picture_3[k++];
 8002154:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002158:	1c53      	adds	r3, r2, #1
 800215a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800215e:	f107 0310 	add.w	r3, r7, #16
 8002162:	6819      	ldr	r1, [r3, #0]
 8002164:	460b      	mov	r3, r1
 8002166:	011b      	lsls	r3, r3, #4
 8002168:	1a5b      	subs	r3, r3, r1
 800216a:	015b      	lsls	r3, r3, #5
 800216c:	4619      	mov	r1, r3
 800216e:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8002172:	440b      	add	r3, r1
 8002174:	f107 010c 	add.w	r1, r7, #12
 8002178:	6809      	ldr	r1, [r1, #0]
 800217a:	440b      	add	r3, r1
 800217c:	4916      	ldr	r1, [pc, #88]	; (80021d8 <change_digit_3+0xd88>)
 800217e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002182:	4a16      	ldr	r2, [pc, #88]	; (80021dc <change_digit_3+0xd8c>)
 8002184:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002188:	f107 030c 	add.w	r3, r7, #12
 800218c:	f107 020c 	add.w	r2, r7, #12
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	3201      	adds	r2, #1
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2b20      	cmp	r3, #32
 800219e:	ddd9      	ble.n	8002154 <change_digit_3+0xd04>
		for(int i = 0; i <= 57; ++i)
 80021a0:	f107 0310 	add.w	r3, r7, #16
 80021a4:	f107 0210 	add.w	r2, r7, #16
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	3201      	adds	r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b39      	cmp	r3, #57	; 0x39
 80021b6:	ddbd      	ble.n	8002134 <change_digit_3+0xce4>
	}

	LTDC_Layer2->CFBAR = (uint32_t)screen;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <change_digit_3+0xd90>)
 80021ba:	4a08      	ldr	r2, [pc, #32]	; (80021dc <change_digit_3+0xd8c>)
 80021bc:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 80021be:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <change_digit_3+0xd94>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4a08      	ldr	r2, [pc, #32]	; (80021e4 <change_digit_3+0xd94>)
 80021c4:	f043 0302 	orr.w	r3, r3, #2
 80021c8:	6253      	str	r3, [r2, #36]	; 0x24
}
 80021ca:	bf00      	nop
 80021cc:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr
 80021d8:	08063870 	.word	0x08063870
 80021dc:	20000020 	.word	0x20000020
 80021e0:	40016904 	.word	0x40016904
 80021e4:	40016800 	.word	0x40016800

080021e8 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
	++cnt;
 80021ec:	4b47      	ldr	r3, [pc, #284]	; (800230c <SysTick_Handler+0x124>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a46      	ldr	r2, [pc, #280]	; (800230c <SysTick_Handler+0x124>)
 80021f4:	6013      	str	r3, [r2, #0]
	if(cnt == 587500)
 80021f6:	4b45      	ldr	r3, [pc, #276]	; (800230c <SysTick_Handler+0x124>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a45      	ldr	r2, [pc, #276]	; (8002310 <SysTick_Handler+0x128>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	f040 8082 	bne.w	8002306 <SysTick_Handler+0x11e>
	{
		if(minute == 0)
 8002202:	4b44      	ldr	r3, [pc, #272]	; (8002314 <SysTick_Handler+0x12c>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d164      	bne.n	80022d4 <SysTick_Handler+0xec>
		{
			if(minute_2 == 0)
 800220a:	4b43      	ldr	r3, [pc, #268]	; (8002318 <SysTick_Handler+0x130>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d148      	bne.n	80022a4 <SysTick_Handler+0xbc>
			{
				if(hour == 0)
 8002212:	4b42      	ldr	r3, [pc, #264]	; (800231c <SysTick_Handler+0x134>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d125      	bne.n	8002266 <SysTick_Handler+0x7e>
				{
					cnt = 819;
 800221a:	4b3c      	ldr	r3, [pc, #240]	; (800230c <SysTick_Handler+0x124>)
 800221c:	f240 3233 	movw	r2, #819	; 0x333
 8002220:	601a      	str	r2, [r3, #0]
					hour = 9;
 8002222:	4b3e      	ldr	r3, [pc, #248]	; (800231c <SysTick_Handler+0x134>)
 8002224:	2209      	movs	r2, #9
 8002226:	701a      	strb	r2, [r3, #0]
					minute_2 = 5;
 8002228:	4b3b      	ldr	r3, [pc, #236]	; (8002318 <SysTick_Handler+0x130>)
 800222a:	2205      	movs	r2, #5
 800222c:	701a      	strb	r2, [r3, #0]
					minute = 9;
 800222e:	4b39      	ldr	r3, [pc, #228]	; (8002314 <SysTick_Handler+0x12c>)
 8002230:	2209      	movs	r2, #9
 8002232:	701a      	strb	r2, [r3, #0]
					--hour_2;
 8002234:	4b3a      	ldr	r3, [pc, #232]	; (8002320 <SysTick_Handler+0x138>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	3b01      	subs	r3, #1
 800223a:	b2da      	uxtb	r2, r3
 800223c:	4b38      	ldr	r3, [pc, #224]	; (8002320 <SysTick_Handler+0x138>)
 800223e:	701a      	strb	r2, [r3, #0]
					change_digit_2(1,hour_2);
 8002240:	4b37      	ldr	r3, [pc, #220]	; (8002320 <SysTick_Handler+0x138>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	2001      	movs	r0, #1
 8002248:	f7fe ff12 	bl	8001070 <change_digit_2>
					change_digit_2(2,9);
 800224c:	2109      	movs	r1, #9
 800224e:	2002      	movs	r0, #2
 8002250:	f7fe ff0e 	bl	8001070 <change_digit_2>
					change_digit_2(3,5);
 8002254:	2105      	movs	r1, #5
 8002256:	2003      	movs	r0, #3
 8002258:	f7fe ff0a 	bl	8001070 <change_digit_2>
					change_digit_2(4,9);
 800225c:	2109      	movs	r1, #9
 800225e:	2004      	movs	r0, #4
 8002260:	f7fe ff06 	bl	8001070 <change_digit_2>
 8002264:	e045      	b.n	80022f2 <SysTick_Handler+0x10a>
				}
				else
				{
					cnt = 683;
 8002266:	4b29      	ldr	r3, [pc, #164]	; (800230c <SysTick_Handler+0x124>)
 8002268:	f240 22ab 	movw	r2, #683	; 0x2ab
 800226c:	601a      	str	r2, [r3, #0]
					minute_2 = 5;
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <SysTick_Handler+0x130>)
 8002270:	2205      	movs	r2, #5
 8002272:	701a      	strb	r2, [r3, #0]
					minute = 9;
 8002274:	4b27      	ldr	r3, [pc, #156]	; (8002314 <SysTick_Handler+0x12c>)
 8002276:	2209      	movs	r2, #9
 8002278:	701a      	strb	r2, [r3, #0]
					--hour;
 800227a:	4b28      	ldr	r3, [pc, #160]	; (800231c <SysTick_Handler+0x134>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	3b01      	subs	r3, #1
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b26      	ldr	r3, [pc, #152]	; (800231c <SysTick_Handler+0x134>)
 8002284:	701a      	strb	r2, [r3, #0]
					change_digit_2(2,hour);
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <SysTick_Handler+0x134>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	4619      	mov	r1, r3
 800228c:	2002      	movs	r0, #2
 800228e:	f7fe feef 	bl	8001070 <change_digit_2>
					change_digit_2(3,5);
 8002292:	2105      	movs	r1, #5
 8002294:	2003      	movs	r0, #3
 8002296:	f7fe feeb 	bl	8001070 <change_digit_2>
					change_digit_2(4,9);
 800229a:	2109      	movs	r1, #9
 800229c:	2004      	movs	r0, #4
 800229e:	f7fe fee7 	bl	8001070 <change_digit_2>
 80022a2:	e026      	b.n	80022f2 <SysTick_Handler+0x10a>
				}
			}
			else
			{
				cnt = 414;
 80022a4:	4b19      	ldr	r3, [pc, #100]	; (800230c <SysTick_Handler+0x124>)
 80022a6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80022aa:	601a      	str	r2, [r3, #0]
				minute = 9;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <SysTick_Handler+0x12c>)
 80022ae:	2209      	movs	r2, #9
 80022b0:	701a      	strb	r2, [r3, #0]
				--minute_2;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <SysTick_Handler+0x130>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4b17      	ldr	r3, [pc, #92]	; (8002318 <SysTick_Handler+0x130>)
 80022bc:	701a      	strb	r2, [r3, #0]
				change_digit_2(3,minute_2);
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <SysTick_Handler+0x130>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	4619      	mov	r1, r3
 80022c4:	2003      	movs	r0, #3
 80022c6:	f7fe fed3 	bl	8001070 <change_digit_2>
				change_digit_2(4,9);
 80022ca:	2109      	movs	r1, #9
 80022cc:	2004      	movs	r0, #4
 80022ce:	f7fe fecf 	bl	8001070 <change_digit_2>
 80022d2:	e00e      	b.n	80022f2 <SysTick_Handler+0x10a>
			}
		}
		else
		{
			cnt = 136;
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <SysTick_Handler+0x124>)
 80022d6:	2288      	movs	r2, #136	; 0x88
 80022d8:	601a      	str	r2, [r3, #0]
			--minute;
 80022da:	4b0e      	ldr	r3, [pc, #56]	; (8002314 <SysTick_Handler+0x12c>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	3b01      	subs	r3, #1
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4b0c      	ldr	r3, [pc, #48]	; (8002314 <SysTick_Handler+0x12c>)
 80022e4:	701a      	strb	r2, [r3, #0]
			change_digit_2(4,minute);
 80022e6:	4b0b      	ldr	r3, [pc, #44]	; (8002314 <SysTick_Handler+0x12c>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	4619      	mov	r1, r3
 80022ec:	2004      	movs	r0, #4
 80022ee:	f7fe febf 	bl	8001070 <change_digit_2>
		}
		change_digit_3(minute*10);
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <SysTick_Handler+0x12c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	461a      	mov	r2, r3
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff f8a5 	bl	8001450 <change_digit_3>
	}
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	2003fc20 	.word	0x2003fc20
 8002310:	0008f6ec 	.word	0x0008f6ec
 8002314:	2003fc24 	.word	0x2003fc24
 8002318:	2003fc25 	.word	0x2003fc25
 800231c:	2003fc26 	.word	0x2003fc26
 8002320:	20000000 	.word	0x20000000

08002324 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	change_digit_2(1,1);
 8002328:	2101      	movs	r1, #1
 800232a:	2001      	movs	r0, #1
 800232c:	f7fe fea0 	bl	8001070 <change_digit_2>
	EXTI->PR |= EXTI_PR_PR0;
 8002330:	4b03      	ldr	r3, [pc, #12]	; (8002340 <EXTI0_IRQHandler+0x1c>)
 8002332:	695b      	ldr	r3, [r3, #20]
 8002334:	4a02      	ldr	r2, [pc, #8]	; (8002340 <EXTI0_IRQHandler+0x1c>)
 8002336:	f043 0301 	orr.w	r3, r3, #1
 800233a:	6153      	str	r3, [r2, #20]
}
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40013c00 	.word	0x40013c00

08002344 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
	change_digit_2(2,2);
 8002348:	2102      	movs	r1, #2
 800234a:	2002      	movs	r0, #2
 800234c:	f7fe fe90 	bl	8001070 <change_digit_2>
	EXTI->PR |= EXTI_PR_PR1;
 8002350:	4b03      	ldr	r3, [pc, #12]	; (8002360 <EXTI1_IRQHandler+0x1c>)
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	4a02      	ldr	r2, [pc, #8]	; (8002360 <EXTI1_IRQHandler+0x1c>)
 8002356:	f043 0302 	orr.w	r3, r3, #2
 800235a:	6153      	str	r3, [r2, #20]
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40013c00 	.word	0x40013c00

08002364 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	change_digit_2(3,3);
 8002368:	2103      	movs	r1, #3
 800236a:	2003      	movs	r0, #3
 800236c:	f7fe fe80 	bl	8001070 <change_digit_2>
	EXTI->PR |= EXTI_PR_PR2;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <EXTI2_IRQHandler+0x1c>)
 8002372:	695b      	ldr	r3, [r3, #20]
 8002374:	4a02      	ldr	r2, [pc, #8]	; (8002380 <EXTI2_IRQHandler+0x1c>)
 8002376:	f043 0304 	orr.w	r3, r3, #4
 800237a:	6153      	str	r3, [r2, #20]
}
 800237c:	bf00      	nop
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40013c00 	.word	0x40013c00

08002384 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	change_digit_2(4,4);
 8002388:	2104      	movs	r1, #4
 800238a:	2004      	movs	r0, #4
 800238c:	f7fe fe70 	bl	8001070 <change_digit_2>
	EXTI->PR |= EXTI_PR_PR3;
 8002390:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <EXTI3_IRQHandler+0x1c>)
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	4a02      	ldr	r2, [pc, #8]	; (80023a0 <EXTI3_IRQHandler+0x1c>)
 8002396:	f043 0308 	orr.w	r3, r3, #8
 800239a:	6153      	str	r3, [r2, #20]
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	40013c00 	.word	0x40013c00

080023a4 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
	change_digit_2(1,5);
 80023a8:	2105      	movs	r1, #5
 80023aa:	2001      	movs	r0, #1
 80023ac:	f7fe fe60 	bl	8001070 <change_digit_2>
	EXTI->PR |= EXTI_PR_PR4;
 80023b0:	4b03      	ldr	r3, [pc, #12]	; (80023c0 <EXTI4_IRQHandler+0x1c>)
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	4a02      	ldr	r2, [pc, #8]	; (80023c0 <EXTI4_IRQHandler+0x1c>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	6153      	str	r3, [r2, #20]
}
 80023bc:	bf00      	nop
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40013c00 	.word	0x40013c00

080023c4 <main>:

int main(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
	initialization();
 80023ca:	f7fd ff3b 	bl	8000244 <initialization>

	// Initialization picture
	LTDC_Layer2->CFBAR = (uint32_t)init_picture;
 80023ce:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <main+0xb4>)
 80023d0:	4a2a      	ldr	r2, [pc, #168]	; (800247c <main+0xb8>)
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 80023d4:	4b2a      	ldr	r3, [pc, #168]	; (8002480 <main+0xbc>)
 80023d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d8:	4a29      	ldr	r2, [pc, #164]	; (8002480 <main+0xbc>)
 80023da:	f043 0302 	orr.w	r3, r3, #2
 80023de:	6253      	str	r3, [r2, #36]	; 0x24
	for(int i = 0; i <= 5000000; ++i);
 80023e0:	2300      	movs	r3, #0
 80023e2:	607b      	str	r3, [r7, #4]
 80023e4:	e002      	b.n	80023ec <main+0x28>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3301      	adds	r3, #1
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a25      	ldr	r2, [pc, #148]	; (8002484 <main+0xc0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	ddf8      	ble.n	80023e6 <main+0x22>

	// Main picture
	LTDC_Layer2->CFBAR = (uint32_t)main_picture;
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <main+0xb4>)
 80023f6:	4a24      	ldr	r2, [pc, #144]	; (8002488 <main+0xc4>)
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <main+0xbc>)
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	4a20      	ldr	r2, [pc, #128]	; (8002480 <main+0xbc>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6253      	str	r3, [r2, #36]	; 0x24

	// Time
	change_digit_1(1,hour_2);
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <main+0xc8>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	4619      	mov	r1, r3
 800240c:	2001      	movs	r0, #1
 800240e:	f7fe fc43 	bl	8000c98 <change_digit_1>
	change_digit_1(2,hour);
 8002412:	4b1f      	ldr	r3, [pc, #124]	; (8002490 <main+0xcc>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	4619      	mov	r1, r3
 8002418:	2002      	movs	r0, #2
 800241a:	f7fe fc3d 	bl	8000c98 <change_digit_1>
	change_digit_1(3,minute_2);
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <main+0xd0>)
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	2003      	movs	r0, #3
 8002426:	f7fe fc37 	bl	8000c98 <change_digit_1>
	change_digit_1(4,minute);
 800242a:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <main+0xd4>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	4619      	mov	r1, r3
 8002430:	2004      	movs	r0, #4
 8002432:	f7fe fc31 	bl	8000c98 <change_digit_1>

	// Time 2
	change_digit_2(1,hour_2);
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <main+0xc8>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	2001      	movs	r0, #1
 800243e:	f7fe fe17 	bl	8001070 <change_digit_2>
	change_digit_2(2,hour);
 8002442:	4b13      	ldr	r3, [pc, #76]	; (8002490 <main+0xcc>)
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	4619      	mov	r1, r3
 8002448:	2002      	movs	r0, #2
 800244a:	f7fe fe11 	bl	8001070 <change_digit_2>
	change_digit_2(3,minute_2);
 800244e:	4b11      	ldr	r3, [pc, #68]	; (8002494 <main+0xd0>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	2003      	movs	r0, #3
 8002456:	f7fe fe0b 	bl	8001070 <change_digit_2>
	change_digit_2(4,minute);
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <main+0xd4>)
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	4619      	mov	r1, r3
 8002460:	2004      	movs	r0, #4
 8002462:	f7fe fe05 	bl	8001070 <change_digit_2>

	// Power
	change_digit_3(100);
 8002466:	2064      	movs	r0, #100	; 0x64
 8002468:	f7fe fff2 	bl	8001450 <change_digit_3>
 800246c:	2300      	movs	r3, #0

//	SysTick_Config(180);
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40016904 	.word	0x40016904
 800247c:	0806a11c 	.word	0x0806a11c
 8002480:	40016800 	.word	0x40016800
 8002484:	004c4b40 	.word	0x004c4b40
 8002488:	080a9d1c 	.word	0x080a9d1c
 800248c:	20000000 	.word	0x20000000
 8002490:	2003fc26 	.word	0x2003fc26
 8002494:	2003fc25 	.word	0x2003fc25
 8002498:	2003fc24 	.word	0x2003fc24

0800249c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800249c:	480d      	ldr	r0, [pc, #52]	; (80024d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800249e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80024a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024a4:	480c      	ldr	r0, [pc, #48]	; (80024d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80024a6:	490d      	ldr	r1, [pc, #52]	; (80024dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80024a8:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <LoopForever+0xe>)
  movs r3, #0
 80024aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ac:	e002      	b.n	80024b4 <LoopCopyDataInit>

080024ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024b2:	3304      	adds	r3, #4

080024b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024b8:	d3f9      	bcc.n	80024ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ba:	4a0a      	ldr	r2, [pc, #40]	; (80024e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024bc:	4c0a      	ldr	r4, [pc, #40]	; (80024e8 <LoopForever+0x16>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024c0:	e001      	b.n	80024c6 <LoopFillZerobss>

080024c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024c4:	3204      	adds	r2, #4

080024c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024c8:	d3fb      	bcc.n	80024c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024ca:	f000 f811 	bl	80024f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024ce:	f7ff ff79 	bl	80023c4 <main>

080024d2 <LoopForever>:

LoopForever:
    b LoopForever
 80024d2:	e7fe      	b.n	80024d2 <LoopForever>
  ldr   r0, =_estack
 80024d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80024d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024dc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80024e0:	080e9924 	.word	0x080e9924
  ldr r2, =_sbss
 80024e4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80024e8:	2003fc28 	.word	0x2003fc28

080024ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024ec:	e7fe      	b.n	80024ec <ADC_IRQHandler>
	...

080024f0 <__libc_init_array>:
 80024f0:	b570      	push	{r4, r5, r6, lr}
 80024f2:	4d0d      	ldr	r5, [pc, #52]	; (8002528 <__libc_init_array+0x38>)
 80024f4:	4c0d      	ldr	r4, [pc, #52]	; (800252c <__libc_init_array+0x3c>)
 80024f6:	1b64      	subs	r4, r4, r5
 80024f8:	10a4      	asrs	r4, r4, #2
 80024fa:	2600      	movs	r6, #0
 80024fc:	42a6      	cmp	r6, r4
 80024fe:	d109      	bne.n	8002514 <__libc_init_array+0x24>
 8002500:	4d0b      	ldr	r5, [pc, #44]	; (8002530 <__libc_init_array+0x40>)
 8002502:	4c0c      	ldr	r4, [pc, #48]	; (8002534 <__libc_init_array+0x44>)
 8002504:	f000 f818 	bl	8002538 <_init>
 8002508:	1b64      	subs	r4, r4, r5
 800250a:	10a4      	asrs	r4, r4, #2
 800250c:	2600      	movs	r6, #0
 800250e:	42a6      	cmp	r6, r4
 8002510:	d105      	bne.n	800251e <__libc_init_array+0x2e>
 8002512:	bd70      	pop	{r4, r5, r6, pc}
 8002514:	f855 3b04 	ldr.w	r3, [r5], #4
 8002518:	4798      	blx	r3
 800251a:	3601      	adds	r6, #1
 800251c:	e7ee      	b.n	80024fc <__libc_init_array+0xc>
 800251e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002522:	4798      	blx	r3
 8002524:	3601      	adds	r6, #1
 8002526:	e7f2      	b.n	800250e <__libc_init_array+0x1e>
 8002528:	080e991c 	.word	0x080e991c
 800252c:	080e991c 	.word	0x080e991c
 8002530:	080e991c 	.word	0x080e991c
 8002534:	080e9920 	.word	0x080e9920

08002538 <_init>:
 8002538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253a:	bf00      	nop
 800253c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253e:	bc08      	pop	{r3}
 8002540:	469e      	mov	lr, r3
 8002542:	4770      	bx	lr

08002544 <_fini>:
 8002544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002546:	bf00      	nop
 8002548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800254a:	bc08      	pop	{r3}
 800254c:	469e      	mov	lr, r3
 800254e:	4770      	bx	lr
