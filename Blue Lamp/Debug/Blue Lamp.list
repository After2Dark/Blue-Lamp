
Blue Lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021fc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e73cc  080023c4  080023c4  000123c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e9790  080e9790  000f9798  2**0
                  CONTENTS
  4 .ARM          00000000  080e9790  080e9790  000f9798  2**0
                  CONTENTS
  5 .preinit_array 00000000  080e9790  080e9798  000f9798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e9790  080e9790  000f9790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e9794  080e9794  000f9794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000f9798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fc24  20000000  080e9798  00100000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2003fc24  080e9798  000ffc24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000f9798  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001df4  00000000  00000000  000f97c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000025c  00000000  00000000  000fb5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000080  00000000  00000000  000fb818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000068  00000000  00000000  000fb898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7a6  00000000  00000000  000fb900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001daa  00000000  00000000  001170a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b456  00000000  00000000  00118e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b42a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000168  00000000  00000000  001b42fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080023ac 	.word	0x080023ac

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080023ac 	.word	0x080023ac

08000208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	6039      	str	r1, [r7, #0]
 8000212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000218:	2b00      	cmp	r3, #0
 800021a:	db0a      	blt.n	8000232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	b2da      	uxtb	r2, r3
 8000220:	490c      	ldr	r1, [pc, #48]	; (8000254 <__NVIC_SetPriority+0x4c>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	0112      	lsls	r2, r2, #4
 8000228:	b2d2      	uxtb	r2, r2
 800022a:	440b      	add	r3, r1
 800022c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000230:	e00a      	b.n	8000248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4908      	ldr	r1, [pc, #32]	; (8000258 <__NVIC_SetPriority+0x50>)
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	f003 030f 	and.w	r3, r3, #15
 800023e:	3b04      	subs	r3, #4
 8000240:	0112      	lsls	r2, r2, #4
 8000242:	b2d2      	uxtb	r2, r2
 8000244:	440b      	add	r3, r1
 8000246:	761a      	strb	r2, [r3, #24]
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3b01      	subs	r3, #1
 8000268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800026c:	d301      	bcc.n	8000272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800026e:	2301      	movs	r3, #1
 8000270:	e00f      	b.n	8000292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <SysTick_Config+0x40>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3b01      	subs	r3, #1
 8000278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800027a:	210f      	movs	r1, #15
 800027c:	f04f 30ff 	mov.w	r0, #4294967295
 8000280:	f7ff ffc2 	bl	8000208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <SysTick_Config+0x40>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <SysTick_Config+0x40>)
 800028c:	2207      	movs	r2, #7
 800028e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010

080002a0 <initialization>:
uint8_t minute_2 = 0;
uint8_t hour = 0;
uint8_t hour_2 = 0;

void initialization()
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002a6:	4b9f      	ldr	r3, [pc, #636]	; (8000524 <initialization+0x284>)
 80002a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002aa:	4a9e      	ldr	r2, [pc, #632]	; (8000524 <initialization+0x284>)
 80002ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002b0:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;
 80002b2:	4b9c      	ldr	r3, [pc, #624]	; (8000524 <initialization+0x284>)
 80002b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b6:	4a9b      	ldr	r2, [pc, #620]	; (8000524 <initialization+0x284>)
 80002b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002bc:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002be:	4b99      	ldr	r3, [pc, #612]	; (8000524 <initialization+0x284>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c2:	4a98      	ldr	r2, [pc, #608]	; (8000524 <initialization+0x284>)
 80002c4:	f043 0304 	orr.w	r3, r3, #4
 80002c8:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80002ca:	4b96      	ldr	r3, [pc, #600]	; (8000524 <initialization+0x284>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	4a95      	ldr	r2, [pc, #596]	; (8000524 <initialization+0x284>)
 80002d0:	f043 0310 	orr.w	r3, r3, #16
 80002d4:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN;
 80002d6:	4b93      	ldr	r3, [pc, #588]	; (8000524 <initialization+0x284>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002da:	4a92      	ldr	r2, [pc, #584]	; (8000524 <initialization+0x284>)
 80002dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002e0:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOKEN;
 80002e2:	4b90      	ldr	r3, [pc, #576]	; (8000524 <initialization+0x284>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	4a8f      	ldr	r2, [pc, #572]	; (8000524 <initialization+0x284>)
 80002e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ec:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 80002ee:	4b8d      	ldr	r3, [pc, #564]	; (8000524 <initialization+0x284>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f2:	4a8c      	ldr	r2, [pc, #560]	; (8000524 <initialization+0x284>)
 80002f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f8:	6313      	str	r3, [r2, #48]	; 0x30

	RCC->CR |= RCC_CR_HSEON;
 80002fa:	4b8a      	ldr	r3, [pc, #552]	; (8000524 <initialization+0x284>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a89      	ldr	r2, [pc, #548]	; (8000524 <initialization+0x284>)
 8000300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000304:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000306:	bf00      	nop
 8000308:	4b86      	ldr	r3, [pc, #536]	; (8000524 <initialization+0x284>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000310:	2b00      	cmp	r3, #0
 8000312:	d0f9      	beq.n	8000308 <initialization+0x68>
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 8000314:	4b84      	ldr	r3, [pc, #528]	; (8000528 <initialization+0x288>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a83      	ldr	r2, [pc, #524]	; (8000528 <initialization+0x288>)
 800031a:	f043 0305 	orr.w	r3, r3, #5
 800031e:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0 | RCC_PLLCFGR_PLLM_3 | RCC_PLLCFGR_PLLM_4;
 8000320:	4b80      	ldr	r3, [pc, #512]	; (8000524 <initialization+0x284>)
 8000322:	685b      	ldr	r3, [r3, #4]
 8000324:	4a7f      	ldr	r2, [pc, #508]	; (8000524 <initialization+0x284>)
 8000326:	f043 0319 	orr.w	r3, r3, #25
 800032a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_4 | RCC_PLLCFGR_PLLN_5 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLN_8;
 800032c:	4b7d      	ldr	r3, [pc, #500]	; (8000524 <initialization+0x284>)
 800032e:	685b      	ldr	r3, [r3, #4]
 8000330:	4a7c      	ldr	r2, [pc, #496]	; (8000524 <initialization+0x284>)
 8000332:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8000336:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_6;
 8000338:	4b7a      	ldr	r3, [pc, #488]	; (8000524 <initialization+0x284>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	4a79      	ldr	r2, [pc, #484]	; (8000524 <initialization+0x284>)
 800033e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000342:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLP_0;
 8000344:	4b77      	ldr	r3, [pc, #476]	; (8000524 <initialization+0x284>)
 8000346:	685b      	ldr	r3, [r3, #4]
 8000348:	4a76      	ldr	r2, [pc, #472]	; (8000524 <initialization+0x284>)
 800034a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800034e:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE2_2;
 8000350:	4b74      	ldr	r3, [pc, #464]	; (8000524 <initialization+0x284>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	4a73      	ldr	r2, [pc, #460]	; (8000524 <initialization+0x284>)
 8000356:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 800035a:	6093      	str	r3, [r2, #8]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 800035c:	4b71      	ldr	r3, [pc, #452]	; (8000524 <initialization+0x284>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	4a70      	ldr	r2, [pc, #448]	; (8000524 <initialization+0x284>)
 8000362:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000366:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000368:	4b6e      	ldr	r3, [pc, #440]	; (8000524 <initialization+0x284>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a6d      	ldr	r2, [pc, #436]	; (8000524 <initialization+0x284>)
 800036e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000372:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000374:	bf00      	nop
 8000376:	4b6b      	ldr	r3, [pc, #428]	; (8000524 <initialization+0x284>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f9      	beq.n	8000376 <initialization+0xd6>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000382:	4b68      	ldr	r3, [pc, #416]	; (8000524 <initialization+0x284>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	4a67      	ldr	r2, [pc, #412]	; (8000524 <initialization+0x284>)
 8000388:	f043 0302 	orr.w	r3, r3, #2
 800038c:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 800038e:	bf00      	nop
 8000390:	4b64      	ldr	r3, [pc, #400]	; (8000524 <initialization+0x284>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	f003 030c 	and.w	r3, r3, #12
 8000398:	2b08      	cmp	r3, #8
 800039a:	d1f9      	bne.n	8000390 <initialization+0xf0>
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7;
 800039c:	4b61      	ldr	r3, [pc, #388]	; (8000524 <initialization+0x284>)
 800039e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003a2:	4a60      	ldr	r2, [pc, #384]	; (8000524 <initialization+0x284>)
 80003a4:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80003a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIR_0 | RCC_PLLSAICFGR_PLLSAIR_2;
 80003ac:	4b5d      	ldr	r3, [pc, #372]	; (8000524 <initialization+0x284>)
 80003ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003b2:	4a5c      	ldr	r2, [pc, #368]	; (8000524 <initialization+0x284>)
 80003b4:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80003b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->DCKCFGR1 	|= RCC_DCKCFGR1_PLLSAIDIVR_0;
 80003bc:	4b59      	ldr	r3, [pc, #356]	; (8000524 <initialization+0x284>)
 80003be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003c2:	4a58      	ldr	r2, [pc, #352]	; (8000524 <initialization+0x284>)
 80003c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->DCKCFGR1 	&= ~RCC_DCKCFGR1_PLLSAIDIVR_1;
 80003cc:	4b55      	ldr	r3, [pc, #340]	; (8000524 <initialization+0x284>)
 80003ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003d2:	4a54      	ldr	r2, [pc, #336]	; (8000524 <initialization+0x284>)
 80003d4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->CR |= RCC_CR_PLLSAION;
 80003dc:	4b51      	ldr	r3, [pc, #324]	; (8000524 <initialization+0x284>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	4a50      	ldr	r2, [pc, #320]	; (8000524 <initialization+0x284>)
 80003e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003e6:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLSAIRDY) == 0);
 80003e8:	bf00      	nop
 80003ea:	4b4e      	ldr	r3, [pc, #312]	; (8000524 <initialization+0x284>)
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0f9      	beq.n	80003ea <initialization+0x14a>

	//B0 PE4
	GPIOE->MODER   &= ~GPIO_MODER_MODER4;
 80003f6:	4b4d      	ldr	r3, [pc, #308]	; (800052c <initialization+0x28c>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a4c      	ldr	r2, [pc, #304]	; (800052c <initialization+0x28c>)
 80003fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000400:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |= GPIO_MODER_MODER4_1;
 8000402:	4b4a      	ldr	r3, [pc, #296]	; (800052c <initialization+0x28c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	4a49      	ldr	r2, [pc, #292]	; (800052c <initialization+0x28c>)
 8000408:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800040c:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 800040e:	4b47      	ldr	r3, [pc, #284]	; (800052c <initialization+0x28c>)
 8000410:	689b      	ldr	r3, [r3, #8]
 8000412:	4a46      	ldr	r2, [pc, #280]	; (800052c <initialization+0x28c>)
 8000414:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000418:	6093      	str	r3, [r2, #8]
	GPIOE->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 800041a:	4b44      	ldr	r3, [pc, #272]	; (800052c <initialization+0x28c>)
 800041c:	6a1b      	ldr	r3, [r3, #32]
 800041e:	4a43      	ldr	r2, [pc, #268]	; (800052c <initialization+0x28c>)
 8000420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000424:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000426:	4b41      	ldr	r3, [pc, #260]	; (800052c <initialization+0x28c>)
 8000428:	6a1b      	ldr	r3, [r3, #32]
 800042a:	4a40      	ldr	r2, [pc, #256]	; (800052c <initialization+0x28c>)
 800042c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000430:	6213      	str	r3, [r2, #32]

	//B1 PJ13
	GPIOJ->MODER   &= ~GPIO_MODER_MODER13;
 8000432:	4b3f      	ldr	r3, [pc, #252]	; (8000530 <initialization+0x290>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a3e      	ldr	r2, [pc, #248]	; (8000530 <initialization+0x290>)
 8000438:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800043c:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER13_1;
 800043e:	4b3c      	ldr	r3, [pc, #240]	; (8000530 <initialization+0x290>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a3b      	ldr	r2, [pc, #236]	; (8000530 <initialization+0x290>)
 8000444:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000448:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_1;
 800044a:	4b39      	ldr	r3, [pc, #228]	; (8000530 <initialization+0x290>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	4a38      	ldr	r2, [pc, #224]	; (8000530 <initialization+0x290>)
 8000450:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000454:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL5_0;
 8000456:	4b36      	ldr	r3, [pc, #216]	; (8000530 <initialization+0x290>)
 8000458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800045a:	4a35      	ldr	r2, [pc, #212]	; (8000530 <initialization+0x290>)
 800045c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000460:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000462:	4b33      	ldr	r3, [pc, #204]	; (8000530 <initialization+0x290>)
 8000464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000466:	4a32      	ldr	r2, [pc, #200]	; (8000530 <initialization+0x290>)
 8000468:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800046c:	6253      	str	r3, [r2, #36]	; 0x24

	//B2 PJ14
	GPIOJ->MODER   &= ~GPIO_MODER_MODER14;
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <initialization+0x290>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a2f      	ldr	r2, [pc, #188]	; (8000530 <initialization+0x290>)
 8000474:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000478:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER14_1;
 800047a:	4b2d      	ldr	r3, [pc, #180]	; (8000530 <initialization+0x290>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a2c      	ldr	r2, [pc, #176]	; (8000530 <initialization+0x290>)
 8000480:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000484:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 8000486:	4b2a      	ldr	r3, [pc, #168]	; (8000530 <initialization+0x290>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	4a29      	ldr	r2, [pc, #164]	; (8000530 <initialization+0x290>)
 800048c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000490:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 8000492:	4b27      	ldr	r3, [pc, #156]	; (8000530 <initialization+0x290>)
 8000494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000496:	4a26      	ldr	r2, [pc, #152]	; (8000530 <initialization+0x290>)
 8000498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800049c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 800049e:	4b24      	ldr	r3, [pc, #144]	; (8000530 <initialization+0x290>)
 80004a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a2:	4a23      	ldr	r2, [pc, #140]	; (8000530 <initialization+0x290>)
 80004a4:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80004a8:	6253      	str	r3, [r2, #36]	; 0x24

	//B3 PJ15
	GPIOJ->MODER   &= ~GPIO_MODER_MODER15;
 80004aa:	4b21      	ldr	r3, [pc, #132]	; (8000530 <initialization+0x290>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a20      	ldr	r2, [pc, #128]	; (8000530 <initialization+0x290>)
 80004b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80004b4:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER15_1;
 80004b6:	4b1e      	ldr	r3, [pc, #120]	; (8000530 <initialization+0x290>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	4a1d      	ldr	r2, [pc, #116]	; (8000530 <initialization+0x290>)
 80004bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004c0:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <initialization+0x290>)
 80004c4:	689b      	ldr	r3, [r3, #8]
 80004c6:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <initialization+0x290>)
 80004c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004cc:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 80004ce:	4b18      	ldr	r3, [pc, #96]	; (8000530 <initialization+0x290>)
 80004d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d2:	4a17      	ldr	r2, [pc, #92]	; (8000530 <initialization+0x290>)
 80004d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80004d8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 80004da:	4b15      	ldr	r3, [pc, #84]	; (8000530 <initialization+0x290>)
 80004dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004de:	4a14      	ldr	r2, [pc, #80]	; (8000530 <initialization+0x290>)
 80004e0:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 80004e4:	6253      	str	r3, [r2, #36]	; 0x24

	//B4 PJ12
	GPIOJ->MODER   &= ~GPIO_MODER_MODER12;
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <initialization+0x290>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a11      	ldr	r2, [pc, #68]	; (8000530 <initialization+0x290>)
 80004ec:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80004f0:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER12_1;
 80004f2:	4b0f      	ldr	r3, [pc, #60]	; (8000530 <initialization+0x290>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <initialization+0x290>)
 80004f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004fc:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12_1;
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <initialization+0x290>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <initialization+0x290>)
 8000504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000508:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL4_0;
 800050a:	4b09      	ldr	r3, [pc, #36]	; (8000530 <initialization+0x290>)
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	4a08      	ldr	r2, [pc, #32]	; (8000530 <initialization+0x290>)
 8000510:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000514:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000516:	4b06      	ldr	r3, [pc, #24]	; (8000530 <initialization+0x290>)
 8000518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051a:	4a05      	ldr	r2, [pc, #20]	; (8000530 <initialization+0x290>)
 800051c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000520:	e008      	b.n	8000534 <initialization+0x294>
 8000522:	bf00      	nop
 8000524:	40023800 	.word	0x40023800
 8000528:	40023c00 	.word	0x40023c00
 800052c:	40021000 	.word	0x40021000
 8000530:	40022400 	.word	0x40022400
 8000534:	6253      	str	r3, [r2, #36]	; 0x24

	//B5 PK4
	GPIOK->MODER   &= ~GPIO_MODER_MODER4;
 8000536:	4b99      	ldr	r3, [pc, #612]	; (800079c <initialization+0x4fc>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	4a98      	ldr	r2, [pc, #608]	; (800079c <initialization+0x4fc>)
 800053c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000540:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER4_1;
 8000542:	4b96      	ldr	r3, [pc, #600]	; (800079c <initialization+0x4fc>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a95      	ldr	r2, [pc, #596]	; (800079c <initialization+0x4fc>)
 8000548:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800054c:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 800054e:	4b93      	ldr	r3, [pc, #588]	; (800079c <initialization+0x4fc>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	4a92      	ldr	r2, [pc, #584]	; (800079c <initialization+0x4fc>)
 8000554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000558:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 800055a:	4b90      	ldr	r3, [pc, #576]	; (800079c <initialization+0x4fc>)
 800055c:	6a1b      	ldr	r3, [r3, #32]
 800055e:	4a8f      	ldr	r2, [pc, #572]	; (800079c <initialization+0x4fc>)
 8000560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000564:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000566:	4b8d      	ldr	r3, [pc, #564]	; (800079c <initialization+0x4fc>)
 8000568:	6a1b      	ldr	r3, [r3, #32]
 800056a:	4a8c      	ldr	r2, [pc, #560]	; (800079c <initialization+0x4fc>)
 800056c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000570:	6213      	str	r3, [r2, #32]

	//B6 PK5
	GPIOK->MODER   &= ~GPIO_MODER_MODER5;
 8000572:	4b8a      	ldr	r3, [pc, #552]	; (800079c <initialization+0x4fc>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a89      	ldr	r2, [pc, #548]	; (800079c <initialization+0x4fc>)
 8000578:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800057c:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER5_1;
 800057e:	4b87      	ldr	r3, [pc, #540]	; (800079c <initialization+0x4fc>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a86      	ldr	r2, [pc, #536]	; (800079c <initialization+0x4fc>)
 8000584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000588:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 800058a:	4b84      	ldr	r3, [pc, #528]	; (800079c <initialization+0x4fc>)
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	4a83      	ldr	r2, [pc, #524]	; (800079c <initialization+0x4fc>)
 8000590:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000594:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 8000596:	4b81      	ldr	r3, [pc, #516]	; (800079c <initialization+0x4fc>)
 8000598:	6a1b      	ldr	r3, [r3, #32]
 800059a:	4a80      	ldr	r2, [pc, #512]	; (800079c <initialization+0x4fc>)
 800059c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80005a0:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 80005a2:	4b7e      	ldr	r3, [pc, #504]	; (800079c <initialization+0x4fc>)
 80005a4:	6a1b      	ldr	r3, [r3, #32]
 80005a6:	4a7d      	ldr	r2, [pc, #500]	; (800079c <initialization+0x4fc>)
 80005a8:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80005ac:	6213      	str	r3, [r2, #32]

	//B7 PK6
	GPIOK->MODER   &= ~GPIO_MODER_MODER6;
 80005ae:	4b7b      	ldr	r3, [pc, #492]	; (800079c <initialization+0x4fc>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a7a      	ldr	r2, [pc, #488]	; (800079c <initialization+0x4fc>)
 80005b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80005b8:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER6_1;
 80005ba:	4b78      	ldr	r3, [pc, #480]	; (800079c <initialization+0x4fc>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4a77      	ldr	r2, [pc, #476]	; (800079c <initialization+0x4fc>)
 80005c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005c4:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 80005c6:	4b75      	ldr	r3, [pc, #468]	; (800079c <initialization+0x4fc>)
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	4a74      	ldr	r2, [pc, #464]	; (800079c <initialization+0x4fc>)
 80005cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005d0:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 80005d2:	4b72      	ldr	r3, [pc, #456]	; (800079c <initialization+0x4fc>)
 80005d4:	6a1b      	ldr	r3, [r3, #32]
 80005d6:	4a71      	ldr	r2, [pc, #452]	; (800079c <initialization+0x4fc>)
 80005d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005dc:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 80005de:	4b6f      	ldr	r3, [pc, #444]	; (800079c <initialization+0x4fc>)
 80005e0:	6a1b      	ldr	r3, [r3, #32]
 80005e2:	4a6e      	ldr	r2, [pc, #440]	; (800079c <initialization+0x4fc>)
 80005e4:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80005e8:	6213      	str	r3, [r2, #32]

	//R0 PI 15
	GPIOI->MODER   &= ~GPIO_MODER_MODER15;
 80005ea:	4b6d      	ldr	r3, [pc, #436]	; (80007a0 <initialization+0x500>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a6c      	ldr	r2, [pc, #432]	; (80007a0 <initialization+0x500>)
 80005f0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80005f4:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER15_1;
 80005f6:	4b6a      	ldr	r3, [pc, #424]	; (80007a0 <initialization+0x500>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a69      	ldr	r2, [pc, #420]	; (80007a0 <initialization+0x500>)
 80005fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000600:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 8000602:	4b67      	ldr	r3, [pc, #412]	; (80007a0 <initialization+0x500>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	4a66      	ldr	r2, [pc, #408]	; (80007a0 <initialization+0x500>)
 8000608:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800060c:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 800060e:	4b64      	ldr	r3, [pc, #400]	; (80007a0 <initialization+0x500>)
 8000610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000612:	4a63      	ldr	r2, [pc, #396]	; (80007a0 <initialization+0x500>)
 8000614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000618:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800061a:	4b61      	ldr	r3, [pc, #388]	; (80007a0 <initialization+0x500>)
 800061c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800061e:	4a60      	ldr	r2, [pc, #384]	; (80007a0 <initialization+0x500>)
 8000620:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000624:	6253      	str	r3, [r2, #36]	; 0x24

	//R1 PJ0
	GPIOJ->MODER   &= ~GPIO_MODER_MODER0;
 8000626:	4b5f      	ldr	r3, [pc, #380]	; (80007a4 <initialization+0x504>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a5e      	ldr	r2, [pc, #376]	; (80007a4 <initialization+0x504>)
 800062c:	f023 0303 	bic.w	r3, r3, #3
 8000630:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER0_1;
 8000632:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <initialization+0x504>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a5b      	ldr	r2, [pc, #364]	; (80007a4 <initialization+0x504>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 800063e:	4b59      	ldr	r3, [pc, #356]	; (80007a4 <initialization+0x504>)
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	4a58      	ldr	r2, [pc, #352]	; (80007a4 <initialization+0x504>)
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 800064a:	4b56      	ldr	r3, [pc, #344]	; (80007a4 <initialization+0x504>)
 800064c:	6a1b      	ldr	r3, [r3, #32]
 800064e:	4a55      	ldr	r2, [pc, #340]	; (80007a4 <initialization+0x504>)
 8000650:	f023 0301 	bic.w	r3, r3, #1
 8000654:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000656:	4b53      	ldr	r3, [pc, #332]	; (80007a4 <initialization+0x504>)
 8000658:	6a1b      	ldr	r3, [r3, #32]
 800065a:	4a52      	ldr	r2, [pc, #328]	; (80007a4 <initialization+0x504>)
 800065c:	f043 030e 	orr.w	r3, r3, #14
 8000660:	6213      	str	r3, [r2, #32]

	//R2 PJ1
	GPIOJ->MODER   &= ~GPIO_MODER_MODER1;
 8000662:	4b50      	ldr	r3, [pc, #320]	; (80007a4 <initialization+0x504>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a4f      	ldr	r2, [pc, #316]	; (80007a4 <initialization+0x504>)
 8000668:	f023 030c 	bic.w	r3, r3, #12
 800066c:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER1_1;
 800066e:	4b4d      	ldr	r3, [pc, #308]	; (80007a4 <initialization+0x504>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a4c      	ldr	r2, [pc, #304]	; (80007a4 <initialization+0x504>)
 8000674:	f043 0308 	orr.w	r3, r3, #8
 8000678:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 800067a:	4b4a      	ldr	r3, [pc, #296]	; (80007a4 <initialization+0x504>)
 800067c:	689b      	ldr	r3, [r3, #8]
 800067e:	4a49      	ldr	r2, [pc, #292]	; (80007a4 <initialization+0x504>)
 8000680:	f043 0308 	orr.w	r3, r3, #8
 8000684:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 8000686:	4b47      	ldr	r3, [pc, #284]	; (80007a4 <initialization+0x504>)
 8000688:	6a1b      	ldr	r3, [r3, #32]
 800068a:	4a46      	ldr	r2, [pc, #280]	; (80007a4 <initialization+0x504>)
 800068c:	f023 0310 	bic.w	r3, r3, #16
 8000690:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000692:	4b44      	ldr	r3, [pc, #272]	; (80007a4 <initialization+0x504>)
 8000694:	6a1b      	ldr	r3, [r3, #32]
 8000696:	4a43      	ldr	r2, [pc, #268]	; (80007a4 <initialization+0x504>)
 8000698:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800069c:	6213      	str	r3, [r2, #32]

	//R3 PJ2
	GPIOJ->MODER   &= ~GPIO_MODER_MODER2;
 800069e:	4b41      	ldr	r3, [pc, #260]	; (80007a4 <initialization+0x504>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a40      	ldr	r2, [pc, #256]	; (80007a4 <initialization+0x504>)
 80006a4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80006a8:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER2_1;
 80006aa:	4b3e      	ldr	r3, [pc, #248]	; (80007a4 <initialization+0x504>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a3d      	ldr	r2, [pc, #244]	; (80007a4 <initialization+0x504>)
 80006b0:	f043 0320 	orr.w	r3, r3, #32
 80006b4:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 80006b6:	4b3b      	ldr	r3, [pc, #236]	; (80007a4 <initialization+0x504>)
 80006b8:	689b      	ldr	r3, [r3, #8]
 80006ba:	4a3a      	ldr	r2, [pc, #232]	; (80007a4 <initialization+0x504>)
 80006bc:	f043 0320 	orr.w	r3, r3, #32
 80006c0:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 80006c2:	4b38      	ldr	r3, [pc, #224]	; (80007a4 <initialization+0x504>)
 80006c4:	6a1b      	ldr	r3, [r3, #32]
 80006c6:	4a37      	ldr	r2, [pc, #220]	; (80007a4 <initialization+0x504>)
 80006c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80006cc:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 80006ce:	4b35      	ldr	r3, [pc, #212]	; (80007a4 <initialization+0x504>)
 80006d0:	6a1b      	ldr	r3, [r3, #32]
 80006d2:	4a34      	ldr	r2, [pc, #208]	; (80007a4 <initialization+0x504>)
 80006d4:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 80006d8:	6213      	str	r3, [r2, #32]

	//R4 PJ3

	GPIOJ->MODER   &= ~GPIO_MODER_MODER3;
 80006da:	4b32      	ldr	r3, [pc, #200]	; (80007a4 <initialization+0x504>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a31      	ldr	r2, [pc, #196]	; (80007a4 <initialization+0x504>)
 80006e0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80006e4:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER3_1;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	; (80007a4 <initialization+0x504>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	4a2e      	ldr	r2, [pc, #184]	; (80007a4 <initialization+0x504>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f0:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3_1;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	; (80007a4 <initialization+0x504>)
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	4a2b      	ldr	r2, [pc, #172]	; (80007a4 <initialization+0x504>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006fc:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL3_0;
 80006fe:	4b29      	ldr	r3, [pc, #164]	; (80007a4 <initialization+0x504>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	4a28      	ldr	r2, [pc, #160]	; (80007a4 <initialization+0x504>)
 8000704:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000708:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <initialization+0x504>)
 800070c:	6a1b      	ldr	r3, [r3, #32]
 800070e:	4a25      	ldr	r2, [pc, #148]	; (80007a4 <initialization+0x504>)
 8000710:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000714:	6213      	str	r3, [r2, #32]

	//R5 PJ4
	GPIOJ->MODER   &= ~GPIO_MODER_MODER4;
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <initialization+0x504>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <initialization+0x504>)
 800071c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000720:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER4_1;
 8000722:	4b20      	ldr	r3, [pc, #128]	; (80007a4 <initialization+0x504>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <initialization+0x504>)
 8000728:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 800072e:	4b1d      	ldr	r3, [pc, #116]	; (80007a4 <initialization+0x504>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4a1c      	ldr	r2, [pc, #112]	; (80007a4 <initialization+0x504>)
 8000734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000738:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <initialization+0x504>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	4a19      	ldr	r2, [pc, #100]	; (80007a4 <initialization+0x504>)
 8000740:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000744:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <initialization+0x504>)
 8000748:	6a1b      	ldr	r3, [r3, #32]
 800074a:	4a16      	ldr	r2, [pc, #88]	; (80007a4 <initialization+0x504>)
 800074c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000750:	6213      	str	r3, [r2, #32]

	//R6 PJ5
	GPIOJ->MODER   &= ~GPIO_MODER_MODER5;
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <initialization+0x504>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <initialization+0x504>)
 8000758:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800075c:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER5_1;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <initialization+0x504>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4a10      	ldr	r2, [pc, #64]	; (80007a4 <initialization+0x504>)
 8000764:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000768:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <initialization+0x504>)
 800076c:	689b      	ldr	r3, [r3, #8]
 800076e:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <initialization+0x504>)
 8000770:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000774:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <initialization+0x504>)
 8000778:	6a1b      	ldr	r3, [r3, #32]
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <initialization+0x504>)
 800077c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000780:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <initialization+0x504>)
 8000784:	6a1b      	ldr	r3, [r3, #32]
 8000786:	4a07      	ldr	r2, [pc, #28]	; (80007a4 <initialization+0x504>)
 8000788:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800078c:	6213      	str	r3, [r2, #32]

	//R7 PJ6
	GPIOJ->MODER   &= ~GPIO_MODER_MODER6;
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <initialization+0x504>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <initialization+0x504>)
 8000794:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000798:	e006      	b.n	80007a8 <initialization+0x508>
 800079a:	bf00      	nop
 800079c:	40022800 	.word	0x40022800
 80007a0:	40022000 	.word	0x40022000
 80007a4:	40022400 	.word	0x40022400
 80007a8:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER6_1;
 80007aa:	4b99      	ldr	r3, [pc, #612]	; (8000a10 <initialization+0x770>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a98      	ldr	r2, [pc, #608]	; (8000a10 <initialization+0x770>)
 80007b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007b4:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 80007b6:	4b96      	ldr	r3, [pc, #600]	; (8000a10 <initialization+0x770>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	4a95      	ldr	r2, [pc, #596]	; (8000a10 <initialization+0x770>)
 80007bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80007c0:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 80007c2:	4b93      	ldr	r3, [pc, #588]	; (8000a10 <initialization+0x770>)
 80007c4:	6a1b      	ldr	r3, [r3, #32]
 80007c6:	4a92      	ldr	r2, [pc, #584]	; (8000a10 <initialization+0x770>)
 80007c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80007cc:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 80007ce:	4b90      	ldr	r3, [pc, #576]	; (8000a10 <initialization+0x770>)
 80007d0:	6a1b      	ldr	r3, [r3, #32]
 80007d2:	4a8f      	ldr	r2, [pc, #572]	; (8000a10 <initialization+0x770>)
 80007d4:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80007d8:	6213      	str	r3, [r2, #32]

	//G0 PJ7
	GPIOJ->MODER   &= ~GPIO_MODER_MODER7;
 80007da:	4b8d      	ldr	r3, [pc, #564]	; (8000a10 <initialization+0x770>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a8c      	ldr	r2, [pc, #560]	; (8000a10 <initialization+0x770>)
 80007e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e4:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER7_1;
 80007e6:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <initialization+0x770>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a89      	ldr	r2, [pc, #548]	; (8000a10 <initialization+0x770>)
 80007ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007f0:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 80007f2:	4b87      	ldr	r3, [pc, #540]	; (8000a10 <initialization+0x770>)
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	4a86      	ldr	r2, [pc, #536]	; (8000a10 <initialization+0x770>)
 80007f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007fc:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 80007fe:	4b84      	ldr	r3, [pc, #528]	; (8000a10 <initialization+0x770>)
 8000800:	6a1b      	ldr	r3, [r3, #32]
 8000802:	4a83      	ldr	r2, [pc, #524]	; (8000a10 <initialization+0x770>)
 8000804:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000808:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800080a:	4b81      	ldr	r3, [pc, #516]	; (8000a10 <initialization+0x770>)
 800080c:	6a1b      	ldr	r3, [r3, #32]
 800080e:	4a80      	ldr	r2, [pc, #512]	; (8000a10 <initialization+0x770>)
 8000810:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000814:	6213      	str	r3, [r2, #32]

	//G1 PJ8
	GPIOJ->MODER   &= ~GPIO_MODER_MODER8;
 8000816:	4b7e      	ldr	r3, [pc, #504]	; (8000a10 <initialization+0x770>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a7d      	ldr	r2, [pc, #500]	; (8000a10 <initialization+0x770>)
 800081c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000820:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER8_1;
 8000822:	4b7b      	ldr	r3, [pc, #492]	; (8000a10 <initialization+0x770>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a7a      	ldr	r2, [pc, #488]	; (8000a10 <initialization+0x770>)
 8000828:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800082c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1;
 800082e:	4b78      	ldr	r3, [pc, #480]	; (8000a10 <initialization+0x770>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	4a77      	ldr	r2, [pc, #476]	; (8000a10 <initialization+0x770>)
 8000834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000838:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL0_0;
 800083a:	4b75      	ldr	r3, [pc, #468]	; (8000a10 <initialization+0x770>)
 800083c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800083e:	4a74      	ldr	r2, [pc, #464]	; (8000a10 <initialization+0x770>)
 8000840:	f023 0301 	bic.w	r3, r3, #1
 8000844:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000846:	4b72      	ldr	r3, [pc, #456]	; (8000a10 <initialization+0x770>)
 8000848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800084a:	4a71      	ldr	r2, [pc, #452]	; (8000a10 <initialization+0x770>)
 800084c:	f043 030e 	orr.w	r3, r3, #14
 8000850:	6253      	str	r3, [r2, #36]	; 0x24

	//G2 PJ9
	GPIOJ->MODER   &= ~GPIO_MODER_MODER9;
 8000852:	4b6f      	ldr	r3, [pc, #444]	; (8000a10 <initialization+0x770>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a6e      	ldr	r2, [pc, #440]	; (8000a10 <initialization+0x770>)
 8000858:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800085c:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER9_1;
 800085e:	4b6c      	ldr	r3, [pc, #432]	; (8000a10 <initialization+0x770>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	4a6b      	ldr	r2, [pc, #428]	; (8000a10 <initialization+0x770>)
 8000864:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000868:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 800086a:	4b69      	ldr	r3, [pc, #420]	; (8000a10 <initialization+0x770>)
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	4a68      	ldr	r2, [pc, #416]	; (8000a10 <initialization+0x770>)
 8000870:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000874:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 8000876:	4b66      	ldr	r3, [pc, #408]	; (8000a10 <initialization+0x770>)
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	4a65      	ldr	r2, [pc, #404]	; (8000a10 <initialization+0x770>)
 800087c:	f023 0310 	bic.w	r3, r3, #16
 8000880:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000882:	4b63      	ldr	r3, [pc, #396]	; (8000a10 <initialization+0x770>)
 8000884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000886:	4a62      	ldr	r2, [pc, #392]	; (8000a10 <initialization+0x770>)
 8000888:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800088c:	6253      	str	r3, [r2, #36]	; 0x24

	//G3 PJ10
	GPIOJ->MODER   &= ~GPIO_MODER_MODER10;
 800088e:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <initialization+0x770>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a5f      	ldr	r2, [pc, #380]	; (8000a10 <initialization+0x770>)
 8000894:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000898:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER10_1;
 800089a:	4b5d      	ldr	r3, [pc, #372]	; (8000a10 <initialization+0x770>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a5c      	ldr	r2, [pc, #368]	; (8000a10 <initialization+0x770>)
 80008a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008a4:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 80008a6:	4b5a      	ldr	r3, [pc, #360]	; (8000a10 <initialization+0x770>)
 80008a8:	689b      	ldr	r3, [r3, #8]
 80008aa:	4a59      	ldr	r2, [pc, #356]	; (8000a10 <initialization+0x770>)
 80008ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b0:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 80008b2:	4b57      	ldr	r3, [pc, #348]	; (8000a10 <initialization+0x770>)
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	4a56      	ldr	r2, [pc, #344]	; (8000a10 <initialization+0x770>)
 80008b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80008bc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 80008be:	4b54      	ldr	r3, [pc, #336]	; (8000a10 <initialization+0x770>)
 80008c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c2:	4a53      	ldr	r2, [pc, #332]	; (8000a10 <initialization+0x770>)
 80008c4:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 80008c8:	6253      	str	r3, [r2, #36]	; 0x24

	//G4 PJ11
	GPIOJ->MODER   &= ~GPIO_MODER_MODER11;
 80008ca:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <initialization+0x770>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a50      	ldr	r2, [pc, #320]	; (8000a10 <initialization+0x770>)
 80008d0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80008d4:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER11_1;
 80008d6:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <initialization+0x770>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a4d      	ldr	r2, [pc, #308]	; (8000a10 <initialization+0x770>)
 80008dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008e0:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11_1;
 80008e2:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <initialization+0x770>)
 80008e4:	689b      	ldr	r3, [r3, #8]
 80008e6:	4a4a      	ldr	r2, [pc, #296]	; (8000a10 <initialization+0x770>)
 80008e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80008ec:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL3_0;
 80008ee:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <initialization+0x770>)
 80008f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f2:	4a47      	ldr	r2, [pc, #284]	; (8000a10 <initialization+0x770>)
 80008f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008f8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 80008fa:	4b45      	ldr	r3, [pc, #276]	; (8000a10 <initialization+0x770>)
 80008fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fe:	4a44      	ldr	r2, [pc, #272]	; (8000a10 <initialization+0x770>)
 8000900:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000904:	6253      	str	r3, [r2, #36]	; 0x24

	//G5 PK0
	GPIOK->MODER   &= ~GPIO_MODER_MODER0;
 8000906:	4b43      	ldr	r3, [pc, #268]	; (8000a14 <initialization+0x774>)
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	4a42      	ldr	r2, [pc, #264]	; (8000a14 <initialization+0x774>)
 800090c:	f023 0303 	bic.w	r3, r3, #3
 8000910:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER0_1;
 8000912:	4b40      	ldr	r3, [pc, #256]	; (8000a14 <initialization+0x774>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a3f      	ldr	r2, [pc, #252]	; (8000a14 <initialization+0x774>)
 8000918:	f043 0302 	orr.w	r3, r3, #2
 800091c:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 800091e:	4b3d      	ldr	r3, [pc, #244]	; (8000a14 <initialization+0x774>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	4a3c      	ldr	r2, [pc, #240]	; (8000a14 <initialization+0x774>)
 8000924:	f043 0302 	orr.w	r3, r3, #2
 8000928:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 800092a:	4b3a      	ldr	r3, [pc, #232]	; (8000a14 <initialization+0x774>)
 800092c:	6a1b      	ldr	r3, [r3, #32]
 800092e:	4a39      	ldr	r2, [pc, #228]	; (8000a14 <initialization+0x774>)
 8000930:	f023 0301 	bic.w	r3, r3, #1
 8000934:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000936:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <initialization+0x774>)
 8000938:	6a1b      	ldr	r3, [r3, #32]
 800093a:	4a36      	ldr	r2, [pc, #216]	; (8000a14 <initialization+0x774>)
 800093c:	f043 030e 	orr.w	r3, r3, #14
 8000940:	6213      	str	r3, [r2, #32]

	//G6 PK1
	GPIOK->MODER   &= ~GPIO_MODER_MODER1;
 8000942:	4b34      	ldr	r3, [pc, #208]	; (8000a14 <initialization+0x774>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a33      	ldr	r2, [pc, #204]	; (8000a14 <initialization+0x774>)
 8000948:	f023 030c 	bic.w	r3, r3, #12
 800094c:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER1_1;
 800094e:	4b31      	ldr	r3, [pc, #196]	; (8000a14 <initialization+0x774>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a30      	ldr	r2, [pc, #192]	; (8000a14 <initialization+0x774>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 800095a:	4b2e      	ldr	r3, [pc, #184]	; (8000a14 <initialization+0x774>)
 800095c:	689b      	ldr	r3, [r3, #8]
 800095e:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <initialization+0x774>)
 8000960:	f043 0308 	orr.w	r3, r3, #8
 8000964:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 8000966:	4b2b      	ldr	r3, [pc, #172]	; (8000a14 <initialization+0x774>)
 8000968:	6a1b      	ldr	r3, [r3, #32]
 800096a:	4a2a      	ldr	r2, [pc, #168]	; (8000a14 <initialization+0x774>)
 800096c:	f023 0310 	bic.w	r3, r3, #16
 8000970:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000972:	4b28      	ldr	r3, [pc, #160]	; (8000a14 <initialization+0x774>)
 8000974:	6a1b      	ldr	r3, [r3, #32]
 8000976:	4a27      	ldr	r2, [pc, #156]	; (8000a14 <initialization+0x774>)
 8000978:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800097c:	6213      	str	r3, [r2, #32]

	//G7 PK2
	GPIOK->MODER   &= ~GPIO_MODER_MODER2;
 800097e:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <initialization+0x774>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a24      	ldr	r2, [pc, #144]	; (8000a14 <initialization+0x774>)
 8000984:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000988:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER2_1;
 800098a:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <initialization+0x774>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a21      	ldr	r2, [pc, #132]	; (8000a14 <initialization+0x774>)
 8000990:	f043 0320 	orr.w	r3, r3, #32
 8000994:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 8000996:	4b1f      	ldr	r3, [pc, #124]	; (8000a14 <initialization+0x774>)
 8000998:	689b      	ldr	r3, [r3, #8]
 800099a:	4a1e      	ldr	r2, [pc, #120]	; (8000a14 <initialization+0x774>)
 800099c:	f043 0320 	orr.w	r3, r3, #32
 80009a0:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 80009a2:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <initialization+0x774>)
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	4a1b      	ldr	r2, [pc, #108]	; (8000a14 <initialization+0x774>)
 80009a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009ac:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <initialization+0x774>)
 80009b0:	6a1b      	ldr	r3, [r3, #32]
 80009b2:	4a18      	ldr	r2, [pc, #96]	; (8000a14 <initialization+0x774>)
 80009b4:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 80009b8:	6213      	str	r3, [r2, #32]

	//VSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER9;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <initialization+0x778>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a16      	ldr	r2, [pc, #88]	; (8000a18 <initialization+0x778>)
 80009c0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80009c4:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER9_1;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <initialization+0x778>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a13      	ldr	r2, [pc, #76]	; (8000a18 <initialization+0x778>)
 80009cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009d0:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <initialization+0x778>)
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	4a10      	ldr	r2, [pc, #64]	; (8000a18 <initialization+0x778>)
 80009d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009dc:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <initialization+0x778>)
 80009e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <initialization+0x778>)
 80009e4:	f023 0310 	bic.w	r3, r3, #16
 80009e8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <initialization+0x778>)
 80009ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <initialization+0x778>)
 80009f0:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80009f4:	6253      	str	r3, [r2, #36]	; 0x24

	//HSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER10;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <initialization+0x778>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <initialization+0x778>)
 80009fc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000a00:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER10_1;
 8000a02:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <initialization+0x778>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <initialization+0x778>)
 8000a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a0c:	e006      	b.n	8000a1c <initialization+0x77c>
 8000a0e:	bf00      	nop
 8000a10:	40022400 	.word	0x40022400
 8000a14:	40022800 	.word	0x40022800
 8000a18:	40022000 	.word	0x40022000
 8000a1c:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 8000a1e:	4b78      	ldr	r3, [pc, #480]	; (8000c00 <initialization+0x960>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	4a77      	ldr	r2, [pc, #476]	; (8000c00 <initialization+0x960>)
 8000a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a28:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 8000a2a:	4b75      	ldr	r3, [pc, #468]	; (8000c00 <initialization+0x960>)
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	4a74      	ldr	r2, [pc, #464]	; (8000c00 <initialization+0x960>)
 8000a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a34:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000a36:	4b72      	ldr	r3, [pc, #456]	; (8000c00 <initialization+0x960>)
 8000a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3a:	4a71      	ldr	r2, [pc, #452]	; (8000c00 <initialization+0x960>)
 8000a3c:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000a40:	6253      	str	r3, [r2, #36]	; 0x24

	//CLK
	GPIOI->MODER   &= ~GPIO_MODER_MODER14;
 8000a42:	4b6f      	ldr	r3, [pc, #444]	; (8000c00 <initialization+0x960>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a6e      	ldr	r2, [pc, #440]	; (8000c00 <initialization+0x960>)
 8000a48:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000a4c:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER14_1;
 8000a4e:	4b6c      	ldr	r3, [pc, #432]	; (8000c00 <initialization+0x960>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a6b      	ldr	r2, [pc, #428]	; (8000c00 <initialization+0x960>)
 8000a54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a58:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 8000a5a:	4b69      	ldr	r3, [pc, #420]	; (8000c00 <initialization+0x960>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	4a68      	ldr	r2, [pc, #416]	; (8000c00 <initialization+0x960>)
 8000a60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a64:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 8000a66:	4b66      	ldr	r3, [pc, #408]	; (8000c00 <initialization+0x960>)
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	4a65      	ldr	r2, [pc, #404]	; (8000c00 <initialization+0x960>)
 8000a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000a70:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000a72:	4b63      	ldr	r3, [pc, #396]	; (8000c00 <initialization+0x960>)
 8000a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a76:	4a62      	ldr	r2, [pc, #392]	; (8000c00 <initialization+0x960>)
 8000a78:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000a7c:	6253      	str	r3, [r2, #36]	; 0x24

	//DE
	GPIOK->MODER   &= ~GPIO_MODER_MODER7;
 8000a7e:	4b61      	ldr	r3, [pc, #388]	; (8000c04 <initialization+0x964>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a60      	ldr	r2, [pc, #384]	; (8000c04 <initialization+0x964>)
 8000a84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a88:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER7_1;
 8000a8a:	4b5e      	ldr	r3, [pc, #376]	; (8000c04 <initialization+0x964>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a5d      	ldr	r2, [pc, #372]	; (8000c04 <initialization+0x964>)
 8000a90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a94:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 8000a96:	4b5b      	ldr	r3, [pc, #364]	; (8000c04 <initialization+0x964>)
 8000a98:	689b      	ldr	r3, [r3, #8]
 8000a9a:	4a5a      	ldr	r2, [pc, #360]	; (8000c04 <initialization+0x964>)
 8000a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aa0:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 8000aa2:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <initialization+0x964>)
 8000aa4:	6a1b      	ldr	r3, [r3, #32]
 8000aa6:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <initialization+0x964>)
 8000aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aac:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000aae:	4b55      	ldr	r3, [pc, #340]	; (8000c04 <initialization+0x964>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a54      	ldr	r2, [pc, #336]	; (8000c04 <initialization+0x964>)
 8000ab4:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000ab8:	6213      	str	r3, [r2, #32]

	//LED
	GPIOK->MODER &= ~GPIO_MODER_MODER3;
 8000aba:	4b52      	ldr	r3, [pc, #328]	; (8000c04 <initialization+0x964>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a51      	ldr	r2, [pc, #324]	; (8000c04 <initialization+0x964>)
 8000ac0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000ac4:	6013      	str	r3, [r2, #0]
	GPIOK->MODER |= GPIO_MODER_MODER3_0;
 8000ac6:	4b4f      	ldr	r3, [pc, #316]	; (8000c04 <initialization+0x964>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a4e      	ldr	r2, [pc, #312]	; (8000c04 <initialization+0x964>)
 8000acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ad0:	6013      	str	r3, [r2, #0]
	GPIOK->BSRR |= GPIO_BSRR_BS_3;
 8000ad2:	4b4c      	ldr	r3, [pc, #304]	; (8000c04 <initialization+0x964>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	4a4b      	ldr	r2, [pc, #300]	; (8000c04 <initialization+0x964>)
 8000ad8:	f043 0308 	orr.w	r3, r3, #8
 8000adc:	6193      	str	r3, [r2, #24]

	//ON
	GPIOI->MODER &= ~GPIO_MODER_MODER12;
 8000ade:	4b48      	ldr	r3, [pc, #288]	; (8000c00 <initialization+0x960>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a47      	ldr	r2, [pc, #284]	; (8000c00 <initialization+0x960>)
 8000ae4:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ae8:	6013      	str	r3, [r2, #0]
	GPIOI->MODER |= GPIO_MODER_MODER12_0;
 8000aea:	4b45      	ldr	r3, [pc, #276]	; (8000c00 <initialization+0x960>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a44      	ldr	r2, [pc, #272]	; (8000c00 <initialization+0x960>)
 8000af0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000af4:	6013      	str	r3, [r2, #0]
	GPIOI->BSRR |= GPIO_BSRR_BS_12;
 8000af6:	4b42      	ldr	r3, [pc, #264]	; (8000c00 <initialization+0x960>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	4a41      	ldr	r2, [pc, #260]	; (8000c00 <initialization+0x960>)
 8000afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b00:	6193      	str	r3, [r2, #24]

	GPIOC->MODER &= ~GPIO_MODER_MODER7;
 8000b02:	4b41      	ldr	r3, [pc, #260]	; (8000c08 <initialization+0x968>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a40      	ldr	r2, [pc, #256]	; (8000c08 <initialization+0x968>)
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b0c:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 8000b0e:	4b3e      	ldr	r3, [pc, #248]	; (8000c08 <initialization+0x968>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a3d      	ldr	r2, [pc, #244]	; (8000c08 <initialization+0x968>)
 8000b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b18:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BS_7;
 8000b1a:	4b3b      	ldr	r3, [pc, #236]	; (8000c08 <initialization+0x968>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	4a3a      	ldr	r2, [pc, #232]	; (8000c08 <initialization+0x968>)
 8000b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b24:	6193      	str	r3, [r2, #24]

	LTDC->SSCR |= ((DISPLAY_HSYNC - 1) << 16 | (DISPLAY_VSYNC - 1));
 8000b26:	4b39      	ldr	r3, [pc, #228]	; (8000c0c <initialization+0x96c>)
 8000b28:	689a      	ldr	r2, [r3, #8]
 8000b2a:	4938      	ldr	r1, [pc, #224]	; (8000c0c <initialization+0x96c>)
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <initialization+0x970>)
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	608b      	str	r3, [r1, #8]
	LTDC->BPCR |= ((DISPLAY_HSYNC+DISPLAY_HBP-1) << 16 | (DISPLAY_VSYNC+DISPLAY_VBP-1));
 8000b32:	4b36      	ldr	r3, [pc, #216]	; (8000c0c <initialization+0x96c>)
 8000b34:	68da      	ldr	r2, [r3, #12]
 8000b36:	4935      	ldr	r1, [pc, #212]	; (8000c0c <initialization+0x96c>)
 8000b38:	4b36      	ldr	r3, [pc, #216]	; (8000c14 <initialization+0x974>)
 8000b3a:	4313      	orrs	r3, r2
 8000b3c:	60cb      	str	r3, [r1, #12]
	LTDC->AWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP - 1) << 16 | (DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1));
 8000b3e:	4b33      	ldr	r3, [pc, #204]	; (8000c0c <initialization+0x96c>)
 8000b40:	691a      	ldr	r2, [r3, #16]
 8000b42:	4932      	ldr	r1, [pc, #200]	; (8000c0c <initialization+0x96c>)
 8000b44:	4b34      	ldr	r3, [pc, #208]	; (8000c18 <initialization+0x978>)
 8000b46:	4313      	orrs	r3, r2
 8000b48:	610b      	str	r3, [r1, #16]
	LTDC->TWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP + DISPLAY_HFP -1)<< 16 |(DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP + DISPLAY_VFP - 1));
 8000b4a:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <initialization+0x96c>)
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	492f      	ldr	r1, [pc, #188]	; (8000c0c <initialization+0x96c>)
 8000b50:	4b32      	ldr	r3, [pc, #200]	; (8000c1c <initialization+0x97c>)
 8000b52:	4313      	orrs	r3, r2
 8000b54:	614b      	str	r3, [r1, #20]
	LTDC_Layer2->WHPCR |= (((DISPLAY_WIDTH + DISPLAY_HBP + DISPLAY_HSYNC - 1) << 16) | (DISPLAY_HBP + DISPLAY_HSYNC));
 8000b56:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <initialization+0x980>)
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	4931      	ldr	r1, [pc, #196]	; (8000c20 <initialization+0x980>)
 8000b5c:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <initialization+0x984>)
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	604b      	str	r3, [r1, #4]
	LTDC_Layer2->WVPCR |= (((DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1) << 16) |(DISPLAY_VSYNC + DISPLAY_VBP));
 8000b62:	4b2f      	ldr	r3, [pc, #188]	; (8000c20 <initialization+0x980>)
 8000b64:	689a      	ldr	r2, [r3, #8]
 8000b66:	492e      	ldr	r1, [pc, #184]	; (8000c20 <initialization+0x980>)
 8000b68:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <initialization+0x988>)
 8000b6a:	4313      	orrs	r3, r2
 8000b6c:	608b      	str	r3, [r1, #8]
	LTDC_Layer2->PFCR = 2;
 8000b6e:	4b2c      	ldr	r3, [pc, #176]	; (8000c20 <initialization+0x980>)
 8000b70:	2202      	movs	r2, #2
 8000b72:	611a      	str	r2, [r3, #16]
	LTDC_Layer2->BFCR |= ((4 << 8) | 5);
 8000b74:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <initialization+0x980>)
 8000b76:	69da      	ldr	r2, [r3, #28]
 8000b78:	4929      	ldr	r1, [pc, #164]	; (8000c20 <initialization+0x980>)
 8000b7a:	f240 4305 	movw	r3, #1029	; 0x405
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	61cb      	str	r3, [r1, #28]
	LTDC_Layer2->CACR = 0xff;
 8000b82:	4b27      	ldr	r3, [pc, #156]	; (8000c20 <initialization+0x980>)
 8000b84:	22ff      	movs	r2, #255	; 0xff
 8000b86:	615a      	str	r2, [r3, #20]
	LTDC_Layer2->CFBLR |= (((PIXEL_SIZE * DISPLAY_WIDTH) << 16) | (PIXEL_SIZE * DISPLAY_WIDTH + 3));
 8000b88:	4b25      	ldr	r3, [pc, #148]	; (8000c20 <initialization+0x980>)
 8000b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b8c:	4924      	ldr	r1, [pc, #144]	; (8000c20 <initialization+0x980>)
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <initialization+0x98c>)
 8000b90:	4313      	orrs	r3, r2
 8000b92:	62cb      	str	r3, [r1, #44]	; 0x2c
	LTDC_Layer2->CFBLNR |= DISPLAY_HEIGHT;
 8000b94:	4b22      	ldr	r3, [pc, #136]	; (8000c20 <initialization+0x980>)
 8000b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <initialization+0x980>)
 8000b9a:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8000b9e:	6313      	str	r3, [r2, #48]	; 0x30
	LTDC_Layer2->CR |= LTDC_LxCR_LEN;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <initialization+0x980>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <initialization+0x980>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	6013      	str	r3, [r2, #0]
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <initialization+0x96c>)
 8000bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb0:	4a16      	ldr	r2, [pc, #88]	; (8000c0c <initialization+0x96c>)
 8000bb2:	f043 0302 	orr.w	r3, r3, #2
 8000bb6:	6253      	str	r3, [r2, #36]	; 0x24
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <initialization+0x96c>)
 8000bba:	699b      	ldr	r3, [r3, #24]
 8000bbc:	4a13      	ldr	r2, [pc, #76]	; (8000c0c <initialization+0x96c>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	6193      	str	r3, [r2, #24]

	for(int i = 0; i <= 130559; ++i)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	607b      	str	r3, [r7, #4]
 8000bc8:	e00a      	b.n	8000be0 <initialization+0x940>
		screen[i] = main_picture[i];
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <initialization+0x990>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000bd2:	4a18      	ldr	r2, [pc, #96]	; (8000c34 <initialization+0x994>)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i <= 130559; ++i)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000be6:	dbf0      	blt.n	8000bca <initialization+0x92a>

	GPIOK->BSRR |= GPIO_BSRR_BS_3;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <initialization+0x964>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <initialization+0x964>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	6193      	str	r3, [r2, #24]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40022000 	.word	0x40022000
 8000c04:	40022800 	.word	0x40022800
 8000c08:	40020800 	.word	0x40020800
 8000c0c:	40016800 	.word	0x40016800
 8000c10:	001d0009 	.word	0x001d0009
 8000c14:	002a000b 	.word	0x002a000b
 8000c18:	020a011b 	.word	0x020a011b
 8000c1c:	022a011d 	.word	0x022a011d
 8000c20:	40016904 	.word	0x40016904
 8000c24:	020a002b 	.word	0x020a002b
 8000c28:	011b000c 	.word	0x011b000c
 8000c2c:	07800783 	.word	0x07800783
 8000c30:	080a9b90 	.word	0x080a9b90
 8000c34:	2000001c 	.word	0x2000001c

08000c38 <change_digit_1>:

void change_digit_1(int poz, int number)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b099      	sub	sp, #100	; 0x64
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
	int x = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	65fb      	str	r3, [r7, #92]	; 0x5c
	int k = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	65bb      	str	r3, [r7, #88]	; 0x58

	if(poz==1)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d101      	bne.n	8000c54 <change_digit_1+0x1c>
		x = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d101      	bne.n	8000c5e <change_digit_1+0x26>
		x = 38;
 8000c5a:	2326      	movs	r3, #38	; 0x26
 8000c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==3)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b03      	cmp	r3, #3
 8000c62:	d101      	bne.n	8000c68 <change_digit_1+0x30>
		x = 86;
 8000c64:	2356      	movs	r3, #86	; 0x56
 8000c66:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==4)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	d101      	bne.n	8000c72 <change_digit_1+0x3a>
		x = 124;
 8000c6e:	237c      	movs	r3, #124	; 0x7c
 8000c70:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(number==0)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d126      	bne.n	8000cc6 <change_digit_1+0x8e>
		for(int i = 0; i <= 57; ++i)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8000c7c:	e020      	b.n	8000cc0 <change_digit_1+0x88>
			for(int j = 0; j <= 32; ++j)
 8000c7e:	2300      	movs	r3, #0
 8000c80:	653b      	str	r3, [r7, #80]	; 0x50
 8000c82:	e017      	b.n	8000cb4 <change_digit_1+0x7c>
				screen[x+5113+i*480+j] = zero_picture_1[k++];
 8000c84:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000c86:	1c4b      	adds	r3, r1, #1
 8000c88:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000c8c:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000c90:	441a      	add	r2, r3
 8000c92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000c94:	4603      	mov	r3, r0
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	1a1b      	subs	r3, r3, r0
 8000c9a:	015b      	lsls	r3, r3, #5
 8000c9c:	441a      	add	r2, r3
 8000c9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4aa0      	ldr	r2, [pc, #640]	; (8000f24 <change_digit_1+0x2ec>)
 8000ca4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000ca8:	4a9f      	ldr	r2, [pc, #636]	; (8000f28 <change_digit_1+0x2f0>)
 8000caa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	653b      	str	r3, [r7, #80]	; 0x50
 8000cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cb6:	2b20      	cmp	r3, #32
 8000cb8:	dde4      	ble.n	8000c84 <change_digit_1+0x4c>
		for(int i = 0; i <= 57; ++i)
 8000cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	657b      	str	r3, [r7, #84]	; 0x54
 8000cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000cc2:	2b39      	cmp	r3, #57	; 0x39
 8000cc4:	dddb      	ble.n	8000c7e <change_digit_1+0x46>
	if(number==1)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d126      	bne.n	8000d1a <change_digit_1+0xe2>
		for(int i = 0; i <= 57; ++i)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cd0:	e020      	b.n	8000d14 <change_digit_1+0xdc>
			for(int j = 0; j <= 32; ++j)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000cd6:	e017      	b.n	8000d08 <change_digit_1+0xd0>
				screen[x+5113+i*480+j] = one_picture_1[k++];
 8000cd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000cda:	1c4b      	adds	r3, r1, #1
 8000cdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ce0:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000ce4:	441a      	add	r2, r3
 8000ce6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ce8:	4603      	mov	r3, r0
 8000cea:	011b      	lsls	r3, r3, #4
 8000cec:	1a1b      	subs	r3, r3, r0
 8000cee:	015b      	lsls	r3, r3, #5
 8000cf0:	441a      	add	r2, r3
 8000cf2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf4:	4413      	add	r3, r2
 8000cf6:	4a8d      	ldr	r2, [pc, #564]	; (8000f2c <change_digit_1+0x2f4>)
 8000cf8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000cfc:	4a8a      	ldr	r2, [pc, #552]	; (8000f28 <change_digit_1+0x2f0>)
 8000cfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000d02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d04:	3301      	adds	r3, #1
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d0a:	2b20      	cmp	r3, #32
 8000d0c:	dde4      	ble.n	8000cd8 <change_digit_1+0xa0>
		for(int i = 0; i <= 57; ++i)
 8000d0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d10:	3301      	adds	r3, #1
 8000d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d16:	2b39      	cmp	r3, #57	; 0x39
 8000d18:	dddb      	ble.n	8000cd2 <change_digit_1+0x9a>
	if(number==2)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	2b02      	cmp	r3, #2
 8000d1e:	d126      	bne.n	8000d6e <change_digit_1+0x136>
		for(int i = 0; i <= 57; ++i)
 8000d20:	2300      	movs	r3, #0
 8000d22:	647b      	str	r3, [r7, #68]	; 0x44
 8000d24:	e020      	b.n	8000d68 <change_digit_1+0x130>
			for(int j = 0; j <= 32; ++j)
 8000d26:	2300      	movs	r3, #0
 8000d28:	643b      	str	r3, [r7, #64]	; 0x40
 8000d2a:	e017      	b.n	8000d5c <change_digit_1+0x124>
				screen[x+5113+i*480+j] = two_picture_1[k++];
 8000d2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d2e:	1c4b      	adds	r3, r1, #1
 8000d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d34:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000d38:	441a      	add	r2, r3
 8000d3a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	1a1b      	subs	r3, r3, r0
 8000d42:	015b      	lsls	r3, r3, #5
 8000d44:	441a      	add	r2, r3
 8000d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d48:	4413      	add	r3, r2
 8000d4a:	4a79      	ldr	r2, [pc, #484]	; (8000f30 <change_digit_1+0x2f8>)
 8000d4c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000d50:	4a75      	ldr	r2, [pc, #468]	; (8000f28 <change_digit_1+0x2f0>)
 8000d52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d58:	3301      	adds	r3, #1
 8000d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8000d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d5e:	2b20      	cmp	r3, #32
 8000d60:	dde4      	ble.n	8000d2c <change_digit_1+0xf4>
		for(int i = 0; i <= 57; ++i)
 8000d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d64:	3301      	adds	r3, #1
 8000d66:	647b      	str	r3, [r7, #68]	; 0x44
 8000d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d6a:	2b39      	cmp	r3, #57	; 0x39
 8000d6c:	dddb      	ble.n	8000d26 <change_digit_1+0xee>
	if(number==3)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d126      	bne.n	8000dc2 <change_digit_1+0x18a>
		for(int i = 0; i <= 57; ++i)
 8000d74:	2300      	movs	r3, #0
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000d78:	e020      	b.n	8000dbc <change_digit_1+0x184>
			for(int j = 0; j <= 32; ++j)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000d7e:	e017      	b.n	8000db0 <change_digit_1+0x178>
				screen[x+5113+i*480+j] = three_picture_1[k++];
 8000d80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d82:	1c4b      	adds	r3, r1, #1
 8000d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d88:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000d8c:	441a      	add	r2, r3
 8000d8e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d90:	4603      	mov	r3, r0
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	1a1b      	subs	r3, r3, r0
 8000d96:	015b      	lsls	r3, r3, #5
 8000d98:	441a      	add	r2, r3
 8000d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000d9c:	4413      	add	r3, r2
 8000d9e:	4a65      	ldr	r2, [pc, #404]	; (8000f34 <change_digit_1+0x2fc>)
 8000da0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000da4:	4a60      	ldr	r2, [pc, #384]	; (8000f28 <change_digit_1+0x2f0>)
 8000da6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000dac:	3301      	adds	r3, #1
 8000dae:	63bb      	str	r3, [r7, #56]	; 0x38
 8000db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000db2:	2b20      	cmp	r3, #32
 8000db4:	dde4      	ble.n	8000d80 <change_digit_1+0x148>
		for(int i = 0; i <= 57; ++i)
 8000db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000db8:	3301      	adds	r3, #1
 8000dba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dbe:	2b39      	cmp	r3, #57	; 0x39
 8000dc0:	dddb      	ble.n	8000d7a <change_digit_1+0x142>
	if(number==4)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d126      	bne.n	8000e16 <change_digit_1+0x1de>
		for(int i = 0; i <= 57; ++i)
 8000dc8:	2300      	movs	r3, #0
 8000dca:	637b      	str	r3, [r7, #52]	; 0x34
 8000dcc:	e020      	b.n	8000e10 <change_digit_1+0x1d8>
			for(int j = 0; j <= 32; ++j)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	633b      	str	r3, [r7, #48]	; 0x30
 8000dd2:	e017      	b.n	8000e04 <change_digit_1+0x1cc>
				screen[x+5113+i*480+j] = four_picture_1[k++];
 8000dd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000dd6:	1c4b      	adds	r3, r1, #1
 8000dd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ddc:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000de0:	441a      	add	r2, r3
 8000de2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000de4:	4603      	mov	r3, r0
 8000de6:	011b      	lsls	r3, r3, #4
 8000de8:	1a1b      	subs	r3, r3, r0
 8000dea:	015b      	lsls	r3, r3, #5
 8000dec:	441a      	add	r2, r3
 8000dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000df0:	4413      	add	r3, r2
 8000df2:	4a51      	ldr	r2, [pc, #324]	; (8000f38 <change_digit_1+0x300>)
 8000df4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000df8:	4a4b      	ldr	r2, [pc, #300]	; (8000f28 <change_digit_1+0x2f0>)
 8000dfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e00:	3301      	adds	r3, #1
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
 8000e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e06:	2b20      	cmp	r3, #32
 8000e08:	dde4      	ble.n	8000dd4 <change_digit_1+0x19c>
		for(int i = 0; i <= 57; ++i)
 8000e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8000e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e12:	2b39      	cmp	r3, #57	; 0x39
 8000e14:	dddb      	ble.n	8000dce <change_digit_1+0x196>
	if(number==5)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	2b05      	cmp	r3, #5
 8000e1a:	d126      	bne.n	8000e6a <change_digit_1+0x232>
		for(int i = 0; i <= 57; ++i)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e20:	e020      	b.n	8000e64 <change_digit_1+0x22c>
			for(int j = 0; j <= 32; ++j)
 8000e22:	2300      	movs	r3, #0
 8000e24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e26:	e017      	b.n	8000e58 <change_digit_1+0x220>
				screen[x+5113+i*480+j] = five_picture_1[k++];
 8000e28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e2a:	1c4b      	adds	r3, r1, #1
 8000e2c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e30:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000e34:	441a      	add	r2, r3
 8000e36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e38:	4603      	mov	r3, r0
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	1a1b      	subs	r3, r3, r0
 8000e3e:	015b      	lsls	r3, r3, #5
 8000e40:	441a      	add	r2, r3
 8000e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e44:	4413      	add	r3, r2
 8000e46:	4a3d      	ldr	r2, [pc, #244]	; (8000f3c <change_digit_1+0x304>)
 8000e48:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000e4c:	4a36      	ldr	r2, [pc, #216]	; (8000f28 <change_digit_1+0x2f0>)
 8000e4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e54:	3301      	adds	r3, #1
 8000e56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5a:	2b20      	cmp	r3, #32
 8000e5c:	dde4      	ble.n	8000e28 <change_digit_1+0x1f0>
		for(int i = 0; i <= 57; ++i)
 8000e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e60:	3301      	adds	r3, #1
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	2b39      	cmp	r3, #57	; 0x39
 8000e68:	dddb      	ble.n	8000e22 <change_digit_1+0x1ea>
	if(number==6)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	2b06      	cmp	r3, #6
 8000e6e:	d126      	bne.n	8000ebe <change_digit_1+0x286>
		for(int i = 0; i <= 57; ++i)
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
 8000e74:	e020      	b.n	8000eb8 <change_digit_1+0x280>
			for(int j = 0; j <= 32; ++j)
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
 8000e7a:	e017      	b.n	8000eac <change_digit_1+0x274>
				screen[x+5113+i*480+j] = six_picture_1[k++];
 8000e7c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e7e:	1c4b      	adds	r3, r1, #1
 8000e80:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e84:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000e88:	441a      	add	r2, r3
 8000e8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	011b      	lsls	r3, r3, #4
 8000e90:	1a1b      	subs	r3, r3, r0
 8000e92:	015b      	lsls	r3, r3, #5
 8000e94:	441a      	add	r2, r3
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	4413      	add	r3, r2
 8000e9a:	4a29      	ldr	r2, [pc, #164]	; (8000f40 <change_digit_1+0x308>)
 8000e9c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000ea0:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <change_digit_1+0x2f0>)
 8000ea2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	623b      	str	r3, [r7, #32]
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	2b20      	cmp	r3, #32
 8000eb0:	dde4      	ble.n	8000e7c <change_digit_1+0x244>
		for(int i = 0; i <= 57; ++i)
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eba:	2b39      	cmp	r3, #57	; 0x39
 8000ebc:	dddb      	ble.n	8000e76 <change_digit_1+0x23e>
	if(number==7)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	2b07      	cmp	r3, #7
 8000ec2:	d126      	bne.n	8000f12 <change_digit_1+0x2da>
		for(int i = 0; i <= 57; ++i)
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
 8000ec8:	e020      	b.n	8000f0c <change_digit_1+0x2d4>
			for(int j = 0; j <= 32; ++j)
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	e017      	b.n	8000f00 <change_digit_1+0x2c8>
				screen[x+5113+i*480+j] = seven_picture_1[k++];
 8000ed0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000ed2:	1c4b      	adds	r3, r1, #1
 8000ed4:	65bb      	str	r3, [r7, #88]	; 0x58
 8000ed6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ed8:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000edc:	441a      	add	r2, r3
 8000ede:	69f8      	ldr	r0, [r7, #28]
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	1a1b      	subs	r3, r3, r0
 8000ee6:	015b      	lsls	r3, r3, #5
 8000ee8:	441a      	add	r2, r3
 8000eea:	69bb      	ldr	r3, [r7, #24]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a15      	ldr	r2, [pc, #84]	; (8000f44 <change_digit_1+0x30c>)
 8000ef0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000ef4:	4a0c      	ldr	r2, [pc, #48]	; (8000f28 <change_digit_1+0x2f0>)
 8000ef6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000efa:	69bb      	ldr	r3, [r7, #24]
 8000efc:	3301      	adds	r3, #1
 8000efe:	61bb      	str	r3, [r7, #24]
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	2b20      	cmp	r3, #32
 8000f04:	dde4      	ble.n	8000ed0 <change_digit_1+0x298>
		for(int i = 0; i <= 57; ++i)
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	2b39      	cmp	r3, #57	; 0x39
 8000f10:	dddb      	ble.n	8000eca <change_digit_1+0x292>
	if(number==8)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d138      	bne.n	8000f8a <change_digit_1+0x352>
		for(int i = 0; i <= 57; ++i)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	e032      	b.n	8000f84 <change_digit_1+0x34c>
			for(int j = 0; j <= 32; ++j)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	e029      	b.n	8000f78 <change_digit_1+0x340>
 8000f24:	08009b64 	.word	0x08009b64
 8000f28:	2000001c 	.word	0x2000001c
 8000f2c:	080050a0 	.word	0x080050a0
 8000f30:	08008c70 	.word	0x08008c70
 8000f34:	08007d7c 	.word	0x08007d7c
 8000f38:	080032b8 	.word	0x080032b8
 8000f3c:	080023c4 	.word	0x080023c4
 8000f40:	08006e88 	.word	0x08006e88
 8000f44:	08005f94 	.word	0x08005f94
				screen[x+5113+i*480+j] = eigth_picture_1[k++];
 8000f48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f4a:	1c4b      	adds	r3, r1, #1
 8000f4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f50:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000f54:	441a      	add	r2, r3
 8000f56:	6978      	ldr	r0, [r7, #20]
 8000f58:	4603      	mov	r3, r0
 8000f5a:	011b      	lsls	r3, r3, #4
 8000f5c:	1a1b      	subs	r3, r3, r0
 8000f5e:	015b      	lsls	r3, r3, #5
 8000f60:	441a      	add	r2, r3
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4413      	add	r3, r2
 8000f66:	4a25      	ldr	r2, [pc, #148]	; (8000ffc <change_digit_1+0x3c4>)
 8000f68:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000f6c:	4a24      	ldr	r2, [pc, #144]	; (8001000 <change_digit_1+0x3c8>)
 8000f6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3301      	adds	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	2b20      	cmp	r3, #32
 8000f7c:	dde4      	ble.n	8000f48 <change_digit_1+0x310>
		for(int i = 0; i <= 57; ++i)
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	3301      	adds	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b39      	cmp	r3, #57	; 0x39
 8000f88:	ddc9      	ble.n	8000f1e <change_digit_1+0x2e6>
	if(number==9)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	2b09      	cmp	r3, #9
 8000f8e:	d126      	bne.n	8000fde <change_digit_1+0x3a6>
		for(int i = 0; i <= 57; ++i)
 8000f90:	2300      	movs	r3, #0
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e020      	b.n	8000fd8 <change_digit_1+0x3a0>
			for(int j = 0; j <= 32; ++j)
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	e017      	b.n	8000fcc <change_digit_1+0x394>
				screen[x+5113+i*480+j] = nine_picture_1[k++];
 8000f9c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f9e:	1c4b      	adds	r3, r1, #1
 8000fa0:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fa4:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000fa8:	441a      	add	r2, r3
 8000faa:	68f8      	ldr	r0, [r7, #12]
 8000fac:	4603      	mov	r3, r0
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	1a1b      	subs	r3, r3, r0
 8000fb2:	015b      	lsls	r3, r3, #5
 8000fb4:	441a      	add	r2, r3
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <change_digit_1+0x3cc>)
 8000fbc:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000fc0:	4a0f      	ldr	r2, [pc, #60]	; (8001000 <change_digit_1+0x3c8>)
 8000fc2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000fc6:	68bb      	ldr	r3, [r7, #8]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b20      	cmp	r3, #32
 8000fd0:	dde4      	ble.n	8000f9c <change_digit_1+0x364>
		for(int i = 0; i <= 57; ++i)
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b39      	cmp	r3, #57	; 0x39
 8000fdc:	dddb      	ble.n	8000f96 <change_digit_1+0x35e>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <change_digit_1+0x3d0>)
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <change_digit_1+0x3c8>)
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <change_digit_1+0x3d4>)
 8000fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <change_digit_1+0x3d4>)
 8000fea:	f043 0302 	orr.w	r3, r3, #2
 8000fee:	6253      	str	r3, [r2, #36]	; 0x24
}
 8000ff0:	bf00      	nop
 8000ff2:	3764      	adds	r7, #100	; 0x64
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr
 8000ffc:	0800aa58 	.word	0x0800aa58
 8001000:	2000001c 	.word	0x2000001c
 8001004:	080041ac 	.word	0x080041ac
 8001008:	40016904 	.word	0x40016904
 800100c:	40016800 	.word	0x40016800

08001010 <change_digit_2>:

void change_digit_2(int poz, int number)
{
 8001010:	b480      	push	{r7}
 8001012:	b099      	sub	sp, #100	; 0x64
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	int x = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	65fb      	str	r3, [r7, #92]	; 0x5c
	int k = 0;
 800101e:	2300      	movs	r3, #0
 8001020:	65bb      	str	r3, [r7, #88]	; 0x58

	if(poz==1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <change_digit_2+0x1c>
		x = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==2)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d101      	bne.n	8001036 <change_digit_2+0x26>
		x = 110;
 8001032:	236e      	movs	r3, #110	; 0x6e
 8001034:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==3)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d101      	bne.n	8001040 <change_digit_2+0x30>
		x = 246;
 800103c:	23f6      	movs	r3, #246	; 0xf6
 800103e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==4)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d102      	bne.n	800104c <change_digit_2+0x3c>
		x = 356;
 8001046:	f44f 73b2 	mov.w	r3, #356	; 0x164
 800104a:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(number==0)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d126      	bne.n	80010a0 <change_digit_2+0x90>
		for(int i = 0; i <= 173; ++i)
 8001052:	2300      	movs	r3, #0
 8001054:	657b      	str	r3, [r7, #84]	; 0x54
 8001056:	e020      	b.n	800109a <change_digit_2+0x8a>
			for(int j = 0; j <= 98; ++j)
 8001058:	2300      	movs	r3, #0
 800105a:	653b      	str	r3, [r7, #80]	; 0x50
 800105c:	e017      	b.n	800108e <change_digit_2+0x7e>
				screen[x+42253+i*480+j] = zero_picture_2[k++];
 800105e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001060:	1c4b      	adds	r3, r1, #1
 8001062:	65bb      	str	r3, [r7, #88]	; 0x58
 8001064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001066:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800106a:	441a      	add	r2, r3
 800106c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800106e:	4603      	mov	r3, r0
 8001070:	011b      	lsls	r3, r3, #4
 8001072:	1a1b      	subs	r3, r3, r0
 8001074:	015b      	lsls	r3, r3, #5
 8001076:	441a      	add	r2, r3
 8001078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800107a:	4413      	add	r3, r2
 800107c:	4aa0      	ldr	r2, [pc, #640]	; (8001300 <change_digit_2+0x2f0>)
 800107e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001082:	4aa0      	ldr	r2, [pc, #640]	; (8001304 <change_digit_2+0x2f4>)
 8001084:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001088:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800108a:	3301      	adds	r3, #1
 800108c:	653b      	str	r3, [r7, #80]	; 0x50
 800108e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001090:	2b62      	cmp	r3, #98	; 0x62
 8001092:	dde4      	ble.n	800105e <change_digit_2+0x4e>
		for(int i = 0; i <= 173; ++i)
 8001094:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001096:	3301      	adds	r3, #1
 8001098:	657b      	str	r3, [r7, #84]	; 0x54
 800109a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800109c:	2bad      	cmp	r3, #173	; 0xad
 800109e:	dddb      	ble.n	8001058 <change_digit_2+0x48>
	if(number==1)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d126      	bne.n	80010f4 <change_digit_2+0xe4>
		for(int i = 0; i <= 173; ++i)
 80010a6:	2300      	movs	r3, #0
 80010a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010aa:	e020      	b.n	80010ee <change_digit_2+0xde>
			for(int j = 0; j <= 98; ++j)
 80010ac:	2300      	movs	r3, #0
 80010ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80010b0:	e017      	b.n	80010e2 <change_digit_2+0xd2>
				screen[x+42253+i*480+j] = one_picture_2[k++];
 80010b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80010b4:	1c4b      	adds	r3, r1, #1
 80010b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80010b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010ba:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80010be:	441a      	add	r2, r3
 80010c0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80010c2:	4603      	mov	r3, r0
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	1a1b      	subs	r3, r3, r0
 80010c8:	015b      	lsls	r3, r3, #5
 80010ca:	441a      	add	r2, r3
 80010cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010ce:	4413      	add	r3, r2
 80010d0:	4a8d      	ldr	r2, [pc, #564]	; (8001308 <change_digit_2+0x2f8>)
 80010d2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80010d6:	4a8b      	ldr	r2, [pc, #556]	; (8001304 <change_digit_2+0x2f4>)
 80010d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80010dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010de:	3301      	adds	r3, #1
 80010e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80010e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80010e4:	2b62      	cmp	r3, #98	; 0x62
 80010e6:	dde4      	ble.n	80010b2 <change_digit_2+0xa2>
		for(int i = 0; i <= 173; ++i)
 80010e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010ea:	3301      	adds	r3, #1
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80010f0:	2bad      	cmp	r3, #173	; 0xad
 80010f2:	dddb      	ble.n	80010ac <change_digit_2+0x9c>
	if(number==2)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d126      	bne.n	8001148 <change_digit_2+0x138>
		for(int i = 0; i <= 173; ++i)
 80010fa:	2300      	movs	r3, #0
 80010fc:	647b      	str	r3, [r7, #68]	; 0x44
 80010fe:	e020      	b.n	8001142 <change_digit_2+0x132>
			for(int j = 0; j <= 98; ++j)
 8001100:	2300      	movs	r3, #0
 8001102:	643b      	str	r3, [r7, #64]	; 0x40
 8001104:	e017      	b.n	8001136 <change_digit_2+0x126>
				screen[x+42253+i*480+j] = two_picture_2[k++];
 8001106:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001108:	1c4b      	adds	r3, r1, #1
 800110a:	65bb      	str	r3, [r7, #88]	; 0x58
 800110c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800110e:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001112:	441a      	add	r2, r3
 8001114:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001116:	4603      	mov	r3, r0
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	1a1b      	subs	r3, r3, r0
 800111c:	015b      	lsls	r3, r3, #5
 800111e:	441a      	add	r2, r3
 8001120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001122:	4413      	add	r3, r2
 8001124:	4a79      	ldr	r2, [pc, #484]	; (800130c <change_digit_2+0x2fc>)
 8001126:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800112a:	4a76      	ldr	r2, [pc, #472]	; (8001304 <change_digit_2+0x2f4>)
 800112c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001132:	3301      	adds	r3, #1
 8001134:	643b      	str	r3, [r7, #64]	; 0x40
 8001136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001138:	2b62      	cmp	r3, #98	; 0x62
 800113a:	dde4      	ble.n	8001106 <change_digit_2+0xf6>
		for(int i = 0; i <= 173; ++i)
 800113c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800113e:	3301      	adds	r3, #1
 8001140:	647b      	str	r3, [r7, #68]	; 0x44
 8001142:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001144:	2bad      	cmp	r3, #173	; 0xad
 8001146:	dddb      	ble.n	8001100 <change_digit_2+0xf0>
	if(number==3)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	2b03      	cmp	r3, #3
 800114c:	d126      	bne.n	800119c <change_digit_2+0x18c>
		for(int i = 0; i <= 173; ++i)
 800114e:	2300      	movs	r3, #0
 8001150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001152:	e020      	b.n	8001196 <change_digit_2+0x186>
			for(int j = 0; j <= 98; ++j)
 8001154:	2300      	movs	r3, #0
 8001156:	63bb      	str	r3, [r7, #56]	; 0x38
 8001158:	e017      	b.n	800118a <change_digit_2+0x17a>
				screen[x+42253+i*480+j] = three_picture_2[k++];
 800115a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800115c:	1c4b      	adds	r3, r1, #1
 800115e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001162:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001166:	441a      	add	r2, r3
 8001168:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800116a:	4603      	mov	r3, r0
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	1a1b      	subs	r3, r3, r0
 8001170:	015b      	lsls	r3, r3, #5
 8001172:	441a      	add	r2, r3
 8001174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001176:	4413      	add	r3, r2
 8001178:	4a65      	ldr	r2, [pc, #404]	; (8001310 <change_digit_2+0x300>)
 800117a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800117e:	4a61      	ldr	r2, [pc, #388]	; (8001304 <change_digit_2+0x2f4>)
 8001180:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001186:	3301      	adds	r3, #1
 8001188:	63bb      	str	r3, [r7, #56]	; 0x38
 800118a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800118c:	2b62      	cmp	r3, #98	; 0x62
 800118e:	dde4      	ble.n	800115a <change_digit_2+0x14a>
		for(int i = 0; i <= 173; ++i)
 8001190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001192:	3301      	adds	r3, #1
 8001194:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001198:	2bad      	cmp	r3, #173	; 0xad
 800119a:	dddb      	ble.n	8001154 <change_digit_2+0x144>
	if(number==4)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d126      	bne.n	80011f0 <change_digit_2+0x1e0>
		for(int i = 0; i <= 173; ++i)
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
 80011a6:	e020      	b.n	80011ea <change_digit_2+0x1da>
			for(int j = 0; j <= 98; ++j)
 80011a8:	2300      	movs	r3, #0
 80011aa:	633b      	str	r3, [r7, #48]	; 0x30
 80011ac:	e017      	b.n	80011de <change_digit_2+0x1ce>
				screen[x+42253+i*480+j] = four_picture_2[k++];
 80011ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80011b0:	1c4b      	adds	r3, r1, #1
 80011b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80011b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b6:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80011ba:	441a      	add	r2, r3
 80011bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011be:	4603      	mov	r3, r0
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	1a1b      	subs	r3, r3, r0
 80011c4:	015b      	lsls	r3, r3, #5
 80011c6:	441a      	add	r2, r3
 80011c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ca:	4413      	add	r3, r2
 80011cc:	4a51      	ldr	r2, [pc, #324]	; (8001314 <change_digit_2+0x304>)
 80011ce:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80011d2:	4a4c      	ldr	r2, [pc, #304]	; (8001304 <change_digit_2+0x2f4>)
 80011d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80011d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011da:	3301      	adds	r3, #1
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
 80011de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e0:	2b62      	cmp	r3, #98	; 0x62
 80011e2:	dde4      	ble.n	80011ae <change_digit_2+0x19e>
		for(int i = 0; i <= 173; ++i)
 80011e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e6:	3301      	adds	r3, #1
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
 80011ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011ec:	2bad      	cmp	r3, #173	; 0xad
 80011ee:	dddb      	ble.n	80011a8 <change_digit_2+0x198>
	if(number==5)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d126      	bne.n	8001244 <change_digit_2+0x234>
		for(int i = 0; i <= 173; ++i)
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011fa:	e020      	b.n	800123e <change_digit_2+0x22e>
			for(int j = 0; j <= 98; ++j)
 80011fc:	2300      	movs	r3, #0
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001200:	e017      	b.n	8001232 <change_digit_2+0x222>
				screen[x+42253+i*480+j] = five_picture_2[k++];
 8001202:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001204:	1c4b      	adds	r3, r1, #1
 8001206:	65bb      	str	r3, [r7, #88]	; 0x58
 8001208:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800120a:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800120e:	441a      	add	r2, r3
 8001210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001212:	4603      	mov	r3, r0
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	1a1b      	subs	r3, r3, r0
 8001218:	015b      	lsls	r3, r3, #5
 800121a:	441a      	add	r2, r3
 800121c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121e:	4413      	add	r3, r2
 8001220:	4a3d      	ldr	r2, [pc, #244]	; (8001318 <change_digit_2+0x308>)
 8001222:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001226:	4a37      	ldr	r2, [pc, #220]	; (8001304 <change_digit_2+0x2f4>)
 8001228:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 800122c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800122e:	3301      	adds	r3, #1
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
 8001232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001234:	2b62      	cmp	r3, #98	; 0x62
 8001236:	dde4      	ble.n	8001202 <change_digit_2+0x1f2>
		for(int i = 0; i <= 173; ++i)
 8001238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800123a:	3301      	adds	r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	2bad      	cmp	r3, #173	; 0xad
 8001242:	dddb      	ble.n	80011fc <change_digit_2+0x1ec>
	if(number==6)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b06      	cmp	r3, #6
 8001248:	d126      	bne.n	8001298 <change_digit_2+0x288>
		for(int i = 0; i <= 173; ++i)
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
 800124e:	e020      	b.n	8001292 <change_digit_2+0x282>
			for(int j = 0; j <= 98; ++j)
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
 8001254:	e017      	b.n	8001286 <change_digit_2+0x276>
				screen[x+42253+i*480+j] = six_picture_2[k++];
 8001256:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001258:	1c4b      	adds	r3, r1, #1
 800125a:	65bb      	str	r3, [r7, #88]	; 0x58
 800125c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800125e:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001262:	441a      	add	r2, r3
 8001264:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001266:	4603      	mov	r3, r0
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	1a1b      	subs	r3, r3, r0
 800126c:	015b      	lsls	r3, r3, #5
 800126e:	441a      	add	r2, r3
 8001270:	6a3b      	ldr	r3, [r7, #32]
 8001272:	4413      	add	r3, r2
 8001274:	4a29      	ldr	r2, [pc, #164]	; (800131c <change_digit_2+0x30c>)
 8001276:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800127a:	4a22      	ldr	r2, [pc, #136]	; (8001304 <change_digit_2+0x2f4>)
 800127c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	3301      	adds	r3, #1
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	2b62      	cmp	r3, #98	; 0x62
 800128a:	dde4      	ble.n	8001256 <change_digit_2+0x246>
		for(int i = 0; i <= 173; ++i)
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	3301      	adds	r3, #1
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	2bad      	cmp	r3, #173	; 0xad
 8001296:	dddb      	ble.n	8001250 <change_digit_2+0x240>
	if(number==7)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b07      	cmp	r3, #7
 800129c:	d126      	bne.n	80012ec <change_digit_2+0x2dc>
		for(int i = 0; i <= 173; ++i)
 800129e:	2300      	movs	r3, #0
 80012a0:	61fb      	str	r3, [r7, #28]
 80012a2:	e020      	b.n	80012e6 <change_digit_2+0x2d6>
			for(int j = 0; j <= 98; ++j)
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e017      	b.n	80012da <change_digit_2+0x2ca>
				screen[x+42253+i*480+j] = seven_picture_2[k++];
 80012aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80012ac:	1c4b      	adds	r3, r1, #1
 80012ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80012b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b2:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80012b6:	441a      	add	r2, r3
 80012b8:	69f8      	ldr	r0, [r7, #28]
 80012ba:	4603      	mov	r3, r0
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	1a1b      	subs	r3, r3, r0
 80012c0:	015b      	lsls	r3, r3, #5
 80012c2:	441a      	add	r2, r3
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	4413      	add	r3, r2
 80012c8:	4a15      	ldr	r2, [pc, #84]	; (8001320 <change_digit_2+0x310>)
 80012ca:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80012ce:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <change_digit_2+0x2f4>)
 80012d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	3301      	adds	r3, #1
 80012d8:	61bb      	str	r3, [r7, #24]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	2b62      	cmp	r3, #98	; 0x62
 80012de:	dde4      	ble.n	80012aa <change_digit_2+0x29a>
		for(int i = 0; i <= 173; ++i)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	3301      	adds	r3, #1
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	2bad      	cmp	r3, #173	; 0xad
 80012ea:	dddb      	ble.n	80012a4 <change_digit_2+0x294>
	if(number==8)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d139      	bne.n	8001366 <change_digit_2+0x356>
		for(int i = 0; i <= 173; ++i)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e033      	b.n	8001360 <change_digit_2+0x350>
			for(int j = 0; j <= 98; ++j)
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
 80012fc:	e02a      	b.n	8001354 <change_digit_2+0x344>
 80012fe:	bf00      	nop
 8001300:	0804edec 	.word	0x0804edec
 8001304:	2000001c 	.word	0x2000001c
 8001308:	08024d08 	.word	0x08024d08
 800130c:	08046758 	.word	0x08046758
 8001310:	0803e0c4 	.word	0x0803e0c4
 8001314:	08013fe0 	.word	0x08013fe0
 8001318:	0800b94c 	.word	0x0800b94c
 800131c:	08035a30 	.word	0x08035a30
 8001320:	0802d39c 	.word	0x0802d39c
				screen[x+42253+i*480+j] = eigth_picture_2[k++];
 8001324:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001326:	1c4b      	adds	r3, r1, #1
 8001328:	65bb      	str	r3, [r7, #88]	; 0x58
 800132a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132c:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001330:	441a      	add	r2, r3
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	4603      	mov	r3, r0
 8001336:	011b      	lsls	r3, r3, #4
 8001338:	1a1b      	subs	r3, r3, r0
 800133a:	015b      	lsls	r3, r3, #5
 800133c:	441a      	add	r2, r3
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4413      	add	r3, r2
 8001342:	4a25      	ldr	r2, [pc, #148]	; (80013d8 <change_digit_2+0x3c8>)
 8001344:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001348:	4a24      	ldr	r2, [pc, #144]	; (80013dc <change_digit_2+0x3cc>)
 800134a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	3301      	adds	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b62      	cmp	r3, #98	; 0x62
 8001358:	dde4      	ble.n	8001324 <change_digit_2+0x314>
		for(int i = 0; i <= 173; ++i)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	2bad      	cmp	r3, #173	; 0xad
 8001364:	ddc8      	ble.n	80012f8 <change_digit_2+0x2e8>
	if(number==9)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2b09      	cmp	r3, #9
 800136a:	d126      	bne.n	80013ba <change_digit_2+0x3aa>
		for(int i = 0; i <= 173; ++i)
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	e020      	b.n	80013b4 <change_digit_2+0x3a4>
			for(int j = 0; j <= 98; ++j)
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	e017      	b.n	80013a8 <change_digit_2+0x398>
				screen[x+42253+i*480+j] = nine_picture_2[k++];
 8001378:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800137a:	1c4b      	adds	r3, r1, #1
 800137c:	65bb      	str	r3, [r7, #88]	; 0x58
 800137e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001380:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001384:	441a      	add	r2, r3
 8001386:	68f8      	ldr	r0, [r7, #12]
 8001388:	4603      	mov	r3, r0
 800138a:	011b      	lsls	r3, r3, #4
 800138c:	1a1b      	subs	r3, r3, r0
 800138e:	015b      	lsls	r3, r3, #5
 8001390:	441a      	add	r2, r3
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	4413      	add	r3, r2
 8001396:	4a12      	ldr	r2, [pc, #72]	; (80013e0 <change_digit_2+0x3d0>)
 8001398:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800139c:	4a0f      	ldr	r2, [pc, #60]	; (80013dc <change_digit_2+0x3cc>)
 800139e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3301      	adds	r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	2b62      	cmp	r3, #98	; 0x62
 80013ac:	dde4      	ble.n	8001378 <change_digit_2+0x368>
		for(int i = 0; i <= 173; ++i)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3301      	adds	r3, #1
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2bad      	cmp	r3, #173	; 0xad
 80013b8:	dddb      	ble.n	8001372 <change_digit_2+0x362>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <change_digit_2+0x3d4>)
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <change_digit_2+0x3cc>)
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 80013c0:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <change_digit_2+0x3d8>)
 80013c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c4:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <change_digit_2+0x3d8>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	6253      	str	r3, [r2, #36]	; 0x24
}
 80013cc:	bf00      	nop
 80013ce:	3764      	adds	r7, #100	; 0x64
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	08057480 	.word	0x08057480
 80013dc:	2000001c 	.word	0x2000001c
 80013e0:	0801c674 	.word	0x0801c674
 80013e4:	40016904 	.word	0x40016904
 80013e8:	40016800 	.word	0x40016800

080013ec <change_digit_3>:

void change_digit_3(int number)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b0c7      	sub	sp, #284	; 0x11c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	6018      	str	r0, [r3, #0]
	int k = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	if(number==0)
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f040 809c 	bne.w	800153e <change_digit_3+0x152>
	{
		for(int i = 0; i <= 57; ++i)
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800140c:	e029      	b.n	8001462 <change_digit_3+0x76>
			for(int j = 0; j <= 32; ++j)
 800140e:	2300      	movs	r3, #0
 8001410:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001414:	e01c      	b.n	8001450 <change_digit_3+0x64>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001416:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800141a:	1c53      	adds	r3, r2, #1
 800141c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001420:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001424:	460b      	mov	r3, r1
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	1a5b      	subs	r3, r3, r1
 800142a:	015b      	lsls	r3, r3, #5
 800142c:	4619      	mov	r1, r3
 800142e:	f241 3349 	movw	r3, #4937	; 0x1349
 8001432:	440b      	add	r3, r1
 8001434:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8001438:	440b      	add	r3, r1
 800143a:	49cd      	ldr	r1, [pc, #820]	; (8001770 <change_digit_3+0x384>)
 800143c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001440:	4acc      	ldr	r2, [pc, #816]	; (8001774 <change_digit_3+0x388>)
 8001442:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800144a:	3301      	adds	r3, #1
 800144c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001450:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001454:	2b20      	cmp	r3, #32
 8001456:	ddde      	ble.n	8001416 <change_digit_3+0x2a>
		for(int i = 0; i <= 57; ++i)
 8001458:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800145c:	3301      	adds	r3, #1
 800145e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8001462:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001466:	2b39      	cmp	r3, #57	; 0x39
 8001468:	ddd1      	ble.n	800140e <change_digit_3+0x22>
		k = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001476:	e029      	b.n	80014cc <change_digit_3+0xe0>
			for(int j = 0; j <= 32; ++j)
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800147e:	e01c      	b.n	80014ba <change_digit_3+0xce>
				screen[38+4861+i*480+j] = none_picture_3[k++];
 8001480:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001484:	1c53      	adds	r3, r2, #1
 8001486:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800148a:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800148e:	460b      	mov	r3, r1
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	1a5b      	subs	r3, r3, r1
 8001494:	015b      	lsls	r3, r3, #5
 8001496:	4619      	mov	r1, r3
 8001498:	f241 3323 	movw	r3, #4899	; 0x1323
 800149c:	440b      	add	r3, r1
 800149e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 80014a2:	440b      	add	r3, r1
 80014a4:	49b4      	ldr	r1, [pc, #720]	; (8001778 <change_digit_3+0x38c>)
 80014a6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80014aa:	4ab2      	ldr	r2, [pc, #712]	; (8001774 <change_digit_3+0x388>)
 80014ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80014b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014b4:	3301      	adds	r3, #1
 80014b6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80014be:	2b20      	cmp	r3, #32
 80014c0:	ddde      	ble.n	8001480 <change_digit_3+0x94>
		for(int i = 0; i <= 57; ++i)
 80014c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014c6:	3301      	adds	r3, #1
 80014c8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80014cc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80014d0:	2b39      	cmp	r3, #57	; 0x39
 80014d2:	ddd1      	ble.n	8001478 <change_digit_3+0x8c>
		k = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80014e0:	e029      	b.n	8001536 <change_digit_3+0x14a>
			for(int j = 0; j <= 32; ++j)
 80014e2:	2300      	movs	r3, #0
 80014e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80014e8:	e01c      	b.n	8001524 <change_digit_3+0x138>
				screen[4861+i*480+j] = none_picture_3[k++];
 80014ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014ee:	1c53      	adds	r3, r2, #1
 80014f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014f4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80014f8:	460b      	mov	r3, r1
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	1a5b      	subs	r3, r3, r1
 80014fe:	015b      	lsls	r3, r3, #5
 8001500:	4619      	mov	r1, r3
 8001502:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001506:	440b      	add	r3, r1
 8001508:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800150c:	440b      	add	r3, r1
 800150e:	499a      	ldr	r1, [pc, #616]	; (8001778 <change_digit_3+0x38c>)
 8001510:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001514:	4a97      	ldr	r2, [pc, #604]	; (8001774 <change_digit_3+0x388>)
 8001516:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800151a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800151e:	3301      	adds	r3, #1
 8001520:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001528:	2b20      	cmp	r3, #32
 800152a:	ddde      	ble.n	80014ea <change_digit_3+0xfe>
		for(int i = 0; i <= 57; ++i)
 800152c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001530:	3301      	adds	r3, #1
 8001532:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001536:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800153a:	2b39      	cmp	r3, #57	; 0x39
 800153c:	ddd1      	ble.n	80014e2 <change_digit_3+0xf6>
	}

	if(number==10)
 800153e:	1d3b      	adds	r3, r7, #4
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b0a      	cmp	r3, #10
 8001544:	f040 809c 	bne.w	8001680 <change_digit_3+0x294>
	{
		for(int i = 0; i <= 57; ++i)
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800154e:	e029      	b.n	80015a4 <change_digit_3+0x1b8>
			for(int j = 0; j <= 32; ++j)
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001556:	e01c      	b.n	8001592 <change_digit_3+0x1a6>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001558:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800155c:	1c53      	adds	r3, r2, #1
 800155e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001562:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001566:	460b      	mov	r3, r1
 8001568:	011b      	lsls	r3, r3, #4
 800156a:	1a5b      	subs	r3, r3, r1
 800156c:	015b      	lsls	r3, r3, #5
 800156e:	4619      	mov	r1, r3
 8001570:	f241 3349 	movw	r3, #4937	; 0x1349
 8001574:	440b      	add	r3, r1
 8001576:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800157a:	440b      	add	r3, r1
 800157c:	497c      	ldr	r1, [pc, #496]	; (8001770 <change_digit_3+0x384>)
 800157e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001582:	4a7c      	ldr	r2, [pc, #496]	; (8001774 <change_digit_3+0x388>)
 8001584:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800158c:	3301      	adds	r3, #1
 800158e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001596:	2b20      	cmp	r3, #32
 8001598:	ddde      	ble.n	8001558 <change_digit_3+0x16c>
		for(int i = 0; i <= 57; ++i)
 800159a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800159e:	3301      	adds	r3, #1
 80015a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015a4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80015a8:	2b39      	cmp	r3, #57	; 0x39
 80015aa:	ddd1      	ble.n	8001550 <change_digit_3+0x164>
		k = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80015b8:	e029      	b.n	800160e <change_digit_3+0x222>
			for(int j = 0; j <= 32; ++j)
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015c0:	e01c      	b.n	80015fc <change_digit_3+0x210>
				screen[38+4861+i*480+j] = one_picture_3[k++];
 80015c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015c6:	1c53      	adds	r3, r2, #1
 80015c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015cc:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80015d0:	460b      	mov	r3, r1
 80015d2:	011b      	lsls	r3, r3, #4
 80015d4:	1a5b      	subs	r3, r3, r1
 80015d6:	015b      	lsls	r3, r3, #5
 80015d8:	4619      	mov	r1, r3
 80015da:	f241 3323 	movw	r3, #4899	; 0x1323
 80015de:	440b      	add	r3, r1
 80015e0:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80015e4:	440b      	add	r3, r1
 80015e6:	4965      	ldr	r1, [pc, #404]	; (800177c <change_digit_3+0x390>)
 80015e8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80015ec:	4a61      	ldr	r2, [pc, #388]	; (8001774 <change_digit_3+0x388>)
 80015ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80015f2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80015f6:	3301      	adds	r3, #1
 80015f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80015fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001600:	2b20      	cmp	r3, #32
 8001602:	ddde      	ble.n	80015c2 <change_digit_3+0x1d6>
		for(int i = 0; i <= 57; ++i)
 8001604:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001608:	3301      	adds	r3, #1
 800160a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800160e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001612:	2b39      	cmp	r3, #57	; 0x39
 8001614:	ddd1      	ble.n	80015ba <change_digit_3+0x1ce>
		k = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001622:	e029      	b.n	8001678 <change_digit_3+0x28c>
			for(int j = 0; j <= 32; ++j)
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800162a:	e01c      	b.n	8001666 <change_digit_3+0x27a>
				screen[4861+i*480+j] = none_picture_3[k++];
 800162c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001630:	1c53      	adds	r3, r2, #1
 8001632:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001636:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800163a:	460b      	mov	r3, r1
 800163c:	011b      	lsls	r3, r3, #4
 800163e:	1a5b      	subs	r3, r3, r1
 8001640:	015b      	lsls	r3, r3, #5
 8001642:	4619      	mov	r1, r3
 8001644:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001648:	440b      	add	r3, r1
 800164a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800164e:	440b      	add	r3, r1
 8001650:	4949      	ldr	r1, [pc, #292]	; (8001778 <change_digit_3+0x38c>)
 8001652:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001656:	4a47      	ldr	r2, [pc, #284]	; (8001774 <change_digit_3+0x388>)
 8001658:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800165c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001660:	3301      	adds	r3, #1
 8001662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800166a:	2b20      	cmp	r3, #32
 800166c:	ddde      	ble.n	800162c <change_digit_3+0x240>
		for(int i = 0; i <= 57; ++i)
 800166e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001672:	3301      	adds	r3, #1
 8001674:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001678:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800167c:	2b39      	cmp	r3, #57	; 0x39
 800167e:	ddd1      	ble.n	8001624 <change_digit_3+0x238>
	}

	if(number==20)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b14      	cmp	r3, #20
 8001686:	f040 80a7 	bne.w	80017d8 <change_digit_3+0x3ec>
	{
		for(int i = 0; i <= 57; ++i)
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001690:	e029      	b.n	80016e6 <change_digit_3+0x2fa>
			for(int j = 0; j <= 32; ++j)
 8001692:	2300      	movs	r3, #0
 8001694:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001698:	e01c      	b.n	80016d4 <change_digit_3+0x2e8>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 800169a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800169e:	1c53      	adds	r3, r2, #1
 80016a0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016a4:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 80016a8:	460b      	mov	r3, r1
 80016aa:	011b      	lsls	r3, r3, #4
 80016ac:	1a5b      	subs	r3, r3, r1
 80016ae:	015b      	lsls	r3, r3, #5
 80016b0:	4619      	mov	r1, r3
 80016b2:	f241 3349 	movw	r3, #4937	; 0x1349
 80016b6:	440b      	add	r3, r1
 80016b8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80016bc:	440b      	add	r3, r1
 80016be:	492c      	ldr	r1, [pc, #176]	; (8001770 <change_digit_3+0x384>)
 80016c0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80016c4:	4a2b      	ldr	r2, [pc, #172]	; (8001774 <change_digit_3+0x388>)
 80016c6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80016ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80016ce:	3301      	adds	r3, #1
 80016d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80016d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80016d8:	2b20      	cmp	r3, #32
 80016da:	ddde      	ble.n	800169a <change_digit_3+0x2ae>
		for(int i = 0; i <= 57; ++i)
 80016dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016e0:	3301      	adds	r3, #1
 80016e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80016e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80016ea:	2b39      	cmp	r3, #57	; 0x39
 80016ec:	ddd1      	ble.n	8001692 <change_digit_3+0x2a6>
		k = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80016f4:	2300      	movs	r3, #0
 80016f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80016fa:	e029      	b.n	8001750 <change_digit_3+0x364>
			for(int j = 0; j <= 32; ++j)
 80016fc:	2300      	movs	r3, #0
 80016fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001702:	e01c      	b.n	800173e <change_digit_3+0x352>
				screen[38+4861+i*480+j] = two_picture_3[k++];
 8001704:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001708:	1c53      	adds	r3, r2, #1
 800170a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800170e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001712:	460b      	mov	r3, r1
 8001714:	011b      	lsls	r3, r3, #4
 8001716:	1a5b      	subs	r3, r3, r1
 8001718:	015b      	lsls	r3, r3, #5
 800171a:	4619      	mov	r1, r3
 800171c:	f241 3323 	movw	r3, #4899	; 0x1323
 8001720:	440b      	add	r3, r1
 8001722:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001726:	440b      	add	r3, r1
 8001728:	4915      	ldr	r1, [pc, #84]	; (8001780 <change_digit_3+0x394>)
 800172a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800172e:	4a11      	ldr	r2, [pc, #68]	; (8001774 <change_digit_3+0x388>)
 8001730:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001734:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001738:	3301      	adds	r3, #1
 800173a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800173e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001742:	2b20      	cmp	r3, #32
 8001744:	ddde      	ble.n	8001704 <change_digit_3+0x318>
		for(int i = 0; i <= 57; ++i)
 8001746:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800174a:	3301      	adds	r3, #1
 800174c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001754:	2b39      	cmp	r3, #57	; 0x39
 8001756:	ddd1      	ble.n	80016fc <change_digit_3+0x310>
		k = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001764:	e034      	b.n	80017d0 <change_digit_3+0x3e4>
			for(int j = 0; j <= 32; ++j)
 8001766:	2300      	movs	r3, #0
 8001768:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800176c:	e027      	b.n	80017be <change_digit_3+0x3d2>
 800176e:	bf00      	nop
 8001770:	080681a8 	.word	0x080681a8
 8001774:	2000001c 	.word	0x2000001c
 8001778:	080627f0 	.word	0x080627f0
 800177c:	080636e4 	.word	0x080636e4
 8001780:	080672b4 	.word	0x080672b4
				screen[4861+i*480+j] = none_picture_3[k++];
 8001784:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001788:	1c53      	adds	r3, r2, #1
 800178a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800178e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001792:	460b      	mov	r3, r1
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a5b      	subs	r3, r3, r1
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	4619      	mov	r1, r3
 800179c:	f241 23fd 	movw	r3, #4861	; 0x12fd
 80017a0:	440b      	add	r3, r1
 80017a2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80017a6:	440b      	add	r3, r1
 80017a8:	49cd      	ldr	r1, [pc, #820]	; (8001ae0 <change_digit_3+0x6f4>)
 80017aa:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80017ae:	4acd      	ldr	r2, [pc, #820]	; (8001ae4 <change_digit_3+0x6f8>)
 80017b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80017b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017b8:	3301      	adds	r3, #1
 80017ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	ddde      	ble.n	8001784 <change_digit_3+0x398>
		for(int i = 0; i <= 57; ++i)
 80017c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017ca:	3301      	adds	r3, #1
 80017cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80017d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80017d4:	2b39      	cmp	r3, #57	; 0x39
 80017d6:	ddc6      	ble.n	8001766 <change_digit_3+0x37a>
	}

	if(number==30)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b1e      	cmp	r3, #30
 80017de:	f040 809c 	bne.w	800191a <change_digit_3+0x52e>
	{
		for(int i = 0; i <= 57; ++i)
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80017e8:	e029      	b.n	800183e <change_digit_3+0x452>
			for(int j = 0; j <= 32; ++j)
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80017f0:	e01c      	b.n	800182c <change_digit_3+0x440>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80017f2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017f6:	1c53      	adds	r3, r2, #1
 80017f8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017fc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001800:	460b      	mov	r3, r1
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	015b      	lsls	r3, r3, #5
 8001808:	4619      	mov	r1, r3
 800180a:	f241 3349 	movw	r3, #4937	; 0x1349
 800180e:	440b      	add	r3, r1
 8001810:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001814:	440b      	add	r3, r1
 8001816:	49b4      	ldr	r1, [pc, #720]	; (8001ae8 <change_digit_3+0x6fc>)
 8001818:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800181c:	4ab1      	ldr	r2, [pc, #708]	; (8001ae4 <change_digit_3+0x6f8>)
 800181e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001822:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001826:	3301      	adds	r3, #1
 8001828:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800182c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001830:	2b20      	cmp	r3, #32
 8001832:	ddde      	ble.n	80017f2 <change_digit_3+0x406>
		for(int i = 0; i <= 57; ++i)
 8001834:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001838:	3301      	adds	r3, #1
 800183a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800183e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001842:	2b39      	cmp	r3, #57	; 0x39
 8001844:	ddd1      	ble.n	80017ea <change_digit_3+0x3fe>
		k = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001852:	e029      	b.n	80018a8 <change_digit_3+0x4bc>
			for(int j = 0; j <= 32; ++j)
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800185a:	e01c      	b.n	8001896 <change_digit_3+0x4aa>
				screen[38+4861+i*480+j] = three_picture_3[k++];
 800185c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001860:	1c53      	adds	r3, r2, #1
 8001862:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001866:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800186a:	460b      	mov	r3, r1
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	1a5b      	subs	r3, r3, r1
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	4619      	mov	r1, r3
 8001874:	f241 3323 	movw	r3, #4899	; 0x1323
 8001878:	440b      	add	r3, r1
 800187a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800187e:	440b      	add	r3, r1
 8001880:	499a      	ldr	r1, [pc, #616]	; (8001aec <change_digit_3+0x700>)
 8001882:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001886:	4a97      	ldr	r2, [pc, #604]	; (8001ae4 <change_digit_3+0x6f8>)
 8001888:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800188c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001890:	3301      	adds	r3, #1
 8001892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001896:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800189a:	2b20      	cmp	r3, #32
 800189c:	ddde      	ble.n	800185c <change_digit_3+0x470>
		for(int i = 0; i <= 57; ++i)
 800189e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018a2:	3301      	adds	r3, #1
 80018a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018ac:	2b39      	cmp	r3, #57	; 0x39
 80018ae:	ddd1      	ble.n	8001854 <change_digit_3+0x468>
		k = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80018bc:	e029      	b.n	8001912 <change_digit_3+0x526>
			for(int j = 0; j <= 32; ++j)
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80018c4:	e01c      	b.n	8001900 <change_digit_3+0x514>
				screen[4861+i*480+j] = none_picture_3[k++];
 80018c6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018ca:	1c53      	adds	r3, r2, #1
 80018cc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018d0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 80018d4:	460b      	mov	r3, r1
 80018d6:	011b      	lsls	r3, r3, #4
 80018d8:	1a5b      	subs	r3, r3, r1
 80018da:	015b      	lsls	r3, r3, #5
 80018dc:	4619      	mov	r1, r3
 80018de:	f241 23fd 	movw	r3, #4861	; 0x12fd
 80018e2:	440b      	add	r3, r1
 80018e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 80018e8:	440b      	add	r3, r1
 80018ea:	497d      	ldr	r1, [pc, #500]	; (8001ae0 <change_digit_3+0x6f4>)
 80018ec:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80018f0:	4a7c      	ldr	r2, [pc, #496]	; (8001ae4 <change_digit_3+0x6f8>)
 80018f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80018f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018fa:	3301      	adds	r3, #1
 80018fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001904:	2b20      	cmp	r3, #32
 8001906:	ddde      	ble.n	80018c6 <change_digit_3+0x4da>
		for(int i = 0; i <= 57; ++i)
 8001908:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800190c:	3301      	adds	r3, #1
 800190e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001912:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001916:	2b39      	cmp	r3, #57	; 0x39
 8001918:	ddd1      	ble.n	80018be <change_digit_3+0x4d2>
	}

	if(number==40)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b28      	cmp	r3, #40	; 0x28
 8001920:	f040 809c 	bne.w	8001a5c <change_digit_3+0x670>
	{
		for(int i = 0; i <= 57; ++i)
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800192a:	e029      	b.n	8001980 <change_digit_3+0x594>
			for(int j = 0; j <= 32; ++j)
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001932:	e01c      	b.n	800196e <change_digit_3+0x582>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001934:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001938:	1c53      	adds	r3, r2, #1
 800193a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800193e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001942:	460b      	mov	r3, r1
 8001944:	011b      	lsls	r3, r3, #4
 8001946:	1a5b      	subs	r3, r3, r1
 8001948:	015b      	lsls	r3, r3, #5
 800194a:	4619      	mov	r1, r3
 800194c:	f241 3349 	movw	r3, #4937	; 0x1349
 8001950:	440b      	add	r3, r1
 8001952:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001956:	440b      	add	r3, r1
 8001958:	4963      	ldr	r1, [pc, #396]	; (8001ae8 <change_digit_3+0x6fc>)
 800195a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800195e:	4a61      	ldr	r2, [pc, #388]	; (8001ae4 <change_digit_3+0x6f8>)
 8001960:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001968:	3301      	adds	r3, #1
 800196a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800196e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001972:	2b20      	cmp	r3, #32
 8001974:	ddde      	ble.n	8001934 <change_digit_3+0x548>
		for(int i = 0; i <= 57; ++i)
 8001976:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800197a:	3301      	adds	r3, #1
 800197c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001980:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001984:	2b39      	cmp	r3, #57	; 0x39
 8001986:	ddd1      	ble.n	800192c <change_digit_3+0x540>
		k = 0;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800198e:	2300      	movs	r3, #0
 8001990:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001994:	e029      	b.n	80019ea <change_digit_3+0x5fe>
			for(int j = 0; j <= 32; ++j)
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800199c:	e01c      	b.n	80019d8 <change_digit_3+0x5ec>
				screen[38+4861+i*480+j] = four_picture_3[k++];
 800199e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80019a2:	1c53      	adds	r3, r2, #1
 80019a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80019a8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80019ac:	460b      	mov	r3, r1
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a5b      	subs	r3, r3, r1
 80019b2:	015b      	lsls	r3, r3, #5
 80019b4:	4619      	mov	r1, r3
 80019b6:	f241 3323 	movw	r3, #4899	; 0x1323
 80019ba:	440b      	add	r3, r1
 80019bc:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80019c0:	440b      	add	r3, r1
 80019c2:	494b      	ldr	r1, [pc, #300]	; (8001af0 <change_digit_3+0x704>)
 80019c4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80019c8:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <change_digit_3+0x6f8>)
 80019ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80019ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019d2:	3301      	adds	r3, #1
 80019d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80019d8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80019dc:	2b20      	cmp	r3, #32
 80019de:	ddde      	ble.n	800199e <change_digit_3+0x5b2>
		for(int i = 0; i <= 57; ++i)
 80019e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019e4:	3301      	adds	r3, #1
 80019e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019ee:	2b39      	cmp	r3, #57	; 0x39
 80019f0:	ddd1      	ble.n	8001996 <change_digit_3+0x5aa>
		k = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80019fe:	e029      	b.n	8001a54 <change_digit_3+0x668>
			for(int j = 0; j <= 32; ++j)
 8001a00:	2300      	movs	r3, #0
 8001a02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a06:	e01c      	b.n	8001a42 <change_digit_3+0x656>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001a08:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a0c:	1c53      	adds	r3, r2, #1
 8001a0e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a12:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001a16:	460b      	mov	r3, r1
 8001a18:	011b      	lsls	r3, r3, #4
 8001a1a:	1a5b      	subs	r3, r3, r1
 8001a1c:	015b      	lsls	r3, r3, #5
 8001a1e:	4619      	mov	r1, r3
 8001a20:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001a24:	440b      	add	r3, r1
 8001a26:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001a2a:	440b      	add	r3, r1
 8001a2c:	492c      	ldr	r1, [pc, #176]	; (8001ae0 <change_digit_3+0x6f4>)
 8001a2e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001a32:	4a2c      	ldr	r2, [pc, #176]	; (8001ae4 <change_digit_3+0x6f8>)
 8001a34:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001a38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a46:	2b20      	cmp	r3, #32
 8001a48:	ddde      	ble.n	8001a08 <change_digit_3+0x61c>
		for(int i = 0; i <= 57; ++i)
 8001a4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a58:	2b39      	cmp	r3, #57	; 0x39
 8001a5a:	ddd1      	ble.n	8001a00 <change_digit_3+0x614>
	}

	if(number==50)
 8001a5c:	1d3b      	adds	r3, r7, #4
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b32      	cmp	r3, #50	; 0x32
 8001a62:	f040 80a6 	bne.w	8001bb2 <change_digit_3+0x7c6>
	{
		for(int i = 0; i <= 57; ++i)
 8001a66:	2300      	movs	r3, #0
 8001a68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a6c:	e029      	b.n	8001ac2 <change_digit_3+0x6d6>
			for(int j = 0; j <= 32; ++j)
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a74:	e01c      	b.n	8001ab0 <change_digit_3+0x6c4>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001a76:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a7a:	1c53      	adds	r3, r2, #1
 8001a7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a80:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001a84:	460b      	mov	r3, r1
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	1a5b      	subs	r3, r3, r1
 8001a8a:	015b      	lsls	r3, r3, #5
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f241 3349 	movw	r3, #4937	; 0x1349
 8001a92:	440b      	add	r3, r1
 8001a94:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001a98:	440b      	add	r3, r1
 8001a9a:	4913      	ldr	r1, [pc, #76]	; (8001ae8 <change_digit_3+0x6fc>)
 8001a9c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001aa0:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <change_digit_3+0x6f8>)
 8001aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001aa6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001aaa:	3301      	adds	r3, #1
 8001aac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ab0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	ddde      	ble.n	8001a76 <change_digit_3+0x68a>
		for(int i = 0; i <= 57; ++i)
 8001ab8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001abc:	3301      	adds	r3, #1
 8001abe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001ac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001ac6:	2b39      	cmp	r3, #57	; 0x39
 8001ac8:	ddd1      	ble.n	8001a6e <change_digit_3+0x682>
		k = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ad6:	e033      	b.n	8001b40 <change_digit_3+0x754>
			for(int j = 0; j <= 32; ++j)
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001ade:	e026      	b.n	8001b2e <change_digit_3+0x742>
 8001ae0:	080627f0 	.word	0x080627f0
 8001ae4:	2000001c 	.word	0x2000001c
 8001ae8:	080681a8 	.word	0x080681a8
 8001aec:	080663c0 	.word	0x080663c0
 8001af0:	08060a08 	.word	0x08060a08
				screen[38+4861+i*480+j] = five_picture_3[k++];
 8001af4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001af8:	1c53      	adds	r3, r2, #1
 8001afa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001b02:	460b      	mov	r3, r1
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	1a5b      	subs	r3, r3, r1
 8001b08:	015b      	lsls	r3, r3, #5
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f241 3323 	movw	r3, #4899	; 0x1323
 8001b10:	440b      	add	r3, r1
 8001b12:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001b16:	440b      	add	r3, r1
 8001b18:	49b0      	ldr	r1, [pc, #704]	; (8001ddc <change_digit_3+0x9f0>)
 8001b1a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b1e:	4ab0      	ldr	r2, [pc, #704]	; (8001de0 <change_digit_3+0x9f4>)
 8001b20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b28:	3301      	adds	r3, #1
 8001b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b32:	2b20      	cmp	r3, #32
 8001b34:	ddde      	ble.n	8001af4 <change_digit_3+0x708>
		for(int i = 0; i <= 57; ++i)
 8001b36:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b44:	2b39      	cmp	r3, #57	; 0x39
 8001b46:	ddc7      	ble.n	8001ad8 <change_digit_3+0x6ec>
		k = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001b54:	e029      	b.n	8001baa <change_digit_3+0x7be>
			for(int j = 0; j <= 32; ++j)
 8001b56:	2300      	movs	r3, #0
 8001b58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b5c:	e01c      	b.n	8001b98 <change_digit_3+0x7ac>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001b5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b62:	1c53      	adds	r3, r2, #1
 8001b64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b68:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a5b      	subs	r3, r3, r1
 8001b72:	015b      	lsls	r3, r3, #5
 8001b74:	4619      	mov	r1, r3
 8001b76:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001b7a:	440b      	add	r3, r1
 8001b7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001b80:	440b      	add	r3, r1
 8001b82:	4998      	ldr	r1, [pc, #608]	; (8001de4 <change_digit_3+0x9f8>)
 8001b84:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b88:	4a95      	ldr	r2, [pc, #596]	; (8001de0 <change_digit_3+0x9f4>)
 8001b8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b92:	3301      	adds	r3, #1
 8001b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	ddde      	ble.n	8001b5e <change_digit_3+0x772>
		for(int i = 0; i <= 57; ++i)
 8001ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001baa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bae:	2b39      	cmp	r3, #57	; 0x39
 8001bb0:	ddd1      	ble.n	8001b56 <change_digit_3+0x76a>
	}

	if(number==60)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2b3c      	cmp	r3, #60	; 0x3c
 8001bb8:	f040 8083 	bne.w	8001cc2 <change_digit_3+0x8d6>
	{
		for(int i = 0; i <= 57; ++i)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001bc2:	e024      	b.n	8001c0e <change_digit_3+0x822>
			for(int j = 0; j <= 32; ++j)
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bc8:	e019      	b.n	8001bfe <change_digit_3+0x812>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001bca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bce:	1c53      	adds	r3, r2, #1
 8001bd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001bd4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001bd8:	460b      	mov	r3, r1
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	1a5b      	subs	r3, r3, r1
 8001bde:	015b      	lsls	r3, r3, #5
 8001be0:	4619      	mov	r1, r3
 8001be2:	f241 3349 	movw	r3, #4937	; 0x1349
 8001be6:	440b      	add	r3, r1
 8001be8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001bea:	440b      	add	r3, r1
 8001bec:	497e      	ldr	r1, [pc, #504]	; (8001de8 <change_digit_3+0x9fc>)
 8001bee:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001bf2:	4a7b      	ldr	r2, [pc, #492]	; (8001de0 <change_digit_3+0x9f4>)
 8001bf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001bf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001bfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c00:	2b20      	cmp	r3, #32
 8001c02:	dde2      	ble.n	8001bca <change_digit_3+0x7de>
		for(int i = 0; i <= 57; ++i)
 8001c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c12:	2b39      	cmp	r3, #57	; 0x39
 8001c14:	ddd6      	ble.n	8001bc4 <change_digit_3+0x7d8>
		k = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c20:	e021      	b.n	8001c66 <change_digit_3+0x87a>
			for(int j = 0; j <= 32; ++j)
 8001c22:	2300      	movs	r3, #0
 8001c24:	677b      	str	r3, [r7, #116]	; 0x74
 8001c26:	e018      	b.n	8001c5a <change_digit_3+0x86e>
				screen[38+4861+i*480+j] = six_picture_3[k++];
 8001c28:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c2c:	1c53      	adds	r3, r2, #1
 8001c2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c32:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001c34:	460b      	mov	r3, r1
 8001c36:	011b      	lsls	r3, r3, #4
 8001c38:	1a5b      	subs	r3, r3, r1
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f241 3323 	movw	r3, #4899	; 0x1323
 8001c42:	440b      	add	r3, r1
 8001c44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001c46:	440b      	add	r3, r1
 8001c48:	4968      	ldr	r1, [pc, #416]	; (8001dec <change_digit_3+0xa00>)
 8001c4a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001c4e:	4a64      	ldr	r2, [pc, #400]	; (8001de0 <change_digit_3+0x9f4>)
 8001c50:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001c54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c56:	3301      	adds	r3, #1
 8001c58:	677b      	str	r3, [r7, #116]	; 0x74
 8001c5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	dde3      	ble.n	8001c28 <change_digit_3+0x83c>
		for(int i = 0; i <= 57; ++i)
 8001c60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c62:	3301      	adds	r3, #1
 8001c64:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c68:	2b39      	cmp	r3, #57	; 0x39
 8001c6a:	ddda      	ble.n	8001c22 <change_digit_3+0x836>
		k = 0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001c72:	2300      	movs	r3, #0
 8001c74:	673b      	str	r3, [r7, #112]	; 0x70
 8001c76:	e021      	b.n	8001cbc <change_digit_3+0x8d0>
			for(int j = 0; j <= 32; ++j)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c7c:	e018      	b.n	8001cb0 <change_digit_3+0x8c4>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001c7e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c82:	1c53      	adds	r3, r2, #1
 8001c84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c88:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	011b      	lsls	r3, r3, #4
 8001c8e:	1a5b      	subs	r3, r3, r1
 8001c90:	015b      	lsls	r3, r3, #5
 8001c92:	4619      	mov	r1, r3
 8001c94:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001c98:	440b      	add	r3, r1
 8001c9a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001c9c:	440b      	add	r3, r1
 8001c9e:	4951      	ldr	r1, [pc, #324]	; (8001de4 <change_digit_3+0x9f8>)
 8001ca0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <change_digit_3+0x9f4>)
 8001ca6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cac:	3301      	adds	r3, #1
 8001cae:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	dde3      	ble.n	8001c7e <change_digit_3+0x892>
		for(int i = 0; i <= 57; ++i)
 8001cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cb8:	3301      	adds	r3, #1
 8001cba:	673b      	str	r3, [r7, #112]	; 0x70
 8001cbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cbe:	2b39      	cmp	r3, #57	; 0x39
 8001cc0:	ddda      	ble.n	8001c78 <change_digit_3+0x88c>
	}

	if(number==70)
 8001cc2:	1d3b      	adds	r3, r7, #4
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b46      	cmp	r3, #70	; 0x46
 8001cc8:	d17d      	bne.n	8001dc6 <change_digit_3+0x9da>
	{
		for(int i = 0; i <= 57; ++i)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	66bb      	str	r3, [r7, #104]	; 0x68
 8001cce:	e021      	b.n	8001d14 <change_digit_3+0x928>
			for(int j = 0; j <= 32; ++j)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	667b      	str	r3, [r7, #100]	; 0x64
 8001cd4:	e018      	b.n	8001d08 <change_digit_3+0x91c>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001cd6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001cda:	1c53      	adds	r3, r2, #1
 8001cdc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ce0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	1a5b      	subs	r3, r3, r1
 8001ce8:	015b      	lsls	r3, r3, #5
 8001cea:	4619      	mov	r1, r3
 8001cec:	f241 3349 	movw	r3, #4937	; 0x1349
 8001cf0:	440b      	add	r3, r1
 8001cf2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001cf4:	440b      	add	r3, r1
 8001cf6:	493c      	ldr	r1, [pc, #240]	; (8001de8 <change_digit_3+0x9fc>)
 8001cf8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001cfc:	4a38      	ldr	r2, [pc, #224]	; (8001de0 <change_digit_3+0x9f4>)
 8001cfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d04:	3301      	adds	r3, #1
 8001d06:	667b      	str	r3, [r7, #100]	; 0x64
 8001d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	dde3      	ble.n	8001cd6 <change_digit_3+0x8ea>
		for(int i = 0; i <= 57; ++i)
 8001d0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d10:	3301      	adds	r3, #1
 8001d12:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d16:	2b39      	cmp	r3, #57	; 0x39
 8001d18:	ddda      	ble.n	8001cd0 <change_digit_3+0x8e4>
		k = 0;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001d20:	2300      	movs	r3, #0
 8001d22:	663b      	str	r3, [r7, #96]	; 0x60
 8001d24:	e021      	b.n	8001d6a <change_digit_3+0x97e>
			for(int j = 0; j <= 32; ++j)
 8001d26:	2300      	movs	r3, #0
 8001d28:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d2a:	e018      	b.n	8001d5e <change_digit_3+0x972>
				screen[38+4861+i*480+j] = seven_picture_3[k++];
 8001d2c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d30:	1c53      	adds	r3, r2, #1
 8001d32:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001d36:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001d38:	460b      	mov	r3, r1
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	1a5b      	subs	r3, r3, r1
 8001d3e:	015b      	lsls	r3, r3, #5
 8001d40:	4619      	mov	r1, r3
 8001d42:	f241 3323 	movw	r3, #4899	; 0x1323
 8001d46:	440b      	add	r3, r1
 8001d48:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001d4a:	440b      	add	r3, r1
 8001d4c:	4928      	ldr	r1, [pc, #160]	; (8001df0 <change_digit_3+0xa04>)
 8001d4e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d52:	4a23      	ldr	r2, [pc, #140]	; (8001de0 <change_digit_3+0x9f4>)
 8001d54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d60:	2b20      	cmp	r3, #32
 8001d62:	dde3      	ble.n	8001d2c <change_digit_3+0x940>
		for(int i = 0; i <= 57; ++i)
 8001d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d66:	3301      	adds	r3, #1
 8001d68:	663b      	str	r3, [r7, #96]	; 0x60
 8001d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6c:	2b39      	cmp	r3, #57	; 0x39
 8001d6e:	ddda      	ble.n	8001d26 <change_digit_3+0x93a>
		k = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001d76:	2300      	movs	r3, #0
 8001d78:	65bb      	str	r3, [r7, #88]	; 0x58
 8001d7a:	e021      	b.n	8001dc0 <change_digit_3+0x9d4>
			for(int j = 0; j <= 32; ++j)
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	657b      	str	r3, [r7, #84]	; 0x54
 8001d80:	e018      	b.n	8001db4 <change_digit_3+0x9c8>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001d82:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d86:	1c53      	adds	r3, r2, #1
 8001d88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001d8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001d8e:	460b      	mov	r3, r1
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	1a5b      	subs	r3, r3, r1
 8001d94:	015b      	lsls	r3, r3, #5
 8001d96:	4619      	mov	r1, r3
 8001d98:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001d9c:	440b      	add	r3, r1
 8001d9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001da0:	440b      	add	r3, r1
 8001da2:	4910      	ldr	r1, [pc, #64]	; (8001de4 <change_digit_3+0x9f8>)
 8001da4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001da8:	4a0d      	ldr	r2, [pc, #52]	; (8001de0 <change_digit_3+0x9f4>)
 8001daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db0:	3301      	adds	r3, #1
 8001db2:	657b      	str	r3, [r7, #84]	; 0x54
 8001db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001db6:	2b20      	cmp	r3, #32
 8001db8:	dde3      	ble.n	8001d82 <change_digit_3+0x996>
		for(int i = 0; i <= 57; ++i)
 8001dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dc2:	2b39      	cmp	r3, #57	; 0x39
 8001dc4:	ddda      	ble.n	8001d7c <change_digit_3+0x990>
	}

	if(number==80)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b50      	cmp	r3, #80	; 0x50
 8001dcc:	f040 808a 	bne.w	8001ee4 <change_digit_3+0xaf8>
	{
		for(int i = 0; i <= 57; ++i)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	653b      	str	r3, [r7, #80]	; 0x50
 8001dd4:	e02d      	b.n	8001e32 <change_digit_3+0xa46>
			for(int j = 0; j <= 32; ++j)
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001dda:	e024      	b.n	8001e26 <change_digit_3+0xa3a>
 8001ddc:	0805fb14 	.word	0x0805fb14
 8001de0:	2000001c 	.word	0x2000001c
 8001de4:	080627f0 	.word	0x080627f0
 8001de8:	080681a8 	.word	0x080681a8
 8001dec:	080654cc 	.word	0x080654cc
 8001df0:	080645d8 	.word	0x080645d8
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001df4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001df8:	1c53      	adds	r3, r2, #1
 8001dfa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001dfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e00:	460b      	mov	r3, r1
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	1a5b      	subs	r3, r3, r1
 8001e06:	015b      	lsls	r3, r3, #5
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f241 3349 	movw	r3, #4937	; 0x1349
 8001e0e:	440b      	add	r3, r1
 8001e10:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e12:	440b      	add	r3, r1
 8001e14:	49b1      	ldr	r1, [pc, #708]	; (80020dc <change_digit_3+0xcf0>)
 8001e16:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e1a:	4ab1      	ldr	r2, [pc, #708]	; (80020e0 <change_digit_3+0xcf4>)
 8001e1c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e22:	3301      	adds	r3, #1
 8001e24:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	dde3      	ble.n	8001df4 <change_digit_3+0xa08>
		for(int i = 0; i <= 57; ++i)
 8001e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e2e:	3301      	adds	r3, #1
 8001e30:	653b      	str	r3, [r7, #80]	; 0x50
 8001e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e34:	2b39      	cmp	r3, #57	; 0x39
 8001e36:	ddce      	ble.n	8001dd6 <change_digit_3+0x9ea>
		k = 0;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e42:	e021      	b.n	8001e88 <change_digit_3+0xa9c>
			for(int j = 0; j <= 32; ++j)
 8001e44:	2300      	movs	r3, #0
 8001e46:	647b      	str	r3, [r7, #68]	; 0x44
 8001e48:	e018      	b.n	8001e7c <change_digit_3+0xa90>
				screen[38+4861+i*480+j] = eigth_picture_3[k++];
 8001e4a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e4e:	1c53      	adds	r3, r2, #1
 8001e50:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001e54:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001e56:	460b      	mov	r3, r1
 8001e58:	011b      	lsls	r3, r3, #4
 8001e5a:	1a5b      	subs	r3, r3, r1
 8001e5c:	015b      	lsls	r3, r3, #5
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f241 3323 	movw	r3, #4899	; 0x1323
 8001e64:	440b      	add	r3, r1
 8001e66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001e68:	440b      	add	r3, r1
 8001e6a:	499e      	ldr	r1, [pc, #632]	; (80020e4 <change_digit_3+0xcf8>)
 8001e6c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e70:	4a9b      	ldr	r2, [pc, #620]	; (80020e0 <change_digit_3+0xcf4>)
 8001e72:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e78:	3301      	adds	r3, #1
 8001e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	dde3      	ble.n	8001e4a <change_digit_3+0xa5e>
		for(int i = 0; i <= 57; ++i)
 8001e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e84:	3301      	adds	r3, #1
 8001e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e8a:	2b39      	cmp	r3, #57	; 0x39
 8001e8c:	ddda      	ble.n	8001e44 <change_digit_3+0xa58>
		k = 0;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001e94:	2300      	movs	r3, #0
 8001e96:	643b      	str	r3, [r7, #64]	; 0x40
 8001e98:	e021      	b.n	8001ede <change_digit_3+0xaf2>
			for(int j = 0; j <= 32; ++j)
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e9e:	e018      	b.n	8001ed2 <change_digit_3+0xae6>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001ea0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ea4:	1c53      	adds	r3, r2, #1
 8001ea6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001eaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001eac:	460b      	mov	r3, r1
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a5b      	subs	r3, r3, r1
 8001eb2:	015b      	lsls	r3, r3, #5
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001eba:	440b      	add	r3, r1
 8001ebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ebe:	440b      	add	r3, r1
 8001ec0:	4989      	ldr	r1, [pc, #548]	; (80020e8 <change_digit_3+0xcfc>)
 8001ec2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ec6:	4a86      	ldr	r2, [pc, #536]	; (80020e0 <change_digit_3+0xcf4>)
 8001ec8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ece:	3301      	adds	r3, #1
 8001ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ed2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	dde3      	ble.n	8001ea0 <change_digit_3+0xab4>
		for(int i = 0; i <= 57; ++i)
 8001ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eda:	3301      	adds	r3, #1
 8001edc:	643b      	str	r3, [r7, #64]	; 0x40
 8001ede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ee0:	2b39      	cmp	r3, #57	; 0x39
 8001ee2:	ddda      	ble.n	8001e9a <change_digit_3+0xaae>
	}

	if(number==90)
 8001ee4:	1d3b      	adds	r3, r7, #4
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b5a      	cmp	r3, #90	; 0x5a
 8001eea:	d17d      	bne.n	8001fe8 <change_digit_3+0xbfc>
	{
		for(int i = 0; i <= 57; ++i)
 8001eec:	2300      	movs	r3, #0
 8001eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ef0:	e021      	b.n	8001f36 <change_digit_3+0xb4a>
			for(int j = 0; j <= 32; ++j)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ef6:	e018      	b.n	8001f2a <change_digit_3+0xb3e>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001ef8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001efc:	1c53      	adds	r3, r2, #1
 8001efe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f04:	460b      	mov	r3, r1
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a5b      	subs	r3, r3, r1
 8001f0a:	015b      	lsls	r3, r3, #5
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f241 3349 	movw	r3, #4937	; 0x1349
 8001f12:	440b      	add	r3, r1
 8001f14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f16:	440b      	add	r3, r1
 8001f18:	4970      	ldr	r1, [pc, #448]	; (80020dc <change_digit_3+0xcf0>)
 8001f1a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f1e:	4a70      	ldr	r2, [pc, #448]	; (80020e0 <change_digit_3+0xcf4>)
 8001f20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f26:	3301      	adds	r3, #1
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2c:	2b20      	cmp	r3, #32
 8001f2e:	dde3      	ble.n	8001ef8 <change_digit_3+0xb0c>
		for(int i = 0; i <= 57; ++i)
 8001f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f32:	3301      	adds	r3, #1
 8001f34:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	2b39      	cmp	r3, #57	; 0x39
 8001f3a:	ddda      	ble.n	8001ef2 <change_digit_3+0xb06>
		k = 0;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001f42:	2300      	movs	r3, #0
 8001f44:	633b      	str	r3, [r7, #48]	; 0x30
 8001f46:	e021      	b.n	8001f8c <change_digit_3+0xba0>
			for(int j = 0; j <= 32; ++j)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4c:	e018      	b.n	8001f80 <change_digit_3+0xb94>
				screen[38+4861+i*480+j] = nine_picture_3[k++];
 8001f4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f52:	1c53      	adds	r3, r2, #1
 8001f54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	1a5b      	subs	r3, r3, r1
 8001f60:	015b      	lsls	r3, r3, #5
 8001f62:	4619      	mov	r1, r3
 8001f64:	f241 3323 	movw	r3, #4899	; 0x1323
 8001f68:	440b      	add	r3, r1
 8001f6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f6c:	440b      	add	r3, r1
 8001f6e:	495f      	ldr	r1, [pc, #380]	; (80020ec <change_digit_3+0xd00>)
 8001f70:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f74:	4a5a      	ldr	r2, [pc, #360]	; (80020e0 <change_digit_3+0xcf4>)
 8001f76:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f82:	2b20      	cmp	r3, #32
 8001f84:	dde3      	ble.n	8001f4e <change_digit_3+0xb62>
		for(int i = 0; i <= 57; ++i)
 8001f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f88:	3301      	adds	r3, #1
 8001f8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f8e:	2b39      	cmp	r3, #57	; 0x39
 8001f90:	ddda      	ble.n	8001f48 <change_digit_3+0xb5c>
		k = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001f98:	2300      	movs	r3, #0
 8001f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f9c:	e021      	b.n	8001fe2 <change_digit_3+0xbf6>
			for(int j = 0; j <= 32; ++j)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa2:	e018      	b.n	8001fd6 <change_digit_3+0xbea>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001fa4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fa8:	1c53      	adds	r3, r2, #1
 8001faa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001fae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	1a5b      	subs	r3, r3, r1
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001fbe:	440b      	add	r3, r1
 8001fc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fc2:	440b      	add	r3, r1
 8001fc4:	4948      	ldr	r1, [pc, #288]	; (80020e8 <change_digit_3+0xcfc>)
 8001fc6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001fca:	4a45      	ldr	r2, [pc, #276]	; (80020e0 <change_digit_3+0xcf4>)
 8001fcc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	2b20      	cmp	r3, #32
 8001fda:	dde3      	ble.n	8001fa4 <change_digit_3+0xbb8>
		for(int i = 0; i <= 57; ++i)
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	3301      	adds	r3, #1
 8001fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	2b39      	cmp	r3, #57	; 0x39
 8001fe6:	ddda      	ble.n	8001f9e <change_digit_3+0xbb2>
	}

	if(number==100)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2b64      	cmp	r3, #100	; 0x64
 8001fee:	f040 80b1 	bne.w	8002154 <change_digit_3+0xd68>
	{
		for(int i = 0; i <= 57; ++i)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
 8001ff6:	e021      	b.n	800203c <change_digit_3+0xc50>
			for(int j = 0; j <= 32; ++j)
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
 8001ffc:	e018      	b.n	8002030 <change_digit_3+0xc44>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001ffe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002002:	1c53      	adds	r3, r2, #1
 8002004:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002008:	6a39      	ldr	r1, [r7, #32]
 800200a:	460b      	mov	r3, r1
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	1a5b      	subs	r3, r3, r1
 8002010:	015b      	lsls	r3, r3, #5
 8002012:	4619      	mov	r1, r3
 8002014:	f241 3349 	movw	r3, #4937	; 0x1349
 8002018:	440b      	add	r3, r1
 800201a:	69f9      	ldr	r1, [r7, #28]
 800201c:	440b      	add	r3, r1
 800201e:	492f      	ldr	r1, [pc, #188]	; (80020dc <change_digit_3+0xcf0>)
 8002020:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002024:	4a2e      	ldr	r2, [pc, #184]	; (80020e0 <change_digit_3+0xcf4>)
 8002026:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3301      	adds	r3, #1
 800202e:	61fb      	str	r3, [r7, #28]
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	2b20      	cmp	r3, #32
 8002034:	dde3      	ble.n	8001ffe <change_digit_3+0xc12>
		for(int i = 0; i <= 57; ++i)
 8002036:	6a3b      	ldr	r3, [r7, #32]
 8002038:	3301      	adds	r3, #1
 800203a:	623b      	str	r3, [r7, #32]
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	2b39      	cmp	r3, #57	; 0x39
 8002040:	ddda      	ble.n	8001ff8 <change_digit_3+0xc0c>
		k = 0;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8002048:	f107 0318 	add.w	r3, r7, #24
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	e031      	b.n	80020b6 <change_digit_3+0xcca>
			for(int j = 0; j <= 32; ++j)
 8002052:	f107 0314 	add.w	r3, r7, #20
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
 800205a:	e020      	b.n	800209e <change_digit_3+0xcb2>
				screen[38+4861+i*480+j] = zero_picture_3[k++];
 800205c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002060:	1c53      	adds	r3, r2, #1
 8002062:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002066:	f107 0318 	add.w	r3, r7, #24
 800206a:	6819      	ldr	r1, [r3, #0]
 800206c:	460b      	mov	r3, r1
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	1a5b      	subs	r3, r3, r1
 8002072:	015b      	lsls	r3, r3, #5
 8002074:	4619      	mov	r1, r3
 8002076:	f241 3323 	movw	r3, #4899	; 0x1323
 800207a:	440b      	add	r3, r1
 800207c:	f107 0114 	add.w	r1, r7, #20
 8002080:	6809      	ldr	r1, [r1, #0]
 8002082:	440b      	add	r3, r1
 8002084:	4915      	ldr	r1, [pc, #84]	; (80020dc <change_digit_3+0xcf0>)
 8002086:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800208a:	4a15      	ldr	r2, [pc, #84]	; (80020e0 <change_digit_3+0xcf4>)
 800208c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002090:	f107 0314 	add.w	r3, r7, #20
 8002094:	f107 0214 	add.w	r2, r7, #20
 8002098:	6812      	ldr	r2, [r2, #0]
 800209a:	3201      	adds	r2, #1
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	ddd9      	ble.n	800205c <change_digit_3+0xc70>
		for(int i = 0; i <= 57; ++i)
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	f107 0218 	add.w	r2, r7, #24
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	3201      	adds	r2, #1
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	f107 0318 	add.w	r3, r7, #24
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2b39      	cmp	r3, #57	; 0x39
 80020be:	ddc8      	ble.n	8002052 <change_digit_3+0xc66>
		k = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	e03c      	b.n	800214a <change_digit_3+0xd5e>
			for(int j = 0; j <= 32; ++j)
 80020d0:	f107 030c 	add.w	r3, r7, #12
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	e02b      	b.n	8002132 <change_digit_3+0xd46>
 80020da:	bf00      	nop
 80020dc:	080681a8 	.word	0x080681a8
 80020e0:	2000001c 	.word	0x2000001c
 80020e4:	0806909c 	.word	0x0806909c
 80020e8:	080627f0 	.word	0x080627f0
 80020ec:	080618fc 	.word	0x080618fc
				screen[4861+i*480+j] = one_picture_3[k++];
 80020f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020f4:	1c53      	adds	r3, r2, #1
 80020f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80020fa:	f107 0310 	add.w	r3, r7, #16
 80020fe:	6819      	ldr	r1, [r3, #0]
 8002100:	460b      	mov	r3, r1
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a5b      	subs	r3, r3, r1
 8002106:	015b      	lsls	r3, r3, #5
 8002108:	4619      	mov	r1, r3
 800210a:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800210e:	440b      	add	r3, r1
 8002110:	f107 010c 	add.w	r1, r7, #12
 8002114:	6809      	ldr	r1, [r1, #0]
 8002116:	440b      	add	r3, r1
 8002118:	4916      	ldr	r1, [pc, #88]	; (8002174 <change_digit_3+0xd88>)
 800211a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800211e:	4a16      	ldr	r2, [pc, #88]	; (8002178 <change_digit_3+0xd8c>)
 8002120:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	f107 020c 	add.w	r2, r7, #12
 800212c:	6812      	ldr	r2, [r2, #0]
 800212e:	3201      	adds	r2, #1
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	f107 030c 	add.w	r3, r7, #12
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b20      	cmp	r3, #32
 800213a:	ddd9      	ble.n	80020f0 <change_digit_3+0xd04>
		for(int i = 0; i <= 57; ++i)
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	f107 0210 	add.w	r2, r7, #16
 8002144:	6812      	ldr	r2, [r2, #0]
 8002146:	3201      	adds	r2, #1
 8002148:	601a      	str	r2, [r3, #0]
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b39      	cmp	r3, #57	; 0x39
 8002152:	ddbd      	ble.n	80020d0 <change_digit_3+0xce4>
	}

	LTDC_Layer2->CFBAR = (uint32_t)screen;
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <change_digit_3+0xd90>)
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <change_digit_3+0xd8c>)
 8002158:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 800215a:	4b09      	ldr	r3, [pc, #36]	; (8002180 <change_digit_3+0xd94>)
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	4a08      	ldr	r2, [pc, #32]	; (8002180 <change_digit_3+0xd94>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6253      	str	r3, [r2, #36]	; 0x24
}
 8002166:	bf00      	nop
 8002168:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	080636e4 	.word	0x080636e4
 8002178:	2000001c 	.word	0x2000001c
 800217c:	40016904 	.word	0x40016904
 8002180:	40016800 	.word	0x40016800

08002184 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
	++cnt;
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <SysTick_Handler+0xe8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3301      	adds	r3, #1
 800218e:	4a37      	ldr	r2, [pc, #220]	; (800226c <SysTick_Handler+0xe8>)
 8002190:	6013      	str	r3, [r2, #0]
	// 600000 - 1.5%
	// 599000 - 1.3%
	// 592500 - 0.38%
	// 590000 - %
	if(cnt == 590000)
 8002192:	4b36      	ldr	r3, [pc, #216]	; (800226c <SysTick_Handler+0xe8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a36      	ldr	r2, [pc, #216]	; (8002270 <SysTick_Handler+0xec>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d164      	bne.n	8002266 <SysTick_Handler+0xe2>
	{
		cnt = 136;
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <SysTick_Handler+0xe8>)
 800219e:	2288      	movs	r2, #136	; 0x88
 80021a0:	601a      	str	r2, [r3, #0]
		++minute;
 80021a2:	4b34      	ldr	r3, [pc, #208]	; (8002274 <SysTick_Handler+0xf0>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4b32      	ldr	r3, [pc, #200]	; (8002274 <SysTick_Handler+0xf0>)
 80021ac:	701a      	strb	r2, [r3, #0]
		if(minute == 10)
 80021ae:	4b31      	ldr	r3, [pc, #196]	; (8002274 <SysTick_Handler+0xf0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b0a      	cmp	r3, #10
 80021b4:	d151      	bne.n	800225a <SysTick_Handler+0xd6>
		{
			cnt += 278;
 80021b6:	4b2d      	ldr	r3, [pc, #180]	; (800226c <SysTick_Handler+0xe8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f503 738b 	add.w	r3, r3, #278	; 0x116
 80021be:	4a2b      	ldr	r2, [pc, #172]	; (800226c <SysTick_Handler+0xe8>)
 80021c0:	6013      	str	r3, [r2, #0]
			minute = 0;
 80021c2:	4b2c      	ldr	r3, [pc, #176]	; (8002274 <SysTick_Handler+0xf0>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	701a      	strb	r2, [r3, #0]
			++minute_2;
 80021c8:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <SysTick_Handler+0xf4>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	3301      	adds	r3, #1
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <SysTick_Handler+0xf4>)
 80021d2:	701a      	strb	r2, [r3, #0]
			change_digit_2(3,minute_2);
 80021d4:	4b28      	ldr	r3, [pc, #160]	; (8002278 <SysTick_Handler+0xf4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	2003      	movs	r0, #3
 80021dc:	f7fe ff18 	bl	8001010 <change_digit_2>
			if(minute_2 == 6)
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <SysTick_Handler+0xf4>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b06      	cmp	r3, #6
 80021e6:	d134      	bne.n	8002252 <SysTick_Handler+0xce>
			{
				cnt += 269;
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <SysTick_Handler+0xe8>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f203 130d 	addw	r3, r3, #269	; 0x10d
 80021f0:	4a1e      	ldr	r2, [pc, #120]	; (800226c <SysTick_Handler+0xe8>)
 80021f2:	6013      	str	r3, [r2, #0]
				minute_2 = 0;
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <SysTick_Handler+0xf4>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
				++hour;
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <SysTick_Handler+0xf8>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	3301      	adds	r3, #1
 8002200:	b2da      	uxtb	r2, r3
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <SysTick_Handler+0xf8>)
 8002204:	701a      	strb	r2, [r3, #0]
				change_digit_2(2,hour);
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <SysTick_Handler+0xf8>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	4619      	mov	r1, r3
 800220c:	2002      	movs	r0, #2
 800220e:	f7fe feff 	bl	8001010 <change_digit_2>
				if(hour == 10)
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <SysTick_Handler+0xf8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b0a      	cmp	r3, #10
 8002218:	d117      	bne.n	800224a <SysTick_Handler+0xc6>
				{
					cnt += 136;
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <SysTick_Handler+0xe8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3388      	adds	r3, #136	; 0x88
 8002220:	4a12      	ldr	r2, [pc, #72]	; (800226c <SysTick_Handler+0xe8>)
 8002222:	6013      	str	r3, [r2, #0]
					hour = 0;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <SysTick_Handler+0xf8>)
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
					++hour_2;
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <SysTick_Handler+0xfc>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <SysTick_Handler+0xfc>)
 8002234:	701a      	strb	r2, [r3, #0]
					change_digit_2(1,hour_2);
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <SysTick_Handler+0xfc>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4619      	mov	r1, r3
 800223c:	2001      	movs	r0, #1
 800223e:	f7fe fee7 	bl	8001010 <change_digit_2>
					change_digit_2(2,0);
 8002242:	2100      	movs	r1, #0
 8002244:	2002      	movs	r0, #2
 8002246:	f7fe fee3 	bl	8001010 <change_digit_2>
				}
				change_digit_2(3,0);
 800224a:	2100      	movs	r1, #0
 800224c:	2003      	movs	r0, #3
 800224e:	f7fe fedf 	bl	8001010 <change_digit_2>
			}
			change_digit_2(4,0);
 8002252:	2100      	movs	r1, #0
 8002254:	2004      	movs	r0, #4
 8002256:	f7fe fedb 	bl	8001010 <change_digit_2>
		}
		change_digit_2(4,minute);
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <SysTick_Handler+0xf0>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	4619      	mov	r1, r3
 8002260:	2004      	movs	r0, #4
 8002262:	f7fe fed5 	bl	8001010 <change_digit_2>
	}
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	2003fc1c 	.word	0x2003fc1c
 8002270:	000900b0 	.word	0x000900b0
 8002274:	2003fc20 	.word	0x2003fc20
 8002278:	2003fc21 	.word	0x2003fc21
 800227c:	2003fc22 	.word	0x2003fc22
 8002280:	2003fc23 	.word	0x2003fc23

08002284 <main>:

int main(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
	initialization();
 800228a:	f7fe f809 	bl	80002a0 <initialization>

	// Initialization picture
	LTDC_Layer2->CFBAR = (uint32_t)init_picture;
 800228e:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <main+0x78>)
 8002290:	4a1b      	ldr	r2, [pc, #108]	; (8002300 <main+0x7c>)
 8002292:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8002294:	4b1b      	ldr	r3, [pc, #108]	; (8002304 <main+0x80>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	4a1a      	ldr	r2, [pc, #104]	; (8002304 <main+0x80>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	6253      	str	r3, [r2, #36]	; 0x24
	for(int i = 0; i <= 5000000; ++i);
 80022a0:	2300      	movs	r3, #0
 80022a2:	607b      	str	r3, [r7, #4]
 80022a4:	e002      	b.n	80022ac <main+0x28>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3301      	adds	r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a16      	ldr	r2, [pc, #88]	; (8002308 <main+0x84>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	ddf8      	ble.n	80022a6 <main+0x22>

	// Main picture
	LTDC_Layer2->CFBAR = (uint32_t)main_picture;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <main+0x78>)
 80022b6:	4a15      	ldr	r2, [pc, #84]	; (800230c <main+0x88>)
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <main+0x80>)
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	4a11      	ldr	r2, [pc, #68]	; (8002304 <main+0x80>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6253      	str	r3, [r2, #36]	; 0x24

	// Time
	change_digit_1(1,9);
 80022c6:	2109      	movs	r1, #9
 80022c8:	2001      	movs	r0, #1
 80022ca:	f7fe fcb5 	bl	8000c38 <change_digit_1>
	change_digit_1(2,9);
 80022ce:	2109      	movs	r1, #9
 80022d0:	2002      	movs	r0, #2
 80022d2:	f7fe fcb1 	bl	8000c38 <change_digit_1>
	change_digit_1(3,9);
 80022d6:	2109      	movs	r1, #9
 80022d8:	2003      	movs	r0, #3
 80022da:	f7fe fcad 	bl	8000c38 <change_digit_1>
	change_digit_1(4,9);
 80022de:	2109      	movs	r1, #9
 80022e0:	2004      	movs	r0, #4
 80022e2:	f7fe fca9 	bl	8000c38 <change_digit_1>

	// Power
	change_digit_3(100);
 80022e6:	2064      	movs	r0, #100	; 0x64
 80022e8:	f7ff f880 	bl	80013ec <change_digit_3>

	SysTick_Config(180);
 80022ec:	20b4      	movs	r0, #180	; 0xb4
 80022ee:	f7fd ffb5 	bl	800025c <SysTick_Config>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40016904 	.word	0x40016904
 8002300:	08069f90 	.word	0x08069f90
 8002304:	40016800 	.word	0x40016800
 8002308:	004c4b40 	.word	0x004c4b40
 800230c:	080a9b90 	.word	0x080a9b90

08002310 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002310:	480d      	ldr	r0, [pc, #52]	; (8002348 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002312:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002314:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002318:	480c      	ldr	r0, [pc, #48]	; (800234c <LoopForever+0x6>)
  ldr r1, =_edata
 800231a:	490d      	ldr	r1, [pc, #52]	; (8002350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <LoopForever+0xe>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002330:	4c0a      	ldr	r4, [pc, #40]	; (800235c <LoopForever+0x16>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800233e:	f000 f811 	bl	8002364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002342:	f7ff ff9f 	bl	8002284 <main>

08002346 <LoopForever>:

LoopForever:
    b LoopForever
 8002346:	e7fe      	b.n	8002346 <LoopForever>
  ldr   r0, =_estack
 8002348:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002350:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8002354:	080e9798 	.word	0x080e9798
  ldr r2, =_sbss
 8002358:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800235c:	2003fc24 	.word	0x2003fc24

08002360 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC_IRQHandler>
	...

08002364 <__libc_init_array>:
 8002364:	b570      	push	{r4, r5, r6, lr}
 8002366:	4d0d      	ldr	r5, [pc, #52]	; (800239c <__libc_init_array+0x38>)
 8002368:	4c0d      	ldr	r4, [pc, #52]	; (80023a0 <__libc_init_array+0x3c>)
 800236a:	1b64      	subs	r4, r4, r5
 800236c:	10a4      	asrs	r4, r4, #2
 800236e:	2600      	movs	r6, #0
 8002370:	42a6      	cmp	r6, r4
 8002372:	d109      	bne.n	8002388 <__libc_init_array+0x24>
 8002374:	4d0b      	ldr	r5, [pc, #44]	; (80023a4 <__libc_init_array+0x40>)
 8002376:	4c0c      	ldr	r4, [pc, #48]	; (80023a8 <__libc_init_array+0x44>)
 8002378:	f000 f818 	bl	80023ac <_init>
 800237c:	1b64      	subs	r4, r4, r5
 800237e:	10a4      	asrs	r4, r4, #2
 8002380:	2600      	movs	r6, #0
 8002382:	42a6      	cmp	r6, r4
 8002384:	d105      	bne.n	8002392 <__libc_init_array+0x2e>
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	f855 3b04 	ldr.w	r3, [r5], #4
 800238c:	4798      	blx	r3
 800238e:	3601      	adds	r6, #1
 8002390:	e7ee      	b.n	8002370 <__libc_init_array+0xc>
 8002392:	f855 3b04 	ldr.w	r3, [r5], #4
 8002396:	4798      	blx	r3
 8002398:	3601      	adds	r6, #1
 800239a:	e7f2      	b.n	8002382 <__libc_init_array+0x1e>
 800239c:	080e9790 	.word	0x080e9790
 80023a0:	080e9790 	.word	0x080e9790
 80023a4:	080e9790 	.word	0x080e9790
 80023a8:	080e9794 	.word	0x080e9794

080023ac <_init>:
 80023ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ae:	bf00      	nop
 80023b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023b2:	bc08      	pop	{r3}
 80023b4:	469e      	mov	lr, r3
 80023b6:	4770      	bx	lr

080023b8 <_fini>:
 80023b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023ba:	bf00      	nop
 80023bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023be:	bc08      	pop	{r3}
 80023c0:	469e      	mov	lr, r3
 80023c2:	4770      	bx	lr
