
Blue Lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e73cc  08002d80  08002d80  00012d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080ea14c  080ea14c  000fa154  2**0
                  CONTENTS
  4 .ARM          00000000  080ea14c  080ea14c  000fa154  2**0
                  CONTENTS
  5 .preinit_array 00000000  080ea14c  080ea154  000fa154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080ea14c  080ea14c  000fa14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080ea150  080ea150  000fa150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000fa154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fc30  20000000  080ea154  00100000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003fc30  080ea154  000ffc30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000fa154  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022bd  00000000  00000000  000fa184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002c3  00000000  00000000  000fc441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b0  00000000  00000000  000fc708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000098  00000000  00000000  000fc7b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7a6  00000000  00000000  000fc850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000228c  00000000  00000000  00117ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b580  00000000  00000000  0011a282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b5802  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000248  00000000  00000000  001b5858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002d68 	.word	0x08002d68

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08002d68 	.word	0x08002d68

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	6039      	str	r1, [r7, #0]
 800024e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000254:	2b00      	cmp	r3, #0
 8000256:	db0a      	blt.n	800026e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	b2da      	uxtb	r2, r3
 800025c:	490c      	ldr	r1, [pc, #48]	; (8000290 <__NVIC_SetPriority+0x4c>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	0112      	lsls	r2, r2, #4
 8000264:	b2d2      	uxtb	r2, r2
 8000266:	440b      	add	r3, r1
 8000268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800026c:	e00a      	b.n	8000284 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	4908      	ldr	r1, [pc, #32]	; (8000294 <__NVIC_SetPriority+0x50>)
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	f003 030f 	and.w	r3, r3, #15
 800027a:	3b04      	subs	r3, #4
 800027c:	0112      	lsls	r2, r2, #4
 800027e:	b2d2      	uxtb	r2, r2
 8000280:	440b      	add	r3, r1
 8000282:	761a      	strb	r2, [r3, #24]
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr
 8000290:	e000e100 	.word	0xe000e100
 8000294:	e000ed00 	.word	0xe000ed00

08000298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80002a8:	d301      	bcc.n	80002ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80002aa:	2301      	movs	r3, #1
 80002ac:	e00f      	b.n	80002ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <SysTick_Config+0x40>)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80002b6:	210f      	movs	r1, #15
 80002b8:	f04f 30ff 	mov.w	r0, #4294967295
 80002bc:	f7ff ffc2 	bl	8000244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <SysTick_Config+0x40>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <SysTick_Config+0x40>)
 80002c8:	2207      	movs	r2, #7
 80002ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80002cc:	2300      	movs	r3, #0
}
 80002ce:	4618      	mov	r0, r3
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	e000e010 	.word	0xe000e010

080002dc <initialization>:
uint8_t set_hour = 0;
uint8_t set_hour_2 = 0;
uint8_t power = 0;

void initialization()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002e2:	4ba2      	ldr	r3, [pc, #648]	; (800056c <initialization+0x290>)
 80002e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e6:	4aa1      	ldr	r2, [pc, #644]	; (800056c <initialization+0x290>)
 80002e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002ec:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;
 80002ee:	4b9f      	ldr	r3, [pc, #636]	; (800056c <initialization+0x290>)
 80002f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002f2:	4a9e      	ldr	r2, [pc, #632]	; (800056c <initialization+0x290>)
 80002f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002f8:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002fa:	4b9c      	ldr	r3, [pc, #624]	; (800056c <initialization+0x290>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a9b      	ldr	r2, [pc, #620]	; (800056c <initialization+0x290>)
 8000300:	f043 0304 	orr.w	r3, r3, #4
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 8000306:	4b99      	ldr	r3, [pc, #612]	; (800056c <initialization+0x290>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030a:	4a98      	ldr	r2, [pc, #608]	; (800056c <initialization+0x290>)
 800030c:	f043 0310 	orr.w	r3, r3, #16
 8000310:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN;
 8000312:	4b96      	ldr	r3, [pc, #600]	; (800056c <initialization+0x290>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000316:	4a95      	ldr	r2, [pc, #596]	; (800056c <initialization+0x290>)
 8000318:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800031c:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOKEN;
 800031e:	4b93      	ldr	r3, [pc, #588]	; (800056c <initialization+0x290>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000322:	4a92      	ldr	r2, [pc, #584]	; (800056c <initialization+0x290>)
 8000324:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000328:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 800032a:	4b90      	ldr	r3, [pc, #576]	; (800056c <initialization+0x290>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a8f      	ldr	r2, [pc, #572]	; (800056c <initialization+0x290>)
 8000330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000336:	4b8d      	ldr	r3, [pc, #564]	; (800056c <initialization+0x290>)
 8000338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033a:	4a8c      	ldr	r2, [pc, #560]	; (800056c <initialization+0x290>)
 800033c:	f043 0302 	orr.w	r3, r3, #2
 8000340:	6413      	str	r3, [r2, #64]	; 0x40

	// Freq
	RCC->CR |= RCC_CR_HSEON;
 8000342:	4b8a      	ldr	r3, [pc, #552]	; (800056c <initialization+0x290>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a89      	ldr	r2, [pc, #548]	; (800056c <initialization+0x290>)
 8000348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800034c:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 800034e:	bf00      	nop
 8000350:	4b86      	ldr	r3, [pc, #536]	; (800056c <initialization+0x290>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000358:	2b00      	cmp	r3, #0
 800035a:	d0f9      	beq.n	8000350 <initialization+0x74>
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 800035c:	4b84      	ldr	r3, [pc, #528]	; (8000570 <initialization+0x294>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a83      	ldr	r2, [pc, #524]	; (8000570 <initialization+0x294>)
 8000362:	f043 0305 	orr.w	r3, r3, #5
 8000366:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0 | RCC_PLLCFGR_PLLM_3 | RCC_PLLCFGR_PLLM_4;
 8000368:	4b80      	ldr	r3, [pc, #512]	; (800056c <initialization+0x290>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a7f      	ldr	r2, [pc, #508]	; (800056c <initialization+0x290>)
 800036e:	f043 0319 	orr.w	r3, r3, #25
 8000372:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_4 | RCC_PLLCFGR_PLLN_5 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLN_8;
 8000374:	4b7d      	ldr	r3, [pc, #500]	; (800056c <initialization+0x290>)
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	4a7c      	ldr	r2, [pc, #496]	; (800056c <initialization+0x290>)
 800037a:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 800037e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_6;
 8000380:	4b7a      	ldr	r3, [pc, #488]	; (800056c <initialization+0x290>)
 8000382:	685b      	ldr	r3, [r3, #4]
 8000384:	4a79      	ldr	r2, [pc, #484]	; (800056c <initialization+0x290>)
 8000386:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800038a:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLP_0;
 800038c:	4b77      	ldr	r3, [pc, #476]	; (800056c <initialization+0x290>)
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	4a76      	ldr	r2, [pc, #472]	; (800056c <initialization+0x290>)
 8000392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000396:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE2_2;
 8000398:	4b74      	ldr	r3, [pc, #464]	; (800056c <initialization+0x290>)
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4a73      	ldr	r2, [pc, #460]	; (800056c <initialization+0x290>)
 800039e:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 80003a2:	6093      	str	r3, [r2, #8]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 80003a4:	4b71      	ldr	r3, [pc, #452]	; (800056c <initialization+0x290>)
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4a70      	ldr	r2, [pc, #448]	; (800056c <initialization+0x290>)
 80003aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003ae:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 80003b0:	4b6e      	ldr	r3, [pc, #440]	; (800056c <initialization+0x290>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a6d      	ldr	r2, [pc, #436]	; (800056c <initialization+0x290>)
 80003b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80003ba:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 80003bc:	bf00      	nop
 80003be:	4b6b      	ldr	r3, [pc, #428]	; (800056c <initialization+0x290>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d0f9      	beq.n	80003be <initialization+0xe2>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 80003ca:	4b68      	ldr	r3, [pc, #416]	; (800056c <initialization+0x290>)
 80003cc:	689b      	ldr	r3, [r3, #8]
 80003ce:	4a67      	ldr	r2, [pc, #412]	; (800056c <initialization+0x290>)
 80003d0:	f043 0302 	orr.w	r3, r3, #2
 80003d4:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 80003d6:	bf00      	nop
 80003d8:	4b64      	ldr	r3, [pc, #400]	; (800056c <initialization+0x290>)
 80003da:	689b      	ldr	r3, [r3, #8]
 80003dc:	f003 030c 	and.w	r3, r3, #12
 80003e0:	2b08      	cmp	r3, #8
 80003e2:	d1f9      	bne.n	80003d8 <initialization+0xfc>
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7;
 80003e4:	4b61      	ldr	r3, [pc, #388]	; (800056c <initialization+0x290>)
 80003e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ea:	4a60      	ldr	r2, [pc, #384]	; (800056c <initialization+0x290>)
 80003ec:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80003f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIR_0 | RCC_PLLSAICFGR_PLLSAIR_2;
 80003f4:	4b5d      	ldr	r3, [pc, #372]	; (800056c <initialization+0x290>)
 80003f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003fa:	4a5c      	ldr	r2, [pc, #368]	; (800056c <initialization+0x290>)
 80003fc:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8000400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->DCKCFGR1 	|= RCC_DCKCFGR1_PLLSAIDIVR_0;
 8000404:	4b59      	ldr	r3, [pc, #356]	; (800056c <initialization+0x290>)
 8000406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800040a:	4a58      	ldr	r2, [pc, #352]	; (800056c <initialization+0x290>)
 800040c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000410:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->DCKCFGR1 	&= ~RCC_DCKCFGR1_PLLSAIDIVR_1;
 8000414:	4b55      	ldr	r3, [pc, #340]	; (800056c <initialization+0x290>)
 8000416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800041a:	4a54      	ldr	r2, [pc, #336]	; (800056c <initialization+0x290>)
 800041c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000420:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->CR |= RCC_CR_PLLSAION;
 8000424:	4b51      	ldr	r3, [pc, #324]	; (800056c <initialization+0x290>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a50      	ldr	r2, [pc, #320]	; (800056c <initialization+0x290>)
 800042a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800042e:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLSAIRDY) == 0);
 8000430:	bf00      	nop
 8000432:	4b4e      	ldr	r3, [pc, #312]	; (800056c <initialization+0x290>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800043a:	2b00      	cmp	r3, #0
 800043c:	d0f9      	beq.n	8000432 <initialization+0x156>

	// PMW
	GPIOC->MODER |= GPIO_MODER_MODER6_1;
 800043e:	4b4d      	ldr	r3, [pc, #308]	; (8000574 <initialization+0x298>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a4c      	ldr	r2, [pc, #304]	; (8000574 <initialization+0x298>)
 8000444:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000448:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= GPIO_AFRL_AFRL6_1;
 800044a:	4b4a      	ldr	r3, [pc, #296]	; (8000574 <initialization+0x298>)
 800044c:	6a1b      	ldr	r3, [r3, #32]
 800044e:	4a49      	ldr	r2, [pc, #292]	; (8000574 <initialization+0x298>)
 8000450:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000454:	6213      	str	r3, [r2, #32]
	TIM3->PSC = 1080;
 8000456:	4b48      	ldr	r3, [pc, #288]	; (8000578 <initialization+0x29c>)
 8000458:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800045c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 100;
 800045e:	4b46      	ldr	r3, [pc, #280]	; (8000578 <initialization+0x29c>)
 8000460:	2264      	movs	r2, #100	; 0x64
 8000462:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = power;
 8000464:	4b45      	ldr	r3, [pc, #276]	; (800057c <initialization+0x2a0>)
 8000466:	781a      	ldrb	r2, [r3, #0]
 8000468:	4b43      	ldr	r3, [pc, #268]	; (8000578 <initialization+0x29c>)
 800046a:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800046c:	4b42      	ldr	r3, [pc, #264]	; (8000578 <initialization+0x29c>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a41      	ldr	r2, [pc, #260]	; (8000578 <initialization+0x29c>)
 8000472:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000476:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E;
 8000478:	4b3f      	ldr	r3, [pc, #252]	; (8000578 <initialization+0x29c>)
 800047a:	6a1b      	ldr	r3, [r3, #32]
 800047c:	4a3e      	ldr	r2, [pc, #248]	; (8000578 <initialization+0x29c>)
 800047e:	f043 0301 	orr.w	r3, r3, #1
 8000482:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000484:	4b3c      	ldr	r3, [pc, #240]	; (8000578 <initialization+0x29c>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	4a3b      	ldr	r2, [pc, #236]	; (8000578 <initialization+0x29c>)
 800048a:	f043 0301 	orr.w	r3, r3, #1
 800048e:	6013      	str	r3, [r2, #0]
	// PI0 - D5
	// PI1 - D13
	// PI2 - D8
	// PI3 - D7
	// PB4 - D3
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI0_PI | SYSCFG_EXTICR1_EXTI1_PI | SYSCFG_EXTICR1_EXTI2_PI | SYSCFG_EXTICR1_EXTI3_PI;
 8000490:	4b3b      	ldr	r3, [pc, #236]	; (8000580 <initialization+0x2a4>)
 8000492:	689a      	ldr	r2, [r3, #8]
 8000494:	493a      	ldr	r1, [pc, #232]	; (8000580 <initialization+0x2a4>)
 8000496:	f648 0388 	movw	r3, #34952	; 0x8888
 800049a:	4313      	orrs	r3, r2
 800049c:	608b      	str	r3, [r1, #8]
	SYSCFG->EXTICR[1] |= SYSCFG_EXTICR2_EXTI4_PB;
 800049e:	4b38      	ldr	r3, [pc, #224]	; (8000580 <initialization+0x2a4>)
 80004a0:	68db      	ldr	r3, [r3, #12]
 80004a2:	4a37      	ldr	r2, [pc, #220]	; (8000580 <initialization+0x2a4>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	60d3      	str	r3, [r2, #12]
	EXTI->IMR |= EXTI_IMR_MR0 | EXTI_IMR_MR1 | EXTI_IMR_MR2 | EXTI_IMR_MR3 | EXTI_IMR_MR4;
 80004aa:	4b36      	ldr	r3, [pc, #216]	; (8000584 <initialization+0x2a8>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a35      	ldr	r2, [pc, #212]	; (8000584 <initialization+0x2a8>)
 80004b0:	f043 031f 	orr.w	r3, r3, #31
 80004b4:	6013      	str	r3, [r2, #0]
	EXTI->RTSR |= EXTI_RTSR_TR0 | EXTI_RTSR_TR1 | EXTI_RTSR_TR2 | EXTI_RTSR_TR3 | EXTI_RTSR_TR4;
 80004b6:	4b33      	ldr	r3, [pc, #204]	; (8000584 <initialization+0x2a8>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	4a32      	ldr	r2, [pc, #200]	; (8000584 <initialization+0x2a8>)
 80004bc:	f043 031f 	orr.w	r3, r3, #31
 80004c0:	6093      	str	r3, [r2, #8]
	NVIC_EnableIRQ(EXTI0_IRQn);
 80004c2:	2006      	movs	r0, #6
 80004c4:	f7ff fea0 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI1_IRQn);
 80004c8:	2007      	movs	r0, #7
 80004ca:	f7ff fe9d 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI2_IRQn);
 80004ce:	2008      	movs	r0, #8
 80004d0:	f7ff fe9a 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI3_IRQn);
 80004d4:	2009      	movs	r0, #9
 80004d6:	f7ff fe97 	bl	8000208 <__NVIC_EnableIRQ>
	NVIC_EnableIRQ(EXTI4_IRQn);
 80004da:	200a      	movs	r0, #10
 80004dc:	f7ff fe94 	bl	8000208 <__NVIC_EnableIRQ>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80004e0:	b662      	cpsie	i
}
 80004e2:	bf00      	nop
	__enable_irq ();

	//B0 PE4
	GPIOE->MODER   &= ~GPIO_MODER_MODER4;
 80004e4:	4b28      	ldr	r3, [pc, #160]	; (8000588 <initialization+0x2ac>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a27      	ldr	r2, [pc, #156]	; (8000588 <initialization+0x2ac>)
 80004ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ee:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |= GPIO_MODER_MODER4_1;
 80004f0:	4b25      	ldr	r3, [pc, #148]	; (8000588 <initialization+0x2ac>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a24      	ldr	r2, [pc, #144]	; (8000588 <initialization+0x2ac>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 80004fc:	4b22      	ldr	r3, [pc, #136]	; (8000588 <initialization+0x2ac>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	4a21      	ldr	r2, [pc, #132]	; (8000588 <initialization+0x2ac>)
 8000502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000506:	6093      	str	r3, [r2, #8]
	GPIOE->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 8000508:	4b1f      	ldr	r3, [pc, #124]	; (8000588 <initialization+0x2ac>)
 800050a:	6a1b      	ldr	r3, [r3, #32]
 800050c:	4a1e      	ldr	r2, [pc, #120]	; (8000588 <initialization+0x2ac>)
 800050e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000512:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000514:	4b1c      	ldr	r3, [pc, #112]	; (8000588 <initialization+0x2ac>)
 8000516:	6a1b      	ldr	r3, [r3, #32]
 8000518:	4a1b      	ldr	r2, [pc, #108]	; (8000588 <initialization+0x2ac>)
 800051a:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800051e:	6213      	str	r3, [r2, #32]

	//B1 PJ13
	GPIOJ->MODER   &= ~GPIO_MODER_MODER13;
 8000520:	4b1a      	ldr	r3, [pc, #104]	; (800058c <initialization+0x2b0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <initialization+0x2b0>)
 8000526:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800052a:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER13_1;
 800052c:	4b17      	ldr	r3, [pc, #92]	; (800058c <initialization+0x2b0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a16      	ldr	r2, [pc, #88]	; (800058c <initialization+0x2b0>)
 8000532:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000536:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_1;
 8000538:	4b14      	ldr	r3, [pc, #80]	; (800058c <initialization+0x2b0>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	4a13      	ldr	r2, [pc, #76]	; (800058c <initialization+0x2b0>)
 800053e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000542:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL5_0;
 8000544:	4b11      	ldr	r3, [pc, #68]	; (800058c <initialization+0x2b0>)
 8000546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000548:	4a10      	ldr	r2, [pc, #64]	; (800058c <initialization+0x2b0>)
 800054a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800054e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <initialization+0x2b0>)
 8000552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000554:	4a0d      	ldr	r2, [pc, #52]	; (800058c <initialization+0x2b0>)
 8000556:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800055a:	6253      	str	r3, [r2, #36]	; 0x24

	//B2 PJ14
	GPIOJ->MODER   &= ~GPIO_MODER_MODER14;
 800055c:	4b0b      	ldr	r3, [pc, #44]	; (800058c <initialization+0x2b0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0a      	ldr	r2, [pc, #40]	; (800058c <initialization+0x2b0>)
 8000562:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	e012      	b.n	8000590 <initialization+0x2b4>
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40023c00 	.word	0x40023c00
 8000574:	40020800 	.word	0x40020800
 8000578:	40000400 	.word	0x40000400
 800057c:	2003fc2c 	.word	0x2003fc2c
 8000580:	40013800 	.word	0x40013800
 8000584:	40013c00 	.word	0x40013c00
 8000588:	40021000 	.word	0x40021000
 800058c:	40022400 	.word	0x40022400
	GPIOJ->MODER   |= GPIO_MODER_MODER14_1;
 8000590:	4b98      	ldr	r3, [pc, #608]	; (80007f4 <initialization+0x518>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a97      	ldr	r2, [pc, #604]	; (80007f4 <initialization+0x518>)
 8000596:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800059a:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 800059c:	4b95      	ldr	r3, [pc, #596]	; (80007f4 <initialization+0x518>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	4a94      	ldr	r2, [pc, #592]	; (80007f4 <initialization+0x518>)
 80005a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005a6:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 80005a8:	4b92      	ldr	r3, [pc, #584]	; (80007f4 <initialization+0x518>)
 80005aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ac:	4a91      	ldr	r2, [pc, #580]	; (80007f4 <initialization+0x518>)
 80005ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005b2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 80005b4:	4b8f      	ldr	r3, [pc, #572]	; (80007f4 <initialization+0x518>)
 80005b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b8:	4a8e      	ldr	r2, [pc, #568]	; (80007f4 <initialization+0x518>)
 80005ba:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80005be:	6253      	str	r3, [r2, #36]	; 0x24

	//B3 PJ15
	GPIOJ->MODER   &= ~GPIO_MODER_MODER15;
 80005c0:	4b8c      	ldr	r3, [pc, #560]	; (80007f4 <initialization+0x518>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a8b      	ldr	r2, [pc, #556]	; (80007f4 <initialization+0x518>)
 80005c6:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80005ca:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER15_1;
 80005cc:	4b89      	ldr	r3, [pc, #548]	; (80007f4 <initialization+0x518>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a88      	ldr	r2, [pc, #544]	; (80007f4 <initialization+0x518>)
 80005d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005d6:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 80005d8:	4b86      	ldr	r3, [pc, #536]	; (80007f4 <initialization+0x518>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	4a85      	ldr	r2, [pc, #532]	; (80007f4 <initialization+0x518>)
 80005de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005e2:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 80005e4:	4b83      	ldr	r3, [pc, #524]	; (80007f4 <initialization+0x518>)
 80005e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e8:	4a82      	ldr	r2, [pc, #520]	; (80007f4 <initialization+0x518>)
 80005ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 80005f0:	4b80      	ldr	r3, [pc, #512]	; (80007f4 <initialization+0x518>)
 80005f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005f4:	4a7f      	ldr	r2, [pc, #508]	; (80007f4 <initialization+0x518>)
 80005f6:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 80005fa:	6253      	str	r3, [r2, #36]	; 0x24

	//B4 PJ12
	GPIOJ->MODER   &= ~GPIO_MODER_MODER12;
 80005fc:	4b7d      	ldr	r3, [pc, #500]	; (80007f4 <initialization+0x518>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a7c      	ldr	r2, [pc, #496]	; (80007f4 <initialization+0x518>)
 8000602:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000606:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER12_1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <initialization+0x518>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a79      	ldr	r2, [pc, #484]	; (80007f4 <initialization+0x518>)
 800060e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000612:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12_1;
 8000614:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <initialization+0x518>)
 8000616:	689b      	ldr	r3, [r3, #8]
 8000618:	4a76      	ldr	r2, [pc, #472]	; (80007f4 <initialization+0x518>)
 800061a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800061e:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL4_0;
 8000620:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <initialization+0x518>)
 8000622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000624:	4a73      	ldr	r2, [pc, #460]	; (80007f4 <initialization+0x518>)
 8000626:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800062a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 800062c:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <initialization+0x518>)
 800062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000630:	4a70      	ldr	r2, [pc, #448]	; (80007f4 <initialization+0x518>)
 8000632:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000636:	6253      	str	r3, [r2, #36]	; 0x24

	//B5 PK4
	GPIOK->MODER   &= ~GPIO_MODER_MODER4;
 8000638:	4b6f      	ldr	r3, [pc, #444]	; (80007f8 <initialization+0x51c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a6e      	ldr	r2, [pc, #440]	; (80007f8 <initialization+0x51c>)
 800063e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000642:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER4_1;
 8000644:	4b6c      	ldr	r3, [pc, #432]	; (80007f8 <initialization+0x51c>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a6b      	ldr	r2, [pc, #428]	; (80007f8 <initialization+0x51c>)
 800064a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800064e:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 8000650:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <initialization+0x51c>)
 8000652:	689b      	ldr	r3, [r3, #8]
 8000654:	4a68      	ldr	r2, [pc, #416]	; (80007f8 <initialization+0x51c>)
 8000656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065a:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 800065c:	4b66      	ldr	r3, [pc, #408]	; (80007f8 <initialization+0x51c>)
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	4a65      	ldr	r2, [pc, #404]	; (80007f8 <initialization+0x51c>)
 8000662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000666:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000668:	4b63      	ldr	r3, [pc, #396]	; (80007f8 <initialization+0x51c>)
 800066a:	6a1b      	ldr	r3, [r3, #32]
 800066c:	4a62      	ldr	r2, [pc, #392]	; (80007f8 <initialization+0x51c>)
 800066e:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000672:	6213      	str	r3, [r2, #32]

	//B6 PK5
	GPIOK->MODER   &= ~GPIO_MODER_MODER5;
 8000674:	4b60      	ldr	r3, [pc, #384]	; (80007f8 <initialization+0x51c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a5f      	ldr	r2, [pc, #380]	; (80007f8 <initialization+0x51c>)
 800067a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800067e:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER5_1;
 8000680:	4b5d      	ldr	r3, [pc, #372]	; (80007f8 <initialization+0x51c>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a5c      	ldr	r2, [pc, #368]	; (80007f8 <initialization+0x51c>)
 8000686:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800068a:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 800068c:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <initialization+0x51c>)
 800068e:	689b      	ldr	r3, [r3, #8]
 8000690:	4a59      	ldr	r2, [pc, #356]	; (80007f8 <initialization+0x51c>)
 8000692:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000696:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 8000698:	4b57      	ldr	r3, [pc, #348]	; (80007f8 <initialization+0x51c>)
 800069a:	6a1b      	ldr	r3, [r3, #32]
 800069c:	4a56      	ldr	r2, [pc, #344]	; (80007f8 <initialization+0x51c>)
 800069e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80006a2:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 80006a4:	4b54      	ldr	r3, [pc, #336]	; (80007f8 <initialization+0x51c>)
 80006a6:	6a1b      	ldr	r3, [r3, #32]
 80006a8:	4a53      	ldr	r2, [pc, #332]	; (80007f8 <initialization+0x51c>)
 80006aa:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80006ae:	6213      	str	r3, [r2, #32]

	//B7 PK6
	GPIOK->MODER   &= ~GPIO_MODER_MODER6;
 80006b0:	4b51      	ldr	r3, [pc, #324]	; (80007f8 <initialization+0x51c>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a50      	ldr	r2, [pc, #320]	; (80007f8 <initialization+0x51c>)
 80006b6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80006ba:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER6_1;
 80006bc:	4b4e      	ldr	r3, [pc, #312]	; (80007f8 <initialization+0x51c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a4d      	ldr	r2, [pc, #308]	; (80007f8 <initialization+0x51c>)
 80006c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006c6:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 80006c8:	4b4b      	ldr	r3, [pc, #300]	; (80007f8 <initialization+0x51c>)
 80006ca:	689b      	ldr	r3, [r3, #8]
 80006cc:	4a4a      	ldr	r2, [pc, #296]	; (80007f8 <initialization+0x51c>)
 80006ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006d2:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 80006d4:	4b48      	ldr	r3, [pc, #288]	; (80007f8 <initialization+0x51c>)
 80006d6:	6a1b      	ldr	r3, [r3, #32]
 80006d8:	4a47      	ldr	r2, [pc, #284]	; (80007f8 <initialization+0x51c>)
 80006da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80006de:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 80006e0:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <initialization+0x51c>)
 80006e2:	6a1b      	ldr	r3, [r3, #32]
 80006e4:	4a44      	ldr	r2, [pc, #272]	; (80007f8 <initialization+0x51c>)
 80006e6:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80006ea:	6213      	str	r3, [r2, #32]

	//R0 PI 15
	GPIOI->MODER   &= ~GPIO_MODER_MODER15;
 80006ec:	4b43      	ldr	r3, [pc, #268]	; (80007fc <initialization+0x520>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a42      	ldr	r2, [pc, #264]	; (80007fc <initialization+0x520>)
 80006f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80006f6:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER15_1;
 80006f8:	4b40      	ldr	r3, [pc, #256]	; (80007fc <initialization+0x520>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a3f      	ldr	r2, [pc, #252]	; (80007fc <initialization+0x520>)
 80006fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000702:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 8000704:	4b3d      	ldr	r3, [pc, #244]	; (80007fc <initialization+0x520>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4a3c      	ldr	r2, [pc, #240]	; (80007fc <initialization+0x520>)
 800070a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800070e:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 8000710:	4b3a      	ldr	r3, [pc, #232]	; (80007fc <initialization+0x520>)
 8000712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000714:	4a39      	ldr	r2, [pc, #228]	; (80007fc <initialization+0x520>)
 8000716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800071a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800071c:	4b37      	ldr	r3, [pc, #220]	; (80007fc <initialization+0x520>)
 800071e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000720:	4a36      	ldr	r2, [pc, #216]	; (80007fc <initialization+0x520>)
 8000722:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000726:	6253      	str	r3, [r2, #36]	; 0x24

	//R1 PJ0
	GPIOJ->MODER   &= ~GPIO_MODER_MODER0;
 8000728:	4b32      	ldr	r3, [pc, #200]	; (80007f4 <initialization+0x518>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a31      	ldr	r2, [pc, #196]	; (80007f4 <initialization+0x518>)
 800072e:	f023 0303 	bic.w	r3, r3, #3
 8000732:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER0_1;
 8000734:	4b2f      	ldr	r3, [pc, #188]	; (80007f4 <initialization+0x518>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a2e      	ldr	r2, [pc, #184]	; (80007f4 <initialization+0x518>)
 800073a:	f043 0302 	orr.w	r3, r3, #2
 800073e:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 8000740:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <initialization+0x518>)
 8000742:	689b      	ldr	r3, [r3, #8]
 8000744:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <initialization+0x518>)
 8000746:	f043 0302 	orr.w	r3, r3, #2
 800074a:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 800074c:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <initialization+0x518>)
 800074e:	6a1b      	ldr	r3, [r3, #32]
 8000750:	4a28      	ldr	r2, [pc, #160]	; (80007f4 <initialization+0x518>)
 8000752:	f023 0301 	bic.w	r3, r3, #1
 8000756:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000758:	4b26      	ldr	r3, [pc, #152]	; (80007f4 <initialization+0x518>)
 800075a:	6a1b      	ldr	r3, [r3, #32]
 800075c:	4a25      	ldr	r2, [pc, #148]	; (80007f4 <initialization+0x518>)
 800075e:	f043 030e 	orr.w	r3, r3, #14
 8000762:	6213      	str	r3, [r2, #32]

	//R2 PJ1
	GPIOJ->MODER   &= ~GPIO_MODER_MODER1;
 8000764:	4b23      	ldr	r3, [pc, #140]	; (80007f4 <initialization+0x518>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <initialization+0x518>)
 800076a:	f023 030c 	bic.w	r3, r3, #12
 800076e:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER1_1;
 8000770:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <initialization+0x518>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a1f      	ldr	r2, [pc, #124]	; (80007f4 <initialization+0x518>)
 8000776:	f043 0308 	orr.w	r3, r3, #8
 800077a:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 800077c:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <initialization+0x518>)
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	4a1c      	ldr	r2, [pc, #112]	; (80007f4 <initialization+0x518>)
 8000782:	f043 0308 	orr.w	r3, r3, #8
 8000786:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 8000788:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <initialization+0x518>)
 800078a:	6a1b      	ldr	r3, [r3, #32]
 800078c:	4a19      	ldr	r2, [pc, #100]	; (80007f4 <initialization+0x518>)
 800078e:	f023 0310 	bic.w	r3, r3, #16
 8000792:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000794:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <initialization+0x518>)
 8000796:	6a1b      	ldr	r3, [r3, #32]
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <initialization+0x518>)
 800079a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800079e:	6213      	str	r3, [r2, #32]

	//R3 PJ2
	GPIOJ->MODER   &= ~GPIO_MODER_MODER2;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <initialization+0x518>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a13      	ldr	r2, [pc, #76]	; (80007f4 <initialization+0x518>)
 80007a6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80007aa:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER2_1;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <initialization+0x518>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a10      	ldr	r2, [pc, #64]	; (80007f4 <initialization+0x518>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <initialization+0x518>)
 80007ba:	689b      	ldr	r3, [r3, #8]
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <initialization+0x518>)
 80007be:	f043 0320 	orr.w	r3, r3, #32
 80007c2:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <initialization+0x518>)
 80007c6:	6a1b      	ldr	r3, [r3, #32]
 80007c8:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <initialization+0x518>)
 80007ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ce:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <initialization+0x518>)
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	4a07      	ldr	r2, [pc, #28]	; (80007f4 <initialization+0x518>)
 80007d6:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 80007da:	6213      	str	r3, [r2, #32]

	//R4 PJ3

	GPIOJ->MODER   &= ~GPIO_MODER_MODER3;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <initialization+0x518>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <initialization+0x518>)
 80007e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80007e6:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER3_1;
 80007e8:	4b02      	ldr	r3, [pc, #8]	; (80007f4 <initialization+0x518>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a01      	ldr	r2, [pc, #4]	; (80007f4 <initialization+0x518>)
 80007ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f2:	e005      	b.n	8000800 <initialization+0x524>
 80007f4:	40022400 	.word	0x40022400
 80007f8:	40022800 	.word	0x40022800
 80007fc:	40022000 	.word	0x40022000
 8000800:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3_1;
 8000802:	4b99      	ldr	r3, [pc, #612]	; (8000a68 <initialization+0x78c>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	4a98      	ldr	r2, [pc, #608]	; (8000a68 <initialization+0x78c>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL3_0;
 800080e:	4b96      	ldr	r3, [pc, #600]	; (8000a68 <initialization+0x78c>)
 8000810:	6a1b      	ldr	r3, [r3, #32]
 8000812:	4a95      	ldr	r2, [pc, #596]	; (8000a68 <initialization+0x78c>)
 8000814:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000818:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 800081a:	4b93      	ldr	r3, [pc, #588]	; (8000a68 <initialization+0x78c>)
 800081c:	6a1b      	ldr	r3, [r3, #32]
 800081e:	4a92      	ldr	r2, [pc, #584]	; (8000a68 <initialization+0x78c>)
 8000820:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000824:	6213      	str	r3, [r2, #32]

	//R5 PJ4
	GPIOJ->MODER   &= ~GPIO_MODER_MODER4;
 8000826:	4b90      	ldr	r3, [pc, #576]	; (8000a68 <initialization+0x78c>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a8f      	ldr	r2, [pc, #572]	; (8000a68 <initialization+0x78c>)
 800082c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000830:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER4_1;
 8000832:	4b8d      	ldr	r3, [pc, #564]	; (8000a68 <initialization+0x78c>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a8c      	ldr	r2, [pc, #560]	; (8000a68 <initialization+0x78c>)
 8000838:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800083c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 800083e:	4b8a      	ldr	r3, [pc, #552]	; (8000a68 <initialization+0x78c>)
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	4a89      	ldr	r2, [pc, #548]	; (8000a68 <initialization+0x78c>)
 8000844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000848:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 800084a:	4b87      	ldr	r3, [pc, #540]	; (8000a68 <initialization+0x78c>)
 800084c:	6a1b      	ldr	r3, [r3, #32]
 800084e:	4a86      	ldr	r2, [pc, #536]	; (8000a68 <initialization+0x78c>)
 8000850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000854:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000856:	4b84      	ldr	r3, [pc, #528]	; (8000a68 <initialization+0x78c>)
 8000858:	6a1b      	ldr	r3, [r3, #32]
 800085a:	4a83      	ldr	r2, [pc, #524]	; (8000a68 <initialization+0x78c>)
 800085c:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8000860:	6213      	str	r3, [r2, #32]

	//R6 PJ5
	GPIOJ->MODER   &= ~GPIO_MODER_MODER5;
 8000862:	4b81      	ldr	r3, [pc, #516]	; (8000a68 <initialization+0x78c>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a80      	ldr	r2, [pc, #512]	; (8000a68 <initialization+0x78c>)
 8000868:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800086c:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER5_1;
 800086e:	4b7e      	ldr	r3, [pc, #504]	; (8000a68 <initialization+0x78c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a7d      	ldr	r2, [pc, #500]	; (8000a68 <initialization+0x78c>)
 8000874:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000878:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 800087a:	4b7b      	ldr	r3, [pc, #492]	; (8000a68 <initialization+0x78c>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	4a7a      	ldr	r2, [pc, #488]	; (8000a68 <initialization+0x78c>)
 8000880:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000884:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 8000886:	4b78      	ldr	r3, [pc, #480]	; (8000a68 <initialization+0x78c>)
 8000888:	6a1b      	ldr	r3, [r3, #32]
 800088a:	4a77      	ldr	r2, [pc, #476]	; (8000a68 <initialization+0x78c>)
 800088c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000890:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000892:	4b75      	ldr	r3, [pc, #468]	; (8000a68 <initialization+0x78c>)
 8000894:	6a1b      	ldr	r3, [r3, #32]
 8000896:	4a74      	ldr	r2, [pc, #464]	; (8000a68 <initialization+0x78c>)
 8000898:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800089c:	6213      	str	r3, [r2, #32]

	//R7 PJ6
	GPIOJ->MODER   &= ~GPIO_MODER_MODER6;
 800089e:	4b72      	ldr	r3, [pc, #456]	; (8000a68 <initialization+0x78c>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a71      	ldr	r2, [pc, #452]	; (8000a68 <initialization+0x78c>)
 80008a4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80008a8:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER6_1;
 80008aa:	4b6f      	ldr	r3, [pc, #444]	; (8000a68 <initialization+0x78c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a6e      	ldr	r2, [pc, #440]	; (8000a68 <initialization+0x78c>)
 80008b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008b4:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 80008b6:	4b6c      	ldr	r3, [pc, #432]	; (8000a68 <initialization+0x78c>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	4a6b      	ldr	r2, [pc, #428]	; (8000a68 <initialization+0x78c>)
 80008bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008c0:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 80008c2:	4b69      	ldr	r3, [pc, #420]	; (8000a68 <initialization+0x78c>)
 80008c4:	6a1b      	ldr	r3, [r3, #32]
 80008c6:	4a68      	ldr	r2, [pc, #416]	; (8000a68 <initialization+0x78c>)
 80008c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008cc:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 80008ce:	4b66      	ldr	r3, [pc, #408]	; (8000a68 <initialization+0x78c>)
 80008d0:	6a1b      	ldr	r3, [r3, #32]
 80008d2:	4a65      	ldr	r2, [pc, #404]	; (8000a68 <initialization+0x78c>)
 80008d4:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80008d8:	6213      	str	r3, [r2, #32]

	//G0 PJ7
	GPIOJ->MODER   &= ~GPIO_MODER_MODER7;
 80008da:	4b63      	ldr	r3, [pc, #396]	; (8000a68 <initialization+0x78c>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a62      	ldr	r2, [pc, #392]	; (8000a68 <initialization+0x78c>)
 80008e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e4:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER7_1;
 80008e6:	4b60      	ldr	r3, [pc, #384]	; (8000a68 <initialization+0x78c>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a5f      	ldr	r2, [pc, #380]	; (8000a68 <initialization+0x78c>)
 80008ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008f0:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 80008f2:	4b5d      	ldr	r3, [pc, #372]	; (8000a68 <initialization+0x78c>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	4a5c      	ldr	r2, [pc, #368]	; (8000a68 <initialization+0x78c>)
 80008f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008fc:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 80008fe:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <initialization+0x78c>)
 8000900:	6a1b      	ldr	r3, [r3, #32]
 8000902:	4a59      	ldr	r2, [pc, #356]	; (8000a68 <initialization+0x78c>)
 8000904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000908:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800090a:	4b57      	ldr	r3, [pc, #348]	; (8000a68 <initialization+0x78c>)
 800090c:	6a1b      	ldr	r3, [r3, #32]
 800090e:	4a56      	ldr	r2, [pc, #344]	; (8000a68 <initialization+0x78c>)
 8000910:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000914:	6213      	str	r3, [r2, #32]

	//G1 PJ8
	GPIOJ->MODER   &= ~GPIO_MODER_MODER8;
 8000916:	4b54      	ldr	r3, [pc, #336]	; (8000a68 <initialization+0x78c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a53      	ldr	r2, [pc, #332]	; (8000a68 <initialization+0x78c>)
 800091c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000920:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER8_1;
 8000922:	4b51      	ldr	r3, [pc, #324]	; (8000a68 <initialization+0x78c>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a50      	ldr	r2, [pc, #320]	; (8000a68 <initialization+0x78c>)
 8000928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800092c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1;
 800092e:	4b4e      	ldr	r3, [pc, #312]	; (8000a68 <initialization+0x78c>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	4a4d      	ldr	r2, [pc, #308]	; (8000a68 <initialization+0x78c>)
 8000934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000938:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL0_0;
 800093a:	4b4b      	ldr	r3, [pc, #300]	; (8000a68 <initialization+0x78c>)
 800093c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093e:	4a4a      	ldr	r2, [pc, #296]	; (8000a68 <initialization+0x78c>)
 8000940:	f023 0301 	bic.w	r3, r3, #1
 8000944:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000946:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <initialization+0x78c>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	4a47      	ldr	r2, [pc, #284]	; (8000a68 <initialization+0x78c>)
 800094c:	f043 030e 	orr.w	r3, r3, #14
 8000950:	6253      	str	r3, [r2, #36]	; 0x24

	//G2 PJ9
	GPIOJ->MODER   &= ~GPIO_MODER_MODER9;
 8000952:	4b45      	ldr	r3, [pc, #276]	; (8000a68 <initialization+0x78c>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a44      	ldr	r2, [pc, #272]	; (8000a68 <initialization+0x78c>)
 8000958:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800095c:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER9_1;
 800095e:	4b42      	ldr	r3, [pc, #264]	; (8000a68 <initialization+0x78c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a41      	ldr	r2, [pc, #260]	; (8000a68 <initialization+0x78c>)
 8000964:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000968:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 800096a:	4b3f      	ldr	r3, [pc, #252]	; (8000a68 <initialization+0x78c>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	4a3e      	ldr	r2, [pc, #248]	; (8000a68 <initialization+0x78c>)
 8000970:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000974:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 8000976:	4b3c      	ldr	r3, [pc, #240]	; (8000a68 <initialization+0x78c>)
 8000978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800097a:	4a3b      	ldr	r2, [pc, #236]	; (8000a68 <initialization+0x78c>)
 800097c:	f023 0310 	bic.w	r3, r3, #16
 8000980:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000982:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <initialization+0x78c>)
 8000984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000986:	4a38      	ldr	r2, [pc, #224]	; (8000a68 <initialization+0x78c>)
 8000988:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800098c:	6253      	str	r3, [r2, #36]	; 0x24

	//G3 PJ10
	GPIOJ->MODER   &= ~GPIO_MODER_MODER10;
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <initialization+0x78c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	4a35      	ldr	r2, [pc, #212]	; (8000a68 <initialization+0x78c>)
 8000994:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000998:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER10_1;
 800099a:	4b33      	ldr	r3, [pc, #204]	; (8000a68 <initialization+0x78c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4a32      	ldr	r2, [pc, #200]	; (8000a68 <initialization+0x78c>)
 80009a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009a4:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <initialization+0x78c>)
 80009a8:	689b      	ldr	r3, [r3, #8]
 80009aa:	4a2f      	ldr	r2, [pc, #188]	; (8000a68 <initialization+0x78c>)
 80009ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b0:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 80009b2:	4b2d      	ldr	r3, [pc, #180]	; (8000a68 <initialization+0x78c>)
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	4a2c      	ldr	r2, [pc, #176]	; (8000a68 <initialization+0x78c>)
 80009b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009bc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 80009be:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <initialization+0x78c>)
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <initialization+0x78c>)
 80009c4:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 80009c8:	6253      	str	r3, [r2, #36]	; 0x24

	//G4 PJ11
	GPIOJ->MODER   &= ~GPIO_MODER_MODER11;
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <initialization+0x78c>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a26      	ldr	r2, [pc, #152]	; (8000a68 <initialization+0x78c>)
 80009d0:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80009d4:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER11_1;
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <initialization+0x78c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a23      	ldr	r2, [pc, #140]	; (8000a68 <initialization+0x78c>)
 80009dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009e0:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11_1;
 80009e2:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <initialization+0x78c>)
 80009e4:	689b      	ldr	r3, [r3, #8]
 80009e6:	4a20      	ldr	r2, [pc, #128]	; (8000a68 <initialization+0x78c>)
 80009e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009ec:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL3_0;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <initialization+0x78c>)
 80009f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f2:	4a1d      	ldr	r2, [pc, #116]	; (8000a68 <initialization+0x78c>)
 80009f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80009f8:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	; (8000a68 <initialization+0x78c>)
 80009fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fe:	4a1a      	ldr	r2, [pc, #104]	; (8000a68 <initialization+0x78c>)
 8000a00:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000a04:	6253      	str	r3, [r2, #36]	; 0x24

	//G5 PK0
	GPIOK->MODER   &= ~GPIO_MODER_MODER0;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <initialization+0x790>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a18      	ldr	r2, [pc, #96]	; (8000a6c <initialization+0x790>)
 8000a0c:	f023 0303 	bic.w	r3, r3, #3
 8000a10:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER0_1;
 8000a12:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <initialization+0x790>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <initialization+0x790>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <initialization+0x790>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	4a12      	ldr	r2, [pc, #72]	; (8000a6c <initialization+0x790>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <initialization+0x790>)
 8000a2c:	6a1b      	ldr	r3, [r3, #32]
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <initialization+0x790>)
 8000a30:	f023 0301 	bic.w	r3, r3, #1
 8000a34:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <initialization+0x790>)
 8000a38:	6a1b      	ldr	r3, [r3, #32]
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <initialization+0x790>)
 8000a3c:	f043 030e 	orr.w	r3, r3, #14
 8000a40:	6213      	str	r3, [r2, #32]

	//G6 PK1
	GPIOK->MODER   &= ~GPIO_MODER_MODER1;
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <initialization+0x790>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <initialization+0x790>)
 8000a48:	f023 030c 	bic.w	r3, r3, #12
 8000a4c:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER1_1;
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <initialization+0x790>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a06      	ldr	r2, [pc, #24]	; (8000a6c <initialization+0x790>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <initialization+0x790>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	4a03      	ldr	r2, [pc, #12]	; (8000a6c <initialization+0x790>)
 8000a60:	f043 0308 	orr.w	r3, r3, #8
 8000a64:	e004      	b.n	8000a70 <initialization+0x794>
 8000a66:	bf00      	nop
 8000a68:	40022400 	.word	0x40022400
 8000a6c:	40022800 	.word	0x40022800
 8000a70:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 8000a72:	4b95      	ldr	r3, [pc, #596]	; (8000cc8 <initialization+0x9ec>)
 8000a74:	6a1b      	ldr	r3, [r3, #32]
 8000a76:	4a94      	ldr	r2, [pc, #592]	; (8000cc8 <initialization+0x9ec>)
 8000a78:	f023 0310 	bic.w	r3, r3, #16
 8000a7c:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000a7e:	4b92      	ldr	r3, [pc, #584]	; (8000cc8 <initialization+0x9ec>)
 8000a80:	6a1b      	ldr	r3, [r3, #32]
 8000a82:	4a91      	ldr	r2, [pc, #580]	; (8000cc8 <initialization+0x9ec>)
 8000a84:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000a88:	6213      	str	r3, [r2, #32]

	//G7 PK2
	GPIOK->MODER   &= ~GPIO_MODER_MODER2;
 8000a8a:	4b8f      	ldr	r3, [pc, #572]	; (8000cc8 <initialization+0x9ec>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a8e      	ldr	r2, [pc, #568]	; (8000cc8 <initialization+0x9ec>)
 8000a90:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000a94:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER2_1;
 8000a96:	4b8c      	ldr	r3, [pc, #560]	; (8000cc8 <initialization+0x9ec>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a8b      	ldr	r2, [pc, #556]	; (8000cc8 <initialization+0x9ec>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 8000aa2:	4b89      	ldr	r3, [pc, #548]	; (8000cc8 <initialization+0x9ec>)
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	4a88      	ldr	r2, [pc, #544]	; (8000cc8 <initialization+0x9ec>)
 8000aa8:	f043 0320 	orr.w	r3, r3, #32
 8000aac:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 8000aae:	4b86      	ldr	r3, [pc, #536]	; (8000cc8 <initialization+0x9ec>)
 8000ab0:	6a1b      	ldr	r3, [r3, #32]
 8000ab2:	4a85      	ldr	r2, [pc, #532]	; (8000cc8 <initialization+0x9ec>)
 8000ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ab8:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000aba:	4b83      	ldr	r3, [pc, #524]	; (8000cc8 <initialization+0x9ec>)
 8000abc:	6a1b      	ldr	r3, [r3, #32]
 8000abe:	4a82      	ldr	r2, [pc, #520]	; (8000cc8 <initialization+0x9ec>)
 8000ac0:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000ac4:	6213      	str	r3, [r2, #32]

	//VSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER9;
 8000ac6:	4b81      	ldr	r3, [pc, #516]	; (8000ccc <initialization+0x9f0>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4a80      	ldr	r2, [pc, #512]	; (8000ccc <initialization+0x9f0>)
 8000acc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000ad0:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER9_1;
 8000ad2:	4b7e      	ldr	r3, [pc, #504]	; (8000ccc <initialization+0x9f0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a7d      	ldr	r2, [pc, #500]	; (8000ccc <initialization+0x9f0>)
 8000ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000adc:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 8000ade:	4b7b      	ldr	r3, [pc, #492]	; (8000ccc <initialization+0x9f0>)
 8000ae0:	689b      	ldr	r3, [r3, #8]
 8000ae2:	4a7a      	ldr	r2, [pc, #488]	; (8000ccc <initialization+0x9f0>)
 8000ae4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ae8:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 8000aea:	4b78      	ldr	r3, [pc, #480]	; (8000ccc <initialization+0x9f0>)
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	4a77      	ldr	r2, [pc, #476]	; (8000ccc <initialization+0x9f0>)
 8000af0:	f023 0310 	bic.w	r3, r3, #16
 8000af4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000af6:	4b75      	ldr	r3, [pc, #468]	; (8000ccc <initialization+0x9f0>)
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	4a74      	ldr	r2, [pc, #464]	; (8000ccc <initialization+0x9f0>)
 8000afc:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000b00:	6253      	str	r3, [r2, #36]	; 0x24

	//HSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER10;
 8000b02:	4b72      	ldr	r3, [pc, #456]	; (8000ccc <initialization+0x9f0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a71      	ldr	r2, [pc, #452]	; (8000ccc <initialization+0x9f0>)
 8000b08:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000b0c:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER10_1;
 8000b0e:	4b6f      	ldr	r3, [pc, #444]	; (8000ccc <initialization+0x9f0>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a6e      	ldr	r2, [pc, #440]	; (8000ccc <initialization+0x9f0>)
 8000b14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b18:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 8000b1a:	4b6c      	ldr	r3, [pc, #432]	; (8000ccc <initialization+0x9f0>)
 8000b1c:	689b      	ldr	r3, [r3, #8]
 8000b1e:	4a6b      	ldr	r2, [pc, #428]	; (8000ccc <initialization+0x9f0>)
 8000b20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b24:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 8000b26:	4b69      	ldr	r3, [pc, #420]	; (8000ccc <initialization+0x9f0>)
 8000b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b2a:	4a68      	ldr	r2, [pc, #416]	; (8000ccc <initialization+0x9f0>)
 8000b2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b30:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000b32:	4b66      	ldr	r3, [pc, #408]	; (8000ccc <initialization+0x9f0>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b36:	4a65      	ldr	r2, [pc, #404]	; (8000ccc <initialization+0x9f0>)
 8000b38:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000b3c:	6253      	str	r3, [r2, #36]	; 0x24

	//CLK
	GPIOI->MODER   &= ~GPIO_MODER_MODER14;
 8000b3e:	4b63      	ldr	r3, [pc, #396]	; (8000ccc <initialization+0x9f0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a62      	ldr	r2, [pc, #392]	; (8000ccc <initialization+0x9f0>)
 8000b44:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000b48:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER14_1;
 8000b4a:	4b60      	ldr	r3, [pc, #384]	; (8000ccc <initialization+0x9f0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a5f      	ldr	r2, [pc, #380]	; (8000ccc <initialization+0x9f0>)
 8000b50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b54:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 8000b56:	4b5d      	ldr	r3, [pc, #372]	; (8000ccc <initialization+0x9f0>)
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	4a5c      	ldr	r2, [pc, #368]	; (8000ccc <initialization+0x9f0>)
 8000b5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b60:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 8000b62:	4b5a      	ldr	r3, [pc, #360]	; (8000ccc <initialization+0x9f0>)
 8000b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b66:	4a59      	ldr	r2, [pc, #356]	; (8000ccc <initialization+0x9f0>)
 8000b68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000b6c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000b6e:	4b57      	ldr	r3, [pc, #348]	; (8000ccc <initialization+0x9f0>)
 8000b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b72:	4a56      	ldr	r2, [pc, #344]	; (8000ccc <initialization+0x9f0>)
 8000b74:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000b78:	6253      	str	r3, [r2, #36]	; 0x24

	//DE
	GPIOK->MODER   &= ~GPIO_MODER_MODER7;
 8000b7a:	4b53      	ldr	r3, [pc, #332]	; (8000cc8 <initialization+0x9ec>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a52      	ldr	r2, [pc, #328]	; (8000cc8 <initialization+0x9ec>)
 8000b80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b84:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER7_1;
 8000b86:	4b50      	ldr	r3, [pc, #320]	; (8000cc8 <initialization+0x9ec>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a4f      	ldr	r2, [pc, #316]	; (8000cc8 <initialization+0x9ec>)
 8000b8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b90:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 8000b92:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <initialization+0x9ec>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	4a4c      	ldr	r2, [pc, #304]	; (8000cc8 <initialization+0x9ec>)
 8000b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b9c:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 8000b9e:	4b4a      	ldr	r3, [pc, #296]	; (8000cc8 <initialization+0x9ec>)
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	4a49      	ldr	r2, [pc, #292]	; (8000cc8 <initialization+0x9ec>)
 8000ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000baa:	4b47      	ldr	r3, [pc, #284]	; (8000cc8 <initialization+0x9ec>)
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	4a46      	ldr	r2, [pc, #280]	; (8000cc8 <initialization+0x9ec>)
 8000bb0:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000bb4:	6213      	str	r3, [r2, #32]

	//LED
	GPIOK->MODER &= ~GPIO_MODER_MODER3;
 8000bb6:	4b44      	ldr	r3, [pc, #272]	; (8000cc8 <initialization+0x9ec>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a43      	ldr	r2, [pc, #268]	; (8000cc8 <initialization+0x9ec>)
 8000bbc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000bc0:	6013      	str	r3, [r2, #0]
	GPIOK->MODER |= GPIO_MODER_MODER3_0;
 8000bc2:	4b41      	ldr	r3, [pc, #260]	; (8000cc8 <initialization+0x9ec>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <initialization+0x9ec>)
 8000bc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bcc:	6013      	str	r3, [r2, #0]
	GPIOK->BSRR |= GPIO_BSRR_BS_3;
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <initialization+0x9ec>)
 8000bd0:	699b      	ldr	r3, [r3, #24]
 8000bd2:	4a3d      	ldr	r2, [pc, #244]	; (8000cc8 <initialization+0x9ec>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6193      	str	r3, [r2, #24]

	//ON
	GPIOI->MODER &= ~GPIO_MODER_MODER12;
 8000bda:	4b3c      	ldr	r3, [pc, #240]	; (8000ccc <initialization+0x9f0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a3b      	ldr	r2, [pc, #236]	; (8000ccc <initialization+0x9f0>)
 8000be0:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000be4:	6013      	str	r3, [r2, #0]
	GPIOI->MODER |= GPIO_MODER_MODER12_0;
 8000be6:	4b39      	ldr	r3, [pc, #228]	; (8000ccc <initialization+0x9f0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a38      	ldr	r2, [pc, #224]	; (8000ccc <initialization+0x9f0>)
 8000bec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bf0:	6013      	str	r3, [r2, #0]
	GPIOI->BSRR |= GPIO_BSRR_BS_12;
 8000bf2:	4b36      	ldr	r3, [pc, #216]	; (8000ccc <initialization+0x9f0>)
 8000bf4:	699b      	ldr	r3, [r3, #24]
 8000bf6:	4a35      	ldr	r2, [pc, #212]	; (8000ccc <initialization+0x9f0>)
 8000bf8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bfc:	6193      	str	r3, [r2, #24]

	GPIOC->MODER &= ~GPIO_MODER_MODER7;
 8000bfe:	4b34      	ldr	r3, [pc, #208]	; (8000cd0 <initialization+0x9f4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a33      	ldr	r2, [pc, #204]	; (8000cd0 <initialization+0x9f4>)
 8000c04:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c08:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 8000c0a:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <initialization+0x9f4>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a30      	ldr	r2, [pc, #192]	; (8000cd0 <initialization+0x9f4>)
 8000c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c14:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BS_7;
 8000c16:	4b2e      	ldr	r3, [pc, #184]	; (8000cd0 <initialization+0x9f4>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	4a2d      	ldr	r2, [pc, #180]	; (8000cd0 <initialization+0x9f4>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6193      	str	r3, [r2, #24]

	LTDC->SSCR |= ((DISPLAY_HSYNC - 1) << 16 | (DISPLAY_VSYNC - 1));
 8000c22:	4b2c      	ldr	r3, [pc, #176]	; (8000cd4 <initialization+0x9f8>)
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	492b      	ldr	r1, [pc, #172]	; (8000cd4 <initialization+0x9f8>)
 8000c28:	4b2b      	ldr	r3, [pc, #172]	; (8000cd8 <initialization+0x9fc>)
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	608b      	str	r3, [r1, #8]
	LTDC->BPCR |= ((DISPLAY_HSYNC+DISPLAY_HBP-1) << 16 | (DISPLAY_VSYNC+DISPLAY_VBP-1));
 8000c2e:	4b29      	ldr	r3, [pc, #164]	; (8000cd4 <initialization+0x9f8>)
 8000c30:	68da      	ldr	r2, [r3, #12]
 8000c32:	4928      	ldr	r1, [pc, #160]	; (8000cd4 <initialization+0x9f8>)
 8000c34:	4b29      	ldr	r3, [pc, #164]	; (8000cdc <initialization+0xa00>)
 8000c36:	4313      	orrs	r3, r2
 8000c38:	60cb      	str	r3, [r1, #12]
	LTDC->AWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP - 1) << 16 | (DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1));
 8000c3a:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <initialization+0x9f8>)
 8000c3c:	691a      	ldr	r2, [r3, #16]
 8000c3e:	4925      	ldr	r1, [pc, #148]	; (8000cd4 <initialization+0x9f8>)
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <initialization+0xa04>)
 8000c42:	4313      	orrs	r3, r2
 8000c44:	610b      	str	r3, [r1, #16]
	LTDC->TWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP + DISPLAY_HFP -1)<< 16 |(DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP + DISPLAY_VFP - 1));
 8000c46:	4b23      	ldr	r3, [pc, #140]	; (8000cd4 <initialization+0x9f8>)
 8000c48:	695a      	ldr	r2, [r3, #20]
 8000c4a:	4922      	ldr	r1, [pc, #136]	; (8000cd4 <initialization+0x9f8>)
 8000c4c:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <initialization+0xa08>)
 8000c4e:	4313      	orrs	r3, r2
 8000c50:	614b      	str	r3, [r1, #20]
	LTDC_Layer2->WHPCR |= (((DISPLAY_WIDTH + DISPLAY_HBP + DISPLAY_HSYNC - 1) << 16) | (DISPLAY_HBP + DISPLAY_HSYNC));
 8000c52:	4b25      	ldr	r3, [pc, #148]	; (8000ce8 <initialization+0xa0c>)
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4924      	ldr	r1, [pc, #144]	; (8000ce8 <initialization+0xa0c>)
 8000c58:	4b24      	ldr	r3, [pc, #144]	; (8000cec <initialization+0xa10>)
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	604b      	str	r3, [r1, #4]
	LTDC_Layer2->WVPCR |= (((DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1) << 16) |(DISPLAY_VSYNC + DISPLAY_VBP));
 8000c5e:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <initialization+0xa0c>)
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4921      	ldr	r1, [pc, #132]	; (8000ce8 <initialization+0xa0c>)
 8000c64:	4b22      	ldr	r3, [pc, #136]	; (8000cf0 <initialization+0xa14>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	608b      	str	r3, [r1, #8]
	LTDC_Layer2->PFCR = 2;
 8000c6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <initialization+0xa0c>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	611a      	str	r2, [r3, #16]
	LTDC_Layer2->BFCR |= ((4 << 8) | 5);
 8000c70:	4b1d      	ldr	r3, [pc, #116]	; (8000ce8 <initialization+0xa0c>)
 8000c72:	69da      	ldr	r2, [r3, #28]
 8000c74:	491c      	ldr	r1, [pc, #112]	; (8000ce8 <initialization+0xa0c>)
 8000c76:	f240 4305 	movw	r3, #1029	; 0x405
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61cb      	str	r3, [r1, #28]
	LTDC_Layer2->CACR = 0xff;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <initialization+0xa0c>)
 8000c80:	22ff      	movs	r2, #255	; 0xff
 8000c82:	615a      	str	r2, [r3, #20]
	LTDC_Layer2->CFBLR |= (((PIXEL_SIZE * DISPLAY_WIDTH) << 16) | (PIXEL_SIZE * DISPLAY_WIDTH + 3));
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <initialization+0xa0c>)
 8000c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c88:	4917      	ldr	r1, [pc, #92]	; (8000ce8 <initialization+0xa0c>)
 8000c8a:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <initialization+0xa18>)
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	62cb      	str	r3, [r1, #44]	; 0x2c
	LTDC_Layer2->CFBLNR |= DISPLAY_HEIGHT;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <initialization+0xa0c>)
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <initialization+0xa0c>)
 8000c96:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8000c9a:	6313      	str	r3, [r2, #48]	; 0x30
	LTDC_Layer2->CR |= LTDC_LxCR_LEN;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <initialization+0xa0c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <initialization+0xa0c>)
 8000ca2:	f043 0301 	orr.w	r3, r3, #1
 8000ca6:	6013      	str	r3, [r2, #0]
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <initialization+0x9f8>)
 8000caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cac:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <initialization+0x9f8>)
 8000cae:	f043 0302 	orr.w	r3, r3, #2
 8000cb2:	6253      	str	r3, [r2, #36]	; 0x24
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <initialization+0x9f8>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	4a06      	ldr	r2, [pc, #24]	; (8000cd4 <initialization+0x9f8>)
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	6193      	str	r3, [r2, #24]

	for(int i = 0; i <= 130559; ++i)
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	e023      	b.n	8000d0e <initialization+0xa32>
 8000cc6:	bf00      	nop
 8000cc8:	40022800 	.word	0x40022800
 8000ccc:	40022000 	.word	0x40022000
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40016800 	.word	0x40016800
 8000cd8:	001d0009 	.word	0x001d0009
 8000cdc:	002a000b 	.word	0x002a000b
 8000ce0:	020a011b 	.word	0x020a011b
 8000ce4:	022a011d 	.word	0x022a011d
 8000ce8:	40016904 	.word	0x40016904
 8000cec:	020a002b 	.word	0x020a002b
 8000cf0:	011b000c 	.word	0x011b000c
 8000cf4:	07800783 	.word	0x07800783
		screen[i] = main_picture[i];
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	; (8000d2c <initialization+0xa50>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d00:	4a0b      	ldr	r2, [pc, #44]	; (8000d30 <initialization+0xa54>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i <= 130559; ++i)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000d14:	dbf0      	blt.n	8000cf8 <initialization+0xa1c>

	GPIOK->BSRR |= GPIO_BSRR_BS_3;
 8000d16:	4b07      	ldr	r3, [pc, #28]	; (8000d34 <initialization+0xa58>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	4a06      	ldr	r2, [pc, #24]	; (8000d34 <initialization+0xa58>)
 8000d1c:	f043 0308 	orr.w	r3, r3, #8
 8000d20:	6193      	str	r3, [r2, #24]
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	080aa54c 	.word	0x080aa54c
 8000d30:	2000001c 	.word	0x2000001c
 8000d34:	40022800 	.word	0x40022800

08000d38 <change_digit_1>:

void change_digit_1(int poz, int number)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b09b      	sub	sp, #108	; 0x6c
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
	int x = 0;
 8000d42:	2300      	movs	r3, #0
 8000d44:	667b      	str	r3, [r7, #100]	; 0x64
	int k = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	663b      	str	r3, [r7, #96]	; 0x60

	if(poz==1)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d101      	bne.n	8000d54 <change_digit_1+0x1c>
		x = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	667b      	str	r3, [r7, #100]	; 0x64
	if(poz==2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d101      	bne.n	8000d5e <change_digit_1+0x26>
		x = 38;
 8000d5a:	2326      	movs	r3, #38	; 0x26
 8000d5c:	667b      	str	r3, [r7, #100]	; 0x64
	if(poz==3)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d101      	bne.n	8000d68 <change_digit_1+0x30>
		x = 86;
 8000d64:	2356      	movs	r3, #86	; 0x56
 8000d66:	667b      	str	r3, [r7, #100]	; 0x64
	if(poz==4)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d101      	bne.n	8000d72 <change_digit_1+0x3a>
		x = 124;
 8000d6e:	237c      	movs	r3, #124	; 0x7c
 8000d70:	667b      	str	r3, [r7, #100]	; 0x64

	if(number==10)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	2b0a      	cmp	r3, #10
 8000d76:	d126      	bne.n	8000dc6 <change_digit_1+0x8e>
		for(int i = 0; i <= 57; ++i)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d7c:	e020      	b.n	8000dc0 <change_digit_1+0x88>
			for(int j = 0; j <= 32; ++j)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d82:	e017      	b.n	8000db4 <change_digit_1+0x7c>
				screen[x+5113+i*480+j] = none_picture_3[k++];
 8000d84:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000d86:	1c4b      	adds	r3, r1, #1
 8000d88:	663b      	str	r3, [r7, #96]	; 0x60
 8000d8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000d8c:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000d90:	441a      	add	r2, r3
 8000d92:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000d94:	4603      	mov	r3, r0
 8000d96:	011b      	lsls	r3, r3, #4
 8000d98:	1a1b      	subs	r3, r3, r0
 8000d9a:	015b      	lsls	r3, r3, #5
 8000d9c:	441a      	add	r2, r3
 8000d9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000da0:	4413      	add	r3, r2
 8000da2:	4aa0      	ldr	r2, [pc, #640]	; (8001024 <change_digit_1+0x2ec>)
 8000da4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000da8:	4a9f      	ldr	r2, [pc, #636]	; (8001028 <change_digit_1+0x2f0>)
 8000daa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000db0:	3301      	adds	r3, #1
 8000db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8000db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000db6:	2b20      	cmp	r3, #32
 8000db8:	dde4      	ble.n	8000d84 <change_digit_1+0x4c>
		for(int i = 0; i <= 57; ++i)
 8000dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000dc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dc2:	2b39      	cmp	r3, #57	; 0x39
 8000dc4:	dddb      	ble.n	8000d7e <change_digit_1+0x46>
	if(number==0)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d126      	bne.n	8000e1a <change_digit_1+0xe2>
		for(int i = 0; i <= 57; ++i)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	657b      	str	r3, [r7, #84]	; 0x54
 8000dd0:	e020      	b.n	8000e14 <change_digit_1+0xdc>
			for(int j = 0; j <= 32; ++j)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	653b      	str	r3, [r7, #80]	; 0x50
 8000dd6:	e017      	b.n	8000e08 <change_digit_1+0xd0>
				screen[x+5113+i*480+j] = zero_picture_1[k++];
 8000dd8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000dda:	1c4b      	adds	r3, r1, #1
 8000ddc:	663b      	str	r3, [r7, #96]	; 0x60
 8000dde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000de0:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000de4:	441a      	add	r2, r3
 8000de6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000de8:	4603      	mov	r3, r0
 8000dea:	011b      	lsls	r3, r3, #4
 8000dec:	1a1b      	subs	r3, r3, r0
 8000dee:	015b      	lsls	r3, r3, #5
 8000df0:	441a      	add	r2, r3
 8000df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000df4:	4413      	add	r3, r2
 8000df6:	4a8d      	ldr	r2, [pc, #564]	; (800102c <change_digit_1+0x2f4>)
 8000df8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000dfc:	4a8a      	ldr	r2, [pc, #552]	; (8001028 <change_digit_1+0x2f0>)
 8000dfe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e04:	3301      	adds	r3, #1
 8000e06:	653b      	str	r3, [r7, #80]	; 0x50
 8000e08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000e0a:	2b20      	cmp	r3, #32
 8000e0c:	dde4      	ble.n	8000dd8 <change_digit_1+0xa0>
		for(int i = 0; i <= 57; ++i)
 8000e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e10:	3301      	adds	r3, #1
 8000e12:	657b      	str	r3, [r7, #84]	; 0x54
 8000e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e16:	2b39      	cmp	r3, #57	; 0x39
 8000e18:	dddb      	ble.n	8000dd2 <change_digit_1+0x9a>
	if(number==1)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d126      	bne.n	8000e6e <change_digit_1+0x136>
		for(int i = 0; i <= 57; ++i)
 8000e20:	2300      	movs	r3, #0
 8000e22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e24:	e020      	b.n	8000e68 <change_digit_1+0x130>
			for(int j = 0; j <= 32; ++j)
 8000e26:	2300      	movs	r3, #0
 8000e28:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e2a:	e017      	b.n	8000e5c <change_digit_1+0x124>
				screen[x+5113+i*480+j] = one_picture_1[k++];
 8000e2c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e2e:	1c4b      	adds	r3, r1, #1
 8000e30:	663b      	str	r3, [r7, #96]	; 0x60
 8000e32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e34:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000e38:	441a      	add	r2, r3
 8000e3a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	011b      	lsls	r3, r3, #4
 8000e40:	1a1b      	subs	r3, r3, r0
 8000e42:	015b      	lsls	r3, r3, #5
 8000e44:	441a      	add	r2, r3
 8000e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a79      	ldr	r2, [pc, #484]	; (8001030 <change_digit_1+0x2f8>)
 8000e4c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000e50:	4a75      	ldr	r2, [pc, #468]	; (8001028 <change_digit_1+0x2f0>)
 8000e52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e58:	3301      	adds	r3, #1
 8000e5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8000e5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000e5e:	2b20      	cmp	r3, #32
 8000e60:	dde4      	ble.n	8000e2c <change_digit_1+0xf4>
		for(int i = 0; i <= 57; ++i)
 8000e62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e64:	3301      	adds	r3, #1
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e6a:	2b39      	cmp	r3, #57	; 0x39
 8000e6c:	dddb      	ble.n	8000e26 <change_digit_1+0xee>
	if(number==2)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d126      	bne.n	8000ec2 <change_digit_1+0x18a>
		for(int i = 0; i <= 57; ++i)
 8000e74:	2300      	movs	r3, #0
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
 8000e78:	e020      	b.n	8000ebc <change_digit_1+0x184>
			for(int j = 0; j <= 32; ++j)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8000e7e:	e017      	b.n	8000eb0 <change_digit_1+0x178>
				screen[x+5113+i*480+j] = two_picture_1[k++];
 8000e80:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e82:	1c4b      	adds	r3, r1, #1
 8000e84:	663b      	str	r3, [r7, #96]	; 0x60
 8000e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000e88:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000e8c:	441a      	add	r2, r3
 8000e8e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000e90:	4603      	mov	r3, r0
 8000e92:	011b      	lsls	r3, r3, #4
 8000e94:	1a1b      	subs	r3, r3, r0
 8000e96:	015b      	lsls	r3, r3, #5
 8000e98:	441a      	add	r2, r3
 8000e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e9c:	4413      	add	r3, r2
 8000e9e:	4a65      	ldr	r2, [pc, #404]	; (8001034 <change_digit_1+0x2fc>)
 8000ea0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000ea4:	4a60      	ldr	r2, [pc, #384]	; (8001028 <change_digit_1+0x2f0>)
 8000ea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eac:	3301      	adds	r3, #1
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
 8000eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eb2:	2b20      	cmp	r3, #32
 8000eb4:	dde4      	ble.n	8000e80 <change_digit_1+0x148>
		for(int i = 0; i <= 57; ++i)
 8000eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000eb8:	3301      	adds	r3, #1
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
 8000ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ebe:	2b39      	cmp	r3, #57	; 0x39
 8000ec0:	dddb      	ble.n	8000e7a <change_digit_1+0x142>
	if(number==3)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b03      	cmp	r3, #3
 8000ec6:	d126      	bne.n	8000f16 <change_digit_1+0x1de>
		for(int i = 0; i <= 57; ++i)
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ecc:	e020      	b.n	8000f10 <change_digit_1+0x1d8>
			for(int j = 0; j <= 32; ++j)
 8000ece:	2300      	movs	r3, #0
 8000ed0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ed2:	e017      	b.n	8000f04 <change_digit_1+0x1cc>
				screen[x+5113+i*480+j] = three_picture_1[k++];
 8000ed4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ed6:	1c4b      	adds	r3, r1, #1
 8000ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8000eda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000edc:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000ee0:	441a      	add	r2, r3
 8000ee2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	011b      	lsls	r3, r3, #4
 8000ee8:	1a1b      	subs	r3, r3, r0
 8000eea:	015b      	lsls	r3, r3, #5
 8000eec:	441a      	add	r2, r3
 8000eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ef0:	4413      	add	r3, r2
 8000ef2:	4a51      	ldr	r2, [pc, #324]	; (8001038 <change_digit_1+0x300>)
 8000ef4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000ef8:	4a4b      	ldr	r2, [pc, #300]	; (8001028 <change_digit_1+0x2f0>)
 8000efa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f00:	3301      	adds	r3, #1
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f06:	2b20      	cmp	r3, #32
 8000f08:	dde4      	ble.n	8000ed4 <change_digit_1+0x19c>
		for(int i = 0; i <= 57; ++i)
 8000f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f12:	2b39      	cmp	r3, #57	; 0x39
 8000f14:	dddb      	ble.n	8000ece <change_digit_1+0x196>
	if(number==4)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	d126      	bne.n	8000f6a <change_digit_1+0x232>
		for(int i = 0; i <= 57; ++i)
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	637b      	str	r3, [r7, #52]	; 0x34
 8000f20:	e020      	b.n	8000f64 <change_digit_1+0x22c>
			for(int j = 0; j <= 32; ++j)
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
 8000f26:	e017      	b.n	8000f58 <change_digit_1+0x220>
				screen[x+5113+i*480+j] = four_picture_1[k++];
 8000f28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f2a:	1c4b      	adds	r3, r1, #1
 8000f2c:	663b      	str	r3, [r7, #96]	; 0x60
 8000f2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f30:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000f34:	441a      	add	r2, r3
 8000f36:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000f38:	4603      	mov	r3, r0
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	1a1b      	subs	r3, r3, r0
 8000f3e:	015b      	lsls	r3, r3, #5
 8000f40:	441a      	add	r2, r3
 8000f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f44:	4413      	add	r3, r2
 8000f46:	4a3d      	ldr	r2, [pc, #244]	; (800103c <change_digit_1+0x304>)
 8000f48:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000f4c:	4a36      	ldr	r2, [pc, #216]	; (8001028 <change_digit_1+0x2f0>)
 8000f4e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f54:	3301      	adds	r3, #1
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
 8000f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f5a:	2b20      	cmp	r3, #32
 8000f5c:	dde4      	ble.n	8000f28 <change_digit_1+0x1f0>
		for(int i = 0; i <= 57; ++i)
 8000f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f60:	3301      	adds	r3, #1
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
 8000f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f66:	2b39      	cmp	r3, #57	; 0x39
 8000f68:	dddb      	ble.n	8000f22 <change_digit_1+0x1ea>
	if(number==5)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	2b05      	cmp	r3, #5
 8000f6e:	d126      	bne.n	8000fbe <change_digit_1+0x286>
		for(int i = 0; i <= 57; ++i)
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f74:	e020      	b.n	8000fb8 <change_digit_1+0x280>
			for(int j = 0; j <= 32; ++j)
 8000f76:	2300      	movs	r3, #0
 8000f78:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f7a:	e017      	b.n	8000fac <change_digit_1+0x274>
				screen[x+5113+i*480+j] = five_picture_1[k++];
 8000f7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000f7e:	1c4b      	adds	r3, r1, #1
 8000f80:	663b      	str	r3, [r7, #96]	; 0x60
 8000f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f84:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000f88:	441a      	add	r2, r3
 8000f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	011b      	lsls	r3, r3, #4
 8000f90:	1a1b      	subs	r3, r3, r0
 8000f92:	015b      	lsls	r3, r3, #5
 8000f94:	441a      	add	r2, r3
 8000f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f98:	4413      	add	r3, r2
 8000f9a:	4a29      	ldr	r2, [pc, #164]	; (8001040 <change_digit_1+0x308>)
 8000f9c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000fa0:	4a21      	ldr	r2, [pc, #132]	; (8001028 <change_digit_1+0x2f0>)
 8000fa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa8:	3301      	adds	r3, #1
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fae:	2b20      	cmp	r3, #32
 8000fb0:	dde4      	ble.n	8000f7c <change_digit_1+0x244>
		for(int i = 0; i <= 57; ++i)
 8000fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fba:	2b39      	cmp	r3, #57	; 0x39
 8000fbc:	dddb      	ble.n	8000f76 <change_digit_1+0x23e>
	if(number==6)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	2b06      	cmp	r3, #6
 8000fc2:	d126      	bne.n	8001012 <change_digit_1+0x2da>
		for(int i = 0; i <= 57; ++i)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8000fc8:	e020      	b.n	800100c <change_digit_1+0x2d4>
			for(int j = 0; j <= 32; ++j)
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
 8000fce:	e017      	b.n	8001000 <change_digit_1+0x2c8>
				screen[x+5113+i*480+j] = six_picture_1[k++];
 8000fd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000fd2:	1c4b      	adds	r3, r1, #1
 8000fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8000fd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000fd8:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000fdc:	441a      	add	r2, r3
 8000fde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	011b      	lsls	r3, r3, #4
 8000fe4:	1a1b      	subs	r3, r3, r0
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	441a      	add	r2, r3
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	4413      	add	r3, r2
 8000fee:	4a15      	ldr	r2, [pc, #84]	; (8001044 <change_digit_1+0x30c>)
 8000ff0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <change_digit_1+0x2f0>)
 8000ff6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	2b20      	cmp	r3, #32
 8001004:	dde4      	ble.n	8000fd0 <change_digit_1+0x298>
		for(int i = 0; i <= 57; ++i)
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	3301      	adds	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	2b39      	cmp	r3, #57	; 0x39
 8001010:	dddb      	ble.n	8000fca <change_digit_1+0x292>
	if(number==7)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	2b07      	cmp	r3, #7
 8001016:	d138      	bne.n	800108a <change_digit_1+0x352>
		for(int i = 0; i <= 57; ++i)
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
 800101c:	e032      	b.n	8001084 <change_digit_1+0x34c>
			for(int j = 0; j <= 32; ++j)
 800101e:	2300      	movs	r3, #0
 8001020:	61bb      	str	r3, [r7, #24]
 8001022:	e029      	b.n	8001078 <change_digit_1+0x340>
 8001024:	080631ac 	.word	0x080631ac
 8001028:	2000001c 	.word	0x2000001c
 800102c:	0800a520 	.word	0x0800a520
 8001030:	08005a5c 	.word	0x08005a5c
 8001034:	0800962c 	.word	0x0800962c
 8001038:	08008738 	.word	0x08008738
 800103c:	08003c74 	.word	0x08003c74
 8001040:	08002d80 	.word	0x08002d80
 8001044:	08007844 	.word	0x08007844
				screen[x+5113+i*480+j] = seven_picture_1[k++];
 8001048:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800104a:	1c4b      	adds	r3, r1, #1
 800104c:	663b      	str	r3, [r7, #96]	; 0x60
 800104e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001050:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8001054:	441a      	add	r2, r3
 8001056:	69f8      	ldr	r0, [r7, #28]
 8001058:	4603      	mov	r3, r0
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	1a1b      	subs	r3, r3, r0
 800105e:	015b      	lsls	r3, r3, #5
 8001060:	441a      	add	r2, r3
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	4413      	add	r3, r2
 8001066:	4a3a      	ldr	r2, [pc, #232]	; (8001150 <change_digit_1+0x418>)
 8001068:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800106c:	4a39      	ldr	r2, [pc, #228]	; (8001154 <change_digit_1+0x41c>)
 800106e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	3301      	adds	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	2b20      	cmp	r3, #32
 800107c:	dde4      	ble.n	8001048 <change_digit_1+0x310>
		for(int i = 0; i <= 57; ++i)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b39      	cmp	r3, #57	; 0x39
 8001088:	ddc9      	ble.n	800101e <change_digit_1+0x2e6>
	if(number==8)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2b08      	cmp	r3, #8
 800108e:	d126      	bne.n	80010de <change_digit_1+0x3a6>
		for(int i = 0; i <= 57; ++i)
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	e020      	b.n	80010d8 <change_digit_1+0x3a0>
			for(int j = 0; j <= 32; ++j)
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
 800109a:	e017      	b.n	80010cc <change_digit_1+0x394>
				screen[x+5113+i*480+j] = eigth_picture_1[k++];
 800109c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800109e:	1c4b      	adds	r3, r1, #1
 80010a0:	663b      	str	r3, [r7, #96]	; 0x60
 80010a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010a4:	f241 32f9 	movw	r2, #5113	; 0x13f9
 80010a8:	441a      	add	r2, r3
 80010aa:	6978      	ldr	r0, [r7, #20]
 80010ac:	4603      	mov	r3, r0
 80010ae:	011b      	lsls	r3, r3, #4
 80010b0:	1a1b      	subs	r3, r3, r0
 80010b2:	015b      	lsls	r3, r3, #5
 80010b4:	441a      	add	r2, r3
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a27      	ldr	r2, [pc, #156]	; (8001158 <change_digit_1+0x420>)
 80010bc:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80010c0:	4a24      	ldr	r2, [pc, #144]	; (8001154 <change_digit_1+0x41c>)
 80010c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3301      	adds	r3, #1
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	2b20      	cmp	r3, #32
 80010d0:	dde4      	ble.n	800109c <change_digit_1+0x364>
		for(int i = 0; i <= 57; ++i)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	3301      	adds	r3, #1
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	2b39      	cmp	r3, #57	; 0x39
 80010dc:	dddb      	ble.n	8001096 <change_digit_1+0x35e>
	if(number==9)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	2b09      	cmp	r3, #9
 80010e2:	d126      	bne.n	8001132 <change_digit_1+0x3fa>
		for(int i = 0; i <= 57; ++i)
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	e020      	b.n	800112c <change_digit_1+0x3f4>
			for(int j = 0; j <= 32; ++j)
 80010ea:	2300      	movs	r3, #0
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	e017      	b.n	8001120 <change_digit_1+0x3e8>
				screen[x+5113+i*480+j] = nine_picture_1[k++];
 80010f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80010f2:	1c4b      	adds	r3, r1, #1
 80010f4:	663b      	str	r3, [r7, #96]	; 0x60
 80010f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010f8:	f241 32f9 	movw	r2, #5113	; 0x13f9
 80010fc:	441a      	add	r2, r3
 80010fe:	68f8      	ldr	r0, [r7, #12]
 8001100:	4603      	mov	r3, r0
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	1a1b      	subs	r3, r3, r0
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	441a      	add	r2, r3
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <change_digit_1+0x424>)
 8001110:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001114:	4a0f      	ldr	r2, [pc, #60]	; (8001154 <change_digit_1+0x41c>)
 8001116:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	3301      	adds	r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	2b20      	cmp	r3, #32
 8001124:	dde4      	ble.n	80010f0 <change_digit_1+0x3b8>
		for(int i = 0; i <= 57; ++i)
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3301      	adds	r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b39      	cmp	r3, #57	; 0x39
 8001130:	dddb      	ble.n	80010ea <change_digit_1+0x3b2>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <change_digit_1+0x428>)
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <change_digit_1+0x41c>)
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <change_digit_1+0x42c>)
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	4a09      	ldr	r2, [pc, #36]	; (8001164 <change_digit_1+0x42c>)
 800113e:	f043 0302 	orr.w	r3, r3, #2
 8001142:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001144:	bf00      	nop
 8001146:	376c      	adds	r7, #108	; 0x6c
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	08006950 	.word	0x08006950
 8001154:	2000001c 	.word	0x2000001c
 8001158:	0800b414 	.word	0x0800b414
 800115c:	08004b68 	.word	0x08004b68
 8001160:	40016904 	.word	0x40016904
 8001164:	40016800 	.word	0x40016800

08001168 <change_digit_2>:

void change_digit_2(int poz, int number)
{
 8001168:	b480      	push	{r7}
 800116a:	b099      	sub	sp, #100	; 0x64
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
	int x = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	65fb      	str	r3, [r7, #92]	; 0x5c
	int k = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	65bb      	str	r3, [r7, #88]	; 0x58

	if(poz==1)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <change_digit_2+0x1c>
		x = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d101      	bne.n	800118e <change_digit_2+0x26>
		x = 110;
 800118a:	236e      	movs	r3, #110	; 0x6e
 800118c:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==3)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b03      	cmp	r3, #3
 8001192:	d101      	bne.n	8001198 <change_digit_2+0x30>
		x = 246;
 8001194:	23f6      	movs	r3, #246	; 0xf6
 8001196:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==4)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b04      	cmp	r3, #4
 800119c:	d102      	bne.n	80011a4 <change_digit_2+0x3c>
		x = 356;
 800119e:	f44f 73b2 	mov.w	r3, #356	; 0x164
 80011a2:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(number==0)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d126      	bne.n	80011f8 <change_digit_2+0x90>
		for(int i = 0; i <= 173; ++i)
 80011aa:	2300      	movs	r3, #0
 80011ac:	657b      	str	r3, [r7, #84]	; 0x54
 80011ae:	e020      	b.n	80011f2 <change_digit_2+0x8a>
			for(int j = 0; j <= 98; ++j)
 80011b0:	2300      	movs	r3, #0
 80011b2:	653b      	str	r3, [r7, #80]	; 0x50
 80011b4:	e017      	b.n	80011e6 <change_digit_2+0x7e>
				screen[x+42253+i*480+j] = zero_picture_2[k++];
 80011b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80011b8:	1c4b      	adds	r3, r1, #1
 80011ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80011bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011be:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80011c2:	441a      	add	r2, r3
 80011c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80011c6:	4603      	mov	r3, r0
 80011c8:	011b      	lsls	r3, r3, #4
 80011ca:	1a1b      	subs	r3, r3, r0
 80011cc:	015b      	lsls	r3, r3, #5
 80011ce:	441a      	add	r2, r3
 80011d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011d2:	4413      	add	r3, r2
 80011d4:	4aa0      	ldr	r2, [pc, #640]	; (8001458 <change_digit_2+0x2f0>)
 80011d6:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80011da:	4aa0      	ldr	r2, [pc, #640]	; (800145c <change_digit_2+0x2f4>)
 80011dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80011e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011e2:	3301      	adds	r3, #1
 80011e4:	653b      	str	r3, [r7, #80]	; 0x50
 80011e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80011e8:	2b62      	cmp	r3, #98	; 0x62
 80011ea:	dde4      	ble.n	80011b6 <change_digit_2+0x4e>
		for(int i = 0; i <= 173; ++i)
 80011ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011ee:	3301      	adds	r3, #1
 80011f0:	657b      	str	r3, [r7, #84]	; 0x54
 80011f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80011f4:	2bad      	cmp	r3, #173	; 0xad
 80011f6:	dddb      	ble.n	80011b0 <change_digit_2+0x48>
	if(number==1)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	2b01      	cmp	r3, #1
 80011fc:	d126      	bne.n	800124c <change_digit_2+0xe4>
		for(int i = 0; i <= 173; ++i)
 80011fe:	2300      	movs	r3, #0
 8001200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001202:	e020      	b.n	8001246 <change_digit_2+0xde>
			for(int j = 0; j <= 98; ++j)
 8001204:	2300      	movs	r3, #0
 8001206:	64bb      	str	r3, [r7, #72]	; 0x48
 8001208:	e017      	b.n	800123a <change_digit_2+0xd2>
				screen[x+42253+i*480+j] = one_picture_2[k++];
 800120a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800120c:	1c4b      	adds	r3, r1, #1
 800120e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001210:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001212:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001216:	441a      	add	r2, r3
 8001218:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800121a:	4603      	mov	r3, r0
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	1a1b      	subs	r3, r3, r0
 8001220:	015b      	lsls	r3, r3, #5
 8001222:	441a      	add	r2, r3
 8001224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001226:	4413      	add	r3, r2
 8001228:	4a8d      	ldr	r2, [pc, #564]	; (8001460 <change_digit_2+0x2f8>)
 800122a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800122e:	4a8b      	ldr	r2, [pc, #556]	; (800145c <change_digit_2+0x2f4>)
 8001230:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001236:	3301      	adds	r3, #1
 8001238:	64bb      	str	r3, [r7, #72]	; 0x48
 800123a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800123c:	2b62      	cmp	r3, #98	; 0x62
 800123e:	dde4      	ble.n	800120a <change_digit_2+0xa2>
		for(int i = 0; i <= 173; ++i)
 8001240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001242:	3301      	adds	r3, #1
 8001244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001248:	2bad      	cmp	r3, #173	; 0xad
 800124a:	dddb      	ble.n	8001204 <change_digit_2+0x9c>
	if(number==2)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d126      	bne.n	80012a0 <change_digit_2+0x138>
		for(int i = 0; i <= 173; ++i)
 8001252:	2300      	movs	r3, #0
 8001254:	647b      	str	r3, [r7, #68]	; 0x44
 8001256:	e020      	b.n	800129a <change_digit_2+0x132>
			for(int j = 0; j <= 98; ++j)
 8001258:	2300      	movs	r3, #0
 800125a:	643b      	str	r3, [r7, #64]	; 0x40
 800125c:	e017      	b.n	800128e <change_digit_2+0x126>
				screen[x+42253+i*480+j] = two_picture_2[k++];
 800125e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001260:	1c4b      	adds	r3, r1, #1
 8001262:	65bb      	str	r3, [r7, #88]	; 0x58
 8001264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001266:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800126a:	441a      	add	r2, r3
 800126c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800126e:	4603      	mov	r3, r0
 8001270:	011b      	lsls	r3, r3, #4
 8001272:	1a1b      	subs	r3, r3, r0
 8001274:	015b      	lsls	r3, r3, #5
 8001276:	441a      	add	r2, r3
 8001278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800127a:	4413      	add	r3, r2
 800127c:	4a79      	ldr	r2, [pc, #484]	; (8001464 <change_digit_2+0x2fc>)
 800127e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001282:	4a76      	ldr	r2, [pc, #472]	; (800145c <change_digit_2+0x2f4>)
 8001284:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800128a:	3301      	adds	r3, #1
 800128c:	643b      	str	r3, [r7, #64]	; 0x40
 800128e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001290:	2b62      	cmp	r3, #98	; 0x62
 8001292:	dde4      	ble.n	800125e <change_digit_2+0xf6>
		for(int i = 0; i <= 173; ++i)
 8001294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001296:	3301      	adds	r3, #1
 8001298:	647b      	str	r3, [r7, #68]	; 0x44
 800129a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800129c:	2bad      	cmp	r3, #173	; 0xad
 800129e:	dddb      	ble.n	8001258 <change_digit_2+0xf0>
	if(number==3)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	2b03      	cmp	r3, #3
 80012a4:	d126      	bne.n	80012f4 <change_digit_2+0x18c>
		for(int i = 0; i <= 173; ++i)
 80012a6:	2300      	movs	r3, #0
 80012a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012aa:	e020      	b.n	80012ee <change_digit_2+0x186>
			for(int j = 0; j <= 98; ++j)
 80012ac:	2300      	movs	r3, #0
 80012ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80012b0:	e017      	b.n	80012e2 <change_digit_2+0x17a>
				screen[x+42253+i*480+j] = three_picture_2[k++];
 80012b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80012b4:	1c4b      	adds	r3, r1, #1
 80012b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80012b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012ba:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80012be:	441a      	add	r2, r3
 80012c0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80012c2:	4603      	mov	r3, r0
 80012c4:	011b      	lsls	r3, r3, #4
 80012c6:	1a1b      	subs	r3, r3, r0
 80012c8:	015b      	lsls	r3, r3, #5
 80012ca:	441a      	add	r2, r3
 80012cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012ce:	4413      	add	r3, r2
 80012d0:	4a65      	ldr	r2, [pc, #404]	; (8001468 <change_digit_2+0x300>)
 80012d2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80012d6:	4a61      	ldr	r2, [pc, #388]	; (800145c <change_digit_2+0x2f4>)
 80012d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80012dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012de:	3301      	adds	r3, #1
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80012e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012e4:	2b62      	cmp	r3, #98	; 0x62
 80012e6:	dde4      	ble.n	80012b2 <change_digit_2+0x14a>
		for(int i = 0; i <= 173; ++i)
 80012e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ea:	3301      	adds	r3, #1
 80012ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f0:	2bad      	cmp	r3, #173	; 0xad
 80012f2:	dddb      	ble.n	80012ac <change_digit_2+0x144>
	if(number==4)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	2b04      	cmp	r3, #4
 80012f8:	d126      	bne.n	8001348 <change_digit_2+0x1e0>
		for(int i = 0; i <= 173; ++i)
 80012fa:	2300      	movs	r3, #0
 80012fc:	637b      	str	r3, [r7, #52]	; 0x34
 80012fe:	e020      	b.n	8001342 <change_digit_2+0x1da>
			for(int j = 0; j <= 98; ++j)
 8001300:	2300      	movs	r3, #0
 8001302:	633b      	str	r3, [r7, #48]	; 0x30
 8001304:	e017      	b.n	8001336 <change_digit_2+0x1ce>
				screen[x+42253+i*480+j] = four_picture_2[k++];
 8001306:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001308:	1c4b      	adds	r3, r1, #1
 800130a:	65bb      	str	r3, [r7, #88]	; 0x58
 800130c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800130e:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001312:	441a      	add	r2, r3
 8001314:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001316:	4603      	mov	r3, r0
 8001318:	011b      	lsls	r3, r3, #4
 800131a:	1a1b      	subs	r3, r3, r0
 800131c:	015b      	lsls	r3, r3, #5
 800131e:	441a      	add	r2, r3
 8001320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001322:	4413      	add	r3, r2
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <change_digit_2+0x304>)
 8001326:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800132a:	4a4c      	ldr	r2, [pc, #304]	; (800145c <change_digit_2+0x2f4>)
 800132c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001332:	3301      	adds	r3, #1
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
 8001336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001338:	2b62      	cmp	r3, #98	; 0x62
 800133a:	dde4      	ble.n	8001306 <change_digit_2+0x19e>
		for(int i = 0; i <= 173; ++i)
 800133c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800133e:	3301      	adds	r3, #1
 8001340:	637b      	str	r3, [r7, #52]	; 0x34
 8001342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001344:	2bad      	cmp	r3, #173	; 0xad
 8001346:	dddb      	ble.n	8001300 <change_digit_2+0x198>
	if(number==5)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	2b05      	cmp	r3, #5
 800134c:	d126      	bne.n	800139c <change_digit_2+0x234>
		for(int i = 0; i <= 173; ++i)
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001352:	e020      	b.n	8001396 <change_digit_2+0x22e>
			for(int j = 0; j <= 98; ++j)
 8001354:	2300      	movs	r3, #0
 8001356:	62bb      	str	r3, [r7, #40]	; 0x28
 8001358:	e017      	b.n	800138a <change_digit_2+0x222>
				screen[x+42253+i*480+j] = five_picture_2[k++];
 800135a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800135c:	1c4b      	adds	r3, r1, #1
 800135e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001362:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001366:	441a      	add	r2, r3
 8001368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800136a:	4603      	mov	r3, r0
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	1a1b      	subs	r3, r3, r0
 8001370:	015b      	lsls	r3, r3, #5
 8001372:	441a      	add	r2, r3
 8001374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001376:	4413      	add	r3, r2
 8001378:	4a3d      	ldr	r2, [pc, #244]	; (8001470 <change_digit_2+0x308>)
 800137a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800137e:	4a37      	ldr	r2, [pc, #220]	; (800145c <change_digit_2+0x2f4>)
 8001380:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001386:	3301      	adds	r3, #1
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
 800138a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800138c:	2b62      	cmp	r3, #98	; 0x62
 800138e:	dde4      	ble.n	800135a <change_digit_2+0x1f2>
		for(int i = 0; i <= 173; ++i)
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	3301      	adds	r3, #1
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001398:	2bad      	cmp	r3, #173	; 0xad
 800139a:	dddb      	ble.n	8001354 <change_digit_2+0x1ec>
	if(number==6)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d126      	bne.n	80013f0 <change_digit_2+0x288>
		for(int i = 0; i <= 173; ++i)
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	; 0x24
 80013a6:	e020      	b.n	80013ea <change_digit_2+0x282>
			for(int j = 0; j <= 98; ++j)
 80013a8:	2300      	movs	r3, #0
 80013aa:	623b      	str	r3, [r7, #32]
 80013ac:	e017      	b.n	80013de <change_digit_2+0x276>
				screen[x+42253+i*480+j] = six_picture_2[k++];
 80013ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80013b0:	1c4b      	adds	r3, r1, #1
 80013b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80013b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013b6:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80013ba:	441a      	add	r2, r3
 80013bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80013be:	4603      	mov	r3, r0
 80013c0:	011b      	lsls	r3, r3, #4
 80013c2:	1a1b      	subs	r3, r3, r0
 80013c4:	015b      	lsls	r3, r3, #5
 80013c6:	441a      	add	r2, r3
 80013c8:	6a3b      	ldr	r3, [r7, #32]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a29      	ldr	r2, [pc, #164]	; (8001474 <change_digit_2+0x30c>)
 80013ce:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80013d2:	4a22      	ldr	r2, [pc, #136]	; (800145c <change_digit_2+0x2f4>)
 80013d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80013d8:	6a3b      	ldr	r3, [r7, #32]
 80013da:	3301      	adds	r3, #1
 80013dc:	623b      	str	r3, [r7, #32]
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2b62      	cmp	r3, #98	; 0x62
 80013e2:	dde4      	ble.n	80013ae <change_digit_2+0x246>
		for(int i = 0; i <= 173; ++i)
 80013e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e6:	3301      	adds	r3, #1
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
 80013ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ec:	2bad      	cmp	r3, #173	; 0xad
 80013ee:	dddb      	ble.n	80013a8 <change_digit_2+0x240>
	if(number==7)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	2b07      	cmp	r3, #7
 80013f4:	d126      	bne.n	8001444 <change_digit_2+0x2dc>
		for(int i = 0; i <= 173; ++i)
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
 80013fa:	e020      	b.n	800143e <change_digit_2+0x2d6>
			for(int j = 0; j <= 98; ++j)
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
 8001400:	e017      	b.n	8001432 <change_digit_2+0x2ca>
				screen[x+42253+i*480+j] = seven_picture_2[k++];
 8001402:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001404:	1c4b      	adds	r3, r1, #1
 8001406:	65bb      	str	r3, [r7, #88]	; 0x58
 8001408:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140a:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800140e:	441a      	add	r2, r3
 8001410:	69f8      	ldr	r0, [r7, #28]
 8001412:	4603      	mov	r3, r0
 8001414:	011b      	lsls	r3, r3, #4
 8001416:	1a1b      	subs	r3, r3, r0
 8001418:	015b      	lsls	r3, r3, #5
 800141a:	441a      	add	r2, r3
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	4413      	add	r3, r2
 8001420:	4a15      	ldr	r2, [pc, #84]	; (8001478 <change_digit_2+0x310>)
 8001422:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001426:	4a0d      	ldr	r2, [pc, #52]	; (800145c <change_digit_2+0x2f4>)
 8001428:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	3301      	adds	r3, #1
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b62      	cmp	r3, #98	; 0x62
 8001436:	dde4      	ble.n	8001402 <change_digit_2+0x29a>
		for(int i = 0; i <= 173; ++i)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	3301      	adds	r3, #1
 800143c:	61fb      	str	r3, [r7, #28]
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2bad      	cmp	r3, #173	; 0xad
 8001442:	dddb      	ble.n	80013fc <change_digit_2+0x294>
	if(number==8)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2b08      	cmp	r3, #8
 8001448:	d139      	bne.n	80014be <change_digit_2+0x356>
		for(int i = 0; i <= 173; ++i)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e033      	b.n	80014b8 <change_digit_2+0x350>
			for(int j = 0; j <= 98; ++j)
 8001450:	2300      	movs	r3, #0
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	e02a      	b.n	80014ac <change_digit_2+0x344>
 8001456:	bf00      	nop
 8001458:	0804f7a8 	.word	0x0804f7a8
 800145c:	2000001c 	.word	0x2000001c
 8001460:	080256c4 	.word	0x080256c4
 8001464:	08047114 	.word	0x08047114
 8001468:	0803ea80 	.word	0x0803ea80
 800146c:	0801499c 	.word	0x0801499c
 8001470:	0800c308 	.word	0x0800c308
 8001474:	080363ec 	.word	0x080363ec
 8001478:	0802dd58 	.word	0x0802dd58
				screen[x+42253+i*480+j] = eigth_picture_2[k++];
 800147c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800147e:	1c4b      	adds	r3, r1, #1
 8001480:	65bb      	str	r3, [r7, #88]	; 0x58
 8001482:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001484:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001488:	441a      	add	r2, r3
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	4603      	mov	r3, r0
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	1a1b      	subs	r3, r3, r0
 8001492:	015b      	lsls	r3, r3, #5
 8001494:	441a      	add	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	4413      	add	r3, r2
 800149a:	4a25      	ldr	r2, [pc, #148]	; (8001530 <change_digit_2+0x3c8>)
 800149c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80014a0:	4a24      	ldr	r2, [pc, #144]	; (8001534 <change_digit_2+0x3cc>)
 80014a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	3301      	adds	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	2b62      	cmp	r3, #98	; 0x62
 80014b0:	dde4      	ble.n	800147c <change_digit_2+0x314>
		for(int i = 0; i <= 173; ++i)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	3301      	adds	r3, #1
 80014b6:	617b      	str	r3, [r7, #20]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	2bad      	cmp	r3, #173	; 0xad
 80014bc:	ddc8      	ble.n	8001450 <change_digit_2+0x2e8>
	if(number==9)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	2b09      	cmp	r3, #9
 80014c2:	d126      	bne.n	8001512 <change_digit_2+0x3aa>
		for(int i = 0; i <= 173; ++i)
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e020      	b.n	800150c <change_digit_2+0x3a4>
			for(int j = 0; j <= 98; ++j)
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
 80014ce:	e017      	b.n	8001500 <change_digit_2+0x398>
				screen[x+42253+i*480+j] = nine_picture_2[k++];
 80014d0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80014d2:	1c4b      	adds	r3, r1, #1
 80014d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80014d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014d8:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80014dc:	441a      	add	r2, r3
 80014de:	68f8      	ldr	r0, [r7, #12]
 80014e0:	4603      	mov	r3, r0
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	015b      	lsls	r3, r3, #5
 80014e8:	441a      	add	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	4413      	add	r3, r2
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <change_digit_2+0x3d0>)
 80014f0:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80014f4:	4a0f      	ldr	r2, [pc, #60]	; (8001534 <change_digit_2+0x3cc>)
 80014f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3301      	adds	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b62      	cmp	r3, #98	; 0x62
 8001504:	dde4      	ble.n	80014d0 <change_digit_2+0x368>
		for(int i = 0; i <= 173; ++i)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	3301      	adds	r3, #1
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2bad      	cmp	r3, #173	; 0xad
 8001510:	dddb      	ble.n	80014ca <change_digit_2+0x362>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <change_digit_2+0x3d4>)
 8001514:	4a07      	ldr	r2, [pc, #28]	; (8001534 <change_digit_2+0x3cc>)
 8001516:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <change_digit_2+0x3d8>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	4a08      	ldr	r2, [pc, #32]	; (8001540 <change_digit_2+0x3d8>)
 800151e:	f043 0302 	orr.w	r3, r3, #2
 8001522:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001524:	bf00      	nop
 8001526:	3764      	adds	r7, #100	; 0x64
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	08057e3c 	.word	0x08057e3c
 8001534:	2000001c 	.word	0x2000001c
 8001538:	0801d030 	.word	0x0801d030
 800153c:	40016904 	.word	0x40016904
 8001540:	40016800 	.word	0x40016800

08001544 <change_digit_3>:

void change_digit_3(int number)
{
 8001544:	b480      	push	{r7}
 8001546:	b0cd      	sub	sp, #308	; 0x134
 8001548:	af00      	add	r7, sp, #0
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	6018      	str	r0, [r3, #0]
	int k = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	if(number==200)
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2bc8      	cmp	r3, #200	; 0xc8
 800155a:	f040 809c 	bne.w	8001696 <change_digit_3+0x152>
	{
		for(int i = 0; i <= 57; ++i)
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001564:	e029      	b.n	80015ba <change_digit_3+0x76>
			for(int j = 0; j <= 32; ++j)
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800156c:	e01c      	b.n	80015a8 <change_digit_3+0x64>
				screen[76+4861+i*480+j] = none_picture_3[k++];
 800156e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001572:	1c53      	adds	r3, r2, #1
 8001574:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001578:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800157c:	460b      	mov	r3, r1
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	1a5b      	subs	r3, r3, r1
 8001582:	015b      	lsls	r3, r3, #5
 8001584:	4619      	mov	r1, r3
 8001586:	f241 3349 	movw	r3, #4937	; 0x1349
 800158a:	440b      	add	r3, r1
 800158c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8001590:	440b      	add	r3, r1
 8001592:	49cd      	ldr	r1, [pc, #820]	; (80018c8 <change_digit_3+0x384>)
 8001594:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001598:	4acc      	ldr	r2, [pc, #816]	; (80018cc <change_digit_3+0x388>)
 800159a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800159e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015a2:	3301      	adds	r3, #1
 80015a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015ac:	2b20      	cmp	r3, #32
 80015ae:	ddde      	ble.n	800156e <change_digit_3+0x2a>
		for(int i = 0; i <= 57; ++i)
 80015b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015b4:	3301      	adds	r3, #1
 80015b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80015ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015be:	2b39      	cmp	r3, #57	; 0x39
 80015c0:	ddd1      	ble.n	8001566 <change_digit_3+0x22>
		k = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80015c8:	2300      	movs	r3, #0
 80015ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015ce:	e029      	b.n	8001624 <change_digit_3+0xe0>
			for(int j = 0; j <= 32; ++j)
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015d6:	e01c      	b.n	8001612 <change_digit_3+0xce>
				screen[38+4861+i*480+j] = none_picture_3[k++];
 80015d8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80015dc:	1c53      	adds	r3, r2, #1
 80015de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80015e2:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80015e6:	460b      	mov	r3, r1
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	1a5b      	subs	r3, r3, r1
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	4619      	mov	r1, r3
 80015f0:	f241 3323 	movw	r3, #4899	; 0x1323
 80015f4:	440b      	add	r3, r1
 80015f6:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 80015fa:	440b      	add	r3, r1
 80015fc:	49b2      	ldr	r1, [pc, #712]	; (80018c8 <change_digit_3+0x384>)
 80015fe:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001602:	4ab2      	ldr	r2, [pc, #712]	; (80018cc <change_digit_3+0x388>)
 8001604:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001608:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800160c:	3301      	adds	r3, #1
 800160e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001612:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8001616:	2b20      	cmp	r3, #32
 8001618:	ddde      	ble.n	80015d8 <change_digit_3+0x94>
		for(int i = 0; i <= 57; ++i)
 800161a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800161e:	3301      	adds	r3, #1
 8001620:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001624:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001628:	2b39      	cmp	r3, #57	; 0x39
 800162a:	ddd1      	ble.n	80015d0 <change_digit_3+0x8c>
		k = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001638:	e029      	b.n	800168e <change_digit_3+0x14a>
			for(int j = 0; j <= 32; ++j)
 800163a:	2300      	movs	r3, #0
 800163c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001640:	e01c      	b.n	800167c <change_digit_3+0x138>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001642:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001646:	1c53      	adds	r3, r2, #1
 8001648:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800164c:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 8001650:	460b      	mov	r3, r1
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	1a5b      	subs	r3, r3, r1
 8001656:	015b      	lsls	r3, r3, #5
 8001658:	4619      	mov	r1, r3
 800165a:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800165e:	440b      	add	r3, r1
 8001660:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8001664:	440b      	add	r3, r1
 8001666:	4998      	ldr	r1, [pc, #608]	; (80018c8 <change_digit_3+0x384>)
 8001668:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800166c:	4a97      	ldr	r2, [pc, #604]	; (80018cc <change_digit_3+0x388>)
 800166e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001676:	3301      	adds	r3, #1
 8001678:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800167c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001680:	2b20      	cmp	r3, #32
 8001682:	ddde      	ble.n	8001642 <change_digit_3+0xfe>
		for(int i = 0; i <= 57; ++i)
 8001684:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001688:	3301      	adds	r3, #1
 800168a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800168e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001692:	2b39      	cmp	r3, #57	; 0x39
 8001694:	ddd1      	ble.n	800163a <change_digit_3+0xf6>
	}

	if(number==0)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f040 809c 	bne.w	80017d8 <change_digit_3+0x294>
	{
		for(int i = 0; i <= 57; ++i)
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80016a6:	e029      	b.n	80016fc <change_digit_3+0x1b8>
			for(int j = 0; j <= 32; ++j)
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80016ae:	e01c      	b.n	80016ea <change_digit_3+0x1a6>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80016b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80016b4:	1c53      	adds	r3, r2, #1
 80016b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80016ba:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80016be:	460b      	mov	r3, r1
 80016c0:	011b      	lsls	r3, r3, #4
 80016c2:	1a5b      	subs	r3, r3, r1
 80016c4:	015b      	lsls	r3, r3, #5
 80016c6:	4619      	mov	r1, r3
 80016c8:	f241 3349 	movw	r3, #4937	; 0x1349
 80016cc:	440b      	add	r3, r1
 80016ce:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80016d2:	440b      	add	r3, r1
 80016d4:	497e      	ldr	r1, [pc, #504]	; (80018d0 <change_digit_3+0x38c>)
 80016d6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80016da:	4a7c      	ldr	r2, [pc, #496]	; (80018cc <change_digit_3+0x388>)
 80016dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80016e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016e4:	3301      	adds	r3, #1
 80016e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80016ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80016ee:	2b20      	cmp	r3, #32
 80016f0:	ddde      	ble.n	80016b0 <change_digit_3+0x16c>
		for(int i = 0; i <= 57; ++i)
 80016f2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016f6:	3301      	adds	r3, #1
 80016f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80016fc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001700:	2b39      	cmp	r3, #57	; 0x39
 8001702:	ddd1      	ble.n	80016a8 <change_digit_3+0x164>
		k = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001710:	e029      	b.n	8001766 <change_digit_3+0x222>
			for(int j = 0; j <= 32; ++j)
 8001712:	2300      	movs	r3, #0
 8001714:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001718:	e01c      	b.n	8001754 <change_digit_3+0x210>
				screen[38+4861+i*480+j] = none_picture_3[k++];
 800171a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800171e:	1c53      	adds	r3, r2, #1
 8001720:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001724:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8001728:	460b      	mov	r3, r1
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	1a5b      	subs	r3, r3, r1
 800172e:	015b      	lsls	r3, r3, #5
 8001730:	4619      	mov	r1, r3
 8001732:	f241 3323 	movw	r3, #4899	; 0x1323
 8001736:	440b      	add	r3, r1
 8001738:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800173c:	440b      	add	r3, r1
 800173e:	4962      	ldr	r1, [pc, #392]	; (80018c8 <change_digit_3+0x384>)
 8001740:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001744:	4a61      	ldr	r2, [pc, #388]	; (80018cc <change_digit_3+0x388>)
 8001746:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800174a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800174e:	3301      	adds	r3, #1
 8001750:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001758:	2b20      	cmp	r3, #32
 800175a:	ddde      	ble.n	800171a <change_digit_3+0x1d6>
		for(int i = 0; i <= 57; ++i)
 800175c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001760:	3301      	adds	r3, #1
 8001762:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001766:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800176a:	2b39      	cmp	r3, #57	; 0x39
 800176c:	ddd1      	ble.n	8001712 <change_digit_3+0x1ce>
		k = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800177a:	e029      	b.n	80017d0 <change_digit_3+0x28c>
			for(int j = 0; j <= 32; ++j)
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001782:	e01c      	b.n	80017be <change_digit_3+0x27a>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001784:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001788:	1c53      	adds	r3, r2, #1
 800178a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800178e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001792:	460b      	mov	r3, r1
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	1a5b      	subs	r3, r3, r1
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	4619      	mov	r1, r3
 800179c:	f241 23fd 	movw	r3, #4861	; 0x12fd
 80017a0:	440b      	add	r3, r1
 80017a2:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80017a6:	440b      	add	r3, r1
 80017a8:	4947      	ldr	r1, [pc, #284]	; (80018c8 <change_digit_3+0x384>)
 80017aa:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80017ae:	4a47      	ldr	r2, [pc, #284]	; (80018cc <change_digit_3+0x388>)
 80017b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80017b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017b8:	3301      	adds	r3, #1
 80017ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80017be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80017c2:	2b20      	cmp	r3, #32
 80017c4:	ddde      	ble.n	8001784 <change_digit_3+0x240>
		for(int i = 0; i <= 57; ++i)
 80017c6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80017ca:	3301      	adds	r3, #1
 80017cc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80017d0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80017d4:	2b39      	cmp	r3, #57	; 0x39
 80017d6:	ddd1      	ble.n	800177c <change_digit_3+0x238>
	}

	if(number==10)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2b0a      	cmp	r3, #10
 80017de:	f040 80a5 	bne.w	800192c <change_digit_3+0x3e8>
	{
		for(int i = 0; i <= 57; ++i)
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80017e8:	e029      	b.n	800183e <change_digit_3+0x2fa>
			for(int j = 0; j <= 32; ++j)
 80017ea:	2300      	movs	r3, #0
 80017ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80017f0:	e01c      	b.n	800182c <change_digit_3+0x2e8>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80017f2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80017f6:	1c53      	adds	r3, r2, #1
 80017f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80017fc:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001800:	460b      	mov	r3, r1
 8001802:	011b      	lsls	r3, r3, #4
 8001804:	1a5b      	subs	r3, r3, r1
 8001806:	015b      	lsls	r3, r3, #5
 8001808:	4619      	mov	r1, r3
 800180a:	f241 3349 	movw	r3, #4937	; 0x1349
 800180e:	440b      	add	r3, r1
 8001810:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001814:	440b      	add	r3, r1
 8001816:	492e      	ldr	r1, [pc, #184]	; (80018d0 <change_digit_3+0x38c>)
 8001818:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800181c:	4a2b      	ldr	r2, [pc, #172]	; (80018cc <change_digit_3+0x388>)
 800181e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001826:	3301      	adds	r3, #1
 8001828:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800182c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001830:	2b20      	cmp	r3, #32
 8001832:	ddde      	ble.n	80017f2 <change_digit_3+0x2ae>
		for(int i = 0; i <= 57; ++i)
 8001834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001838:	3301      	adds	r3, #1
 800183a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800183e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001842:	2b39      	cmp	r3, #57	; 0x39
 8001844:	ddd1      	ble.n	80017ea <change_digit_3+0x2a6>
		k = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001852:	e029      	b.n	80018a8 <change_digit_3+0x364>
			for(int j = 0; j <= 32; ++j)
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800185a:	e01c      	b.n	8001896 <change_digit_3+0x352>
				screen[38+4861+i*480+j] = one_picture_3[k++];
 800185c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001860:	1c53      	adds	r3, r2, #1
 8001862:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001866:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800186a:	460b      	mov	r3, r1
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	1a5b      	subs	r3, r3, r1
 8001870:	015b      	lsls	r3, r3, #5
 8001872:	4619      	mov	r1, r3
 8001874:	f241 3323 	movw	r3, #4899	; 0x1323
 8001878:	440b      	add	r3, r1
 800187a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800187e:	440b      	add	r3, r1
 8001880:	4914      	ldr	r1, [pc, #80]	; (80018d4 <change_digit_3+0x390>)
 8001882:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001886:	4a11      	ldr	r2, [pc, #68]	; (80018cc <change_digit_3+0x388>)
 8001888:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800188c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001890:	3301      	adds	r3, #1
 8001892:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001896:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800189a:	2b20      	cmp	r3, #32
 800189c:	ddde      	ble.n	800185c <change_digit_3+0x318>
		for(int i = 0; i <= 57; ++i)
 800189e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80018a2:	3301      	adds	r3, #1
 80018a4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80018a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80018ac:	2b39      	cmp	r3, #57	; 0x39
 80018ae:	ddd1      	ble.n	8001854 <change_digit_3+0x310>
		k = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80018bc:	e032      	b.n	8001924 <change_digit_3+0x3e0>
			for(int j = 0; j <= 32; ++j)
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80018c4:	e025      	b.n	8001912 <change_digit_3+0x3ce>
 80018c6:	bf00      	nop
 80018c8:	080631ac 	.word	0x080631ac
 80018cc:	2000001c 	.word	0x2000001c
 80018d0:	08068b64 	.word	0x08068b64
 80018d4:	080640a0 	.word	0x080640a0
				screen[4861+i*480+j] = none_picture_3[k++];
 80018d8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80018dc:	1c53      	adds	r3, r2, #1
 80018de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80018e2:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80018e6:	460b      	mov	r3, r1
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a5b      	subs	r3, r3, r1
 80018ec:	015b      	lsls	r3, r3, #5
 80018ee:	4619      	mov	r1, r3
 80018f0:	f241 23fd 	movw	r3, #4861	; 0x12fd
 80018f4:	440b      	add	r3, r1
 80018f6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80018fa:	440b      	add	r3, r1
 80018fc:	49cd      	ldr	r1, [pc, #820]	; (8001c34 <change_digit_3+0x6f0>)
 80018fe:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001902:	4acd      	ldr	r2, [pc, #820]	; (8001c38 <change_digit_3+0x6f4>)
 8001904:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800190c:	3301      	adds	r3, #1
 800190e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001916:	2b20      	cmp	r3, #32
 8001918:	ddde      	ble.n	80018d8 <change_digit_3+0x394>
		for(int i = 0; i <= 57; ++i)
 800191a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800191e:	3301      	adds	r3, #1
 8001920:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001924:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001928:	2b39      	cmp	r3, #57	; 0x39
 800192a:	ddc8      	ble.n	80018be <change_digit_3+0x37a>
	}

	if(number==20)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b14      	cmp	r3, #20
 8001932:	f040 809c 	bne.w	8001a6e <change_digit_3+0x52a>
	{
		for(int i = 0; i <= 57; ++i)
 8001936:	2300      	movs	r3, #0
 8001938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800193c:	e029      	b.n	8001992 <change_digit_3+0x44e>
			for(int j = 0; j <= 32; ++j)
 800193e:	2300      	movs	r3, #0
 8001940:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001944:	e01c      	b.n	8001980 <change_digit_3+0x43c>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001946:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800194a:	1c53      	adds	r3, r2, #1
 800194c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001950:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8001954:	460b      	mov	r3, r1
 8001956:	011b      	lsls	r3, r3, #4
 8001958:	1a5b      	subs	r3, r3, r1
 800195a:	015b      	lsls	r3, r3, #5
 800195c:	4619      	mov	r1, r3
 800195e:	f241 3349 	movw	r3, #4937	; 0x1349
 8001962:	440b      	add	r3, r1
 8001964:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8001968:	440b      	add	r3, r1
 800196a:	49b4      	ldr	r1, [pc, #720]	; (8001c3c <change_digit_3+0x6f8>)
 800196c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001970:	4ab1      	ldr	r2, [pc, #708]	; (8001c38 <change_digit_3+0x6f4>)
 8001972:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800197a:	3301      	adds	r3, #1
 800197c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001980:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001984:	2b20      	cmp	r3, #32
 8001986:	ddde      	ble.n	8001946 <change_digit_3+0x402>
		for(int i = 0; i <= 57; ++i)
 8001988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800198c:	3301      	adds	r3, #1
 800198e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001996:	2b39      	cmp	r3, #57	; 0x39
 8001998:	ddd1      	ble.n	800193e <change_digit_3+0x3fa>
		k = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80019a0:	2300      	movs	r3, #0
 80019a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80019a6:	e029      	b.n	80019fc <change_digit_3+0x4b8>
			for(int j = 0; j <= 32; ++j)
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ae:	e01c      	b.n	80019ea <change_digit_3+0x4a6>
				screen[38+4861+i*480+j] = two_picture_3[k++];
 80019b0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80019b4:	1c53      	adds	r3, r2, #1
 80019b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80019ba:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 80019be:	460b      	mov	r3, r1
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	1a5b      	subs	r3, r3, r1
 80019c4:	015b      	lsls	r3, r3, #5
 80019c6:	4619      	mov	r1, r3
 80019c8:	f241 3323 	movw	r3, #4899	; 0x1323
 80019cc:	440b      	add	r3, r1
 80019ce:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80019d2:	440b      	add	r3, r1
 80019d4:	499a      	ldr	r1, [pc, #616]	; (8001c40 <change_digit_3+0x6fc>)
 80019d6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80019da:	4a97      	ldr	r2, [pc, #604]	; (8001c38 <change_digit_3+0x6f4>)
 80019dc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80019e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019e4:	3301      	adds	r3, #1
 80019e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80019ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80019ee:	2b20      	cmp	r3, #32
 80019f0:	ddde      	ble.n	80019b0 <change_digit_3+0x46c>
		for(int i = 0; i <= 57; ++i)
 80019f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80019f6:	3301      	adds	r3, #1
 80019f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80019fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001a00:	2b39      	cmp	r3, #57	; 0x39
 8001a02:	ddd1      	ble.n	80019a8 <change_digit_3+0x464>
		k = 0;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a10:	e029      	b.n	8001a66 <change_digit_3+0x522>
			for(int j = 0; j <= 32; ++j)
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a18:	e01c      	b.n	8001a54 <change_digit_3+0x510>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001a1a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a1e:	1c53      	adds	r3, r2, #1
 8001a20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a24:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	011b      	lsls	r3, r3, #4
 8001a2c:	1a5b      	subs	r3, r3, r1
 8001a2e:	015b      	lsls	r3, r3, #5
 8001a30:	4619      	mov	r1, r3
 8001a32:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001a36:	440b      	add	r3, r1
 8001a38:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001a3c:	440b      	add	r3, r1
 8001a3e:	497d      	ldr	r1, [pc, #500]	; (8001c34 <change_digit_3+0x6f0>)
 8001a40:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001a44:	4a7c      	ldr	r2, [pc, #496]	; (8001c38 <change_digit_3+0x6f4>)
 8001a46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001a4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001a54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001a58:	2b20      	cmp	r3, #32
 8001a5a:	ddde      	ble.n	8001a1a <change_digit_3+0x4d6>
		for(int i = 0; i <= 57; ++i)
 8001a5c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a60:	3301      	adds	r3, #1
 8001a62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001a66:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001a6a:	2b39      	cmp	r3, #57	; 0x39
 8001a6c:	ddd1      	ble.n	8001a12 <change_digit_3+0x4ce>
	}

	if(number==30)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2b1e      	cmp	r3, #30
 8001a74:	f040 809c 	bne.w	8001bb0 <change_digit_3+0x66c>
	{
		for(int i = 0; i <= 57; ++i)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001a7e:	e029      	b.n	8001ad4 <change_digit_3+0x590>
			for(int j = 0; j <= 32; ++j)
 8001a80:	2300      	movs	r3, #0
 8001a82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001a86:	e01c      	b.n	8001ac2 <change_digit_3+0x57e>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001a88:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001a8c:	1c53      	adds	r3, r2, #1
 8001a8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001a92:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001a96:	460b      	mov	r3, r1
 8001a98:	011b      	lsls	r3, r3, #4
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	015b      	lsls	r3, r3, #5
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f241 3349 	movw	r3, #4937	; 0x1349
 8001aa4:	440b      	add	r3, r1
 8001aa6:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001aaa:	440b      	add	r3, r1
 8001aac:	4963      	ldr	r1, [pc, #396]	; (8001c3c <change_digit_3+0x6f8>)
 8001aae:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ab2:	4a61      	ldr	r2, [pc, #388]	; (8001c38 <change_digit_3+0x6f4>)
 8001ab4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001ab8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001abc:	3301      	adds	r3, #1
 8001abe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001ac6:	2b20      	cmp	r3, #32
 8001ac8:	ddde      	ble.n	8001a88 <change_digit_3+0x544>
		for(int i = 0; i <= 57; ++i)
 8001aca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ace:	3301      	adds	r3, #1
 8001ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ad4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ad8:	2b39      	cmp	r3, #57	; 0x39
 8001ada:	ddd1      	ble.n	8001a80 <change_digit_3+0x53c>
		k = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ae8:	e029      	b.n	8001b3e <change_digit_3+0x5fa>
			for(int j = 0; j <= 32; ++j)
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001af0:	e01c      	b.n	8001b2c <change_digit_3+0x5e8>
				screen[38+4861+i*480+j] = three_picture_3[k++];
 8001af2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001af6:	1c53      	adds	r3, r2, #1
 8001af8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001afc:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001b00:	460b      	mov	r3, r1
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	1a5b      	subs	r3, r3, r1
 8001b06:	015b      	lsls	r3, r3, #5
 8001b08:	4619      	mov	r1, r3
 8001b0a:	f241 3323 	movw	r3, #4899	; 0x1323
 8001b0e:	440b      	add	r3, r1
 8001b10:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001b14:	440b      	add	r3, r1
 8001b16:	494b      	ldr	r1, [pc, #300]	; (8001c44 <change_digit_3+0x700>)
 8001b18:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b1c:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <change_digit_3+0x6f4>)
 8001b1e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b26:	3301      	adds	r3, #1
 8001b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001b2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001b30:	2b20      	cmp	r3, #32
 8001b32:	ddde      	ble.n	8001af2 <change_digit_3+0x5ae>
		for(int i = 0; i <= 57; ++i)
 8001b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001b3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001b42:	2b39      	cmp	r3, #57	; 0x39
 8001b44:	ddd1      	ble.n	8001aea <change_digit_3+0x5a6>
		k = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001b52:	e029      	b.n	8001ba8 <change_digit_3+0x664>
			for(int j = 0; j <= 32; ++j)
 8001b54:	2300      	movs	r3, #0
 8001b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b5a:	e01c      	b.n	8001b96 <change_digit_3+0x652>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001b5c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001b60:	1c53      	adds	r3, r2, #1
 8001b62:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001b66:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	1a5b      	subs	r3, r3, r1
 8001b70:	015b      	lsls	r3, r3, #5
 8001b72:	4619      	mov	r1, r3
 8001b74:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001b78:	440b      	add	r3, r1
 8001b7a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001b7e:	440b      	add	r3, r1
 8001b80:	492c      	ldr	r1, [pc, #176]	; (8001c34 <change_digit_3+0x6f0>)
 8001b82:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b86:	4a2c      	ldr	r2, [pc, #176]	; (8001c38 <change_digit_3+0x6f4>)
 8001b88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b90:	3301      	adds	r3, #1
 8001b92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001b96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001b9a:	2b20      	cmp	r3, #32
 8001b9c:	ddde      	ble.n	8001b5c <change_digit_3+0x618>
		for(int i = 0; i <= 57; ++i)
 8001b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001ba8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bac:	2b39      	cmp	r3, #57	; 0x39
 8001bae:	ddd1      	ble.n	8001b54 <change_digit_3+0x610>
	}

	if(number==40)
 8001bb0:	1d3b      	adds	r3, r7, #4
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2b28      	cmp	r3, #40	; 0x28
 8001bb6:	f040 80a6 	bne.w	8001d06 <change_digit_3+0x7c2>
	{
		for(int i = 0; i <= 57; ++i)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001bc0:	e029      	b.n	8001c16 <change_digit_3+0x6d2>
			for(int j = 0; j <= 32; ++j)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001bc8:	e01c      	b.n	8001c04 <change_digit_3+0x6c0>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001bca:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001bce:	1c53      	adds	r3, r2, #1
 8001bd0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001bd4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	1a5b      	subs	r3, r3, r1
 8001bde:	015b      	lsls	r3, r3, #5
 8001be0:	4619      	mov	r1, r3
 8001be2:	f241 3349 	movw	r3, #4937	; 0x1349
 8001be6:	440b      	add	r3, r1
 8001be8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8001bec:	440b      	add	r3, r1
 8001bee:	4913      	ldr	r1, [pc, #76]	; (8001c3c <change_digit_3+0x6f8>)
 8001bf0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001bf4:	4a10      	ldr	r2, [pc, #64]	; (8001c38 <change_digit_3+0x6f4>)
 8001bf6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c08:	2b20      	cmp	r3, #32
 8001c0a:	ddde      	ble.n	8001bca <change_digit_3+0x686>
		for(int i = 0; i <= 57; ++i)
 8001c0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c10:	3301      	adds	r3, #1
 8001c12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001c16:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c1a:	2b39      	cmp	r3, #57	; 0x39
 8001c1c:	ddd1      	ble.n	8001bc2 <change_digit_3+0x67e>
		k = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c2a:	e033      	b.n	8001c94 <change_digit_3+0x750>
			for(int j = 0; j <= 32; ++j)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c32:	e026      	b.n	8001c82 <change_digit_3+0x73e>
 8001c34:	080631ac 	.word	0x080631ac
 8001c38:	2000001c 	.word	0x2000001c
 8001c3c:	08068b64 	.word	0x08068b64
 8001c40:	08067c70 	.word	0x08067c70
 8001c44:	08066d7c 	.word	0x08066d7c
				screen[38+4861+i*480+j] = four_picture_3[k++];
 8001c48:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001c4c:	1c53      	adds	r3, r2, #1
 8001c4e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001c52:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001c56:	460b      	mov	r3, r1
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	1a5b      	subs	r3, r3, r1
 8001c5c:	015b      	lsls	r3, r3, #5
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f241 3323 	movw	r3, #4899	; 0x1323
 8001c64:	440b      	add	r3, r1
 8001c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001c6a:	440b      	add	r3, r1
 8001c6c:	49c0      	ldr	r1, [pc, #768]	; (8001f70 <change_digit_3+0xa2c>)
 8001c6e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001c72:	4ac0      	ldr	r2, [pc, #768]	; (8001f74 <change_digit_3+0xa30>)
 8001c74:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001c78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c86:	2b20      	cmp	r3, #32
 8001c88:	ddde      	ble.n	8001c48 <change_digit_3+0x704>
		for(int i = 0; i <= 57; ++i)
 8001c8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c8e:	3301      	adds	r3, #1
 8001c90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c98:	2b39      	cmp	r3, #57	; 0x39
 8001c9a:	ddc7      	ble.n	8001c2c <change_digit_3+0x6e8>
		k = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ca8:	e029      	b.n	8001cfe <change_digit_3+0x7ba>
			for(int j = 0; j <= 32; ++j)
 8001caa:	2300      	movs	r3, #0
 8001cac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cb0:	e01c      	b.n	8001cec <change_digit_3+0x7a8>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001cb2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001cb6:	1c53      	adds	r3, r2, #1
 8001cb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001cbc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	1a5b      	subs	r3, r3, r1
 8001cc6:	015b      	lsls	r3, r3, #5
 8001cc8:	4619      	mov	r1, r3
 8001cca:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001cce:	440b      	add	r3, r1
 8001cd0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001cd4:	440b      	add	r3, r1
 8001cd6:	49a8      	ldr	r1, [pc, #672]	; (8001f78 <change_digit_3+0xa34>)
 8001cd8:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001cdc:	4aa5      	ldr	r2, [pc, #660]	; (8001f74 <change_digit_3+0xa30>)
 8001cde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cf0:	2b20      	cmp	r3, #32
 8001cf2:	ddde      	ble.n	8001cb2 <change_digit_3+0x76e>
		for(int i = 0; i <= 57; ++i)
 8001cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d02:	2b39      	cmp	r3, #57	; 0x39
 8001d04:	ddd1      	ble.n	8001caa <change_digit_3+0x766>
	}

	if(number==50)
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b32      	cmp	r3, #50	; 0x32
 8001d0c:	f040 809c 	bne.w	8001e48 <change_digit_3+0x904>
	{
		for(int i = 0; i <= 57; ++i)
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d16:	e029      	b.n	8001d6c <change_digit_3+0x828>
			for(int j = 0; j <= 32; ++j)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d1e:	e01c      	b.n	8001d5a <change_digit_3+0x816>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001d20:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d24:	1c53      	adds	r3, r2, #1
 8001d26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d2a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001d2e:	460b      	mov	r3, r1
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	1a5b      	subs	r3, r3, r1
 8001d34:	015b      	lsls	r3, r3, #5
 8001d36:	4619      	mov	r1, r3
 8001d38:	f241 3349 	movw	r3, #4937	; 0x1349
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001d42:	440b      	add	r3, r1
 8001d44:	498d      	ldr	r1, [pc, #564]	; (8001f7c <change_digit_3+0xa38>)
 8001d46:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d4a:	4a8a      	ldr	r2, [pc, #552]	; (8001f74 <change_digit_3+0xa30>)
 8001d4c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d54:	3301      	adds	r3, #1
 8001d56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001d5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d5e:	2b20      	cmp	r3, #32
 8001d60:	ddde      	ble.n	8001d20 <change_digit_3+0x7dc>
		for(int i = 0; i <= 57; ++i)
 8001d62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d66:	3301      	adds	r3, #1
 8001d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d70:	2b39      	cmp	r3, #57	; 0x39
 8001d72:	ddd1      	ble.n	8001d18 <change_digit_3+0x7d4>
		k = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d80:	e029      	b.n	8001dd6 <change_digit_3+0x892>
			for(int j = 0; j <= 32; ++j)
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d88:	e01c      	b.n	8001dc4 <change_digit_3+0x880>
				screen[38+4861+i*480+j] = five_picture_3[k++];
 8001d8a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001d8e:	1c53      	adds	r3, r2, #1
 8001d90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001d94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001d98:	460b      	mov	r3, r1
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	1a5b      	subs	r3, r3, r1
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	4619      	mov	r1, r3
 8001da2:	f241 3323 	movw	r3, #4899	; 0x1323
 8001da6:	440b      	add	r3, r1
 8001da8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001dac:	440b      	add	r3, r1
 8001dae:	4974      	ldr	r1, [pc, #464]	; (8001f80 <change_digit_3+0xa3c>)
 8001db0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001db4:	4a6f      	ldr	r2, [pc, #444]	; (8001f74 <change_digit_3+0xa30>)
 8001db6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001dc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	ddde      	ble.n	8001d8a <change_digit_3+0x846>
		for(int i = 0; i <= 57; ++i)
 8001dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001dd6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dda:	2b39      	cmp	r3, #57	; 0x39
 8001ddc:	ddd1      	ble.n	8001d82 <change_digit_3+0x83e>
		k = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001dea:	e029      	b.n	8001e40 <change_digit_3+0x8fc>
			for(int j = 0; j <= 32; ++j)
 8001dec:	2300      	movs	r3, #0
 8001dee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001df2:	e01c      	b.n	8001e2e <change_digit_3+0x8ea>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001df4:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001df8:	1c53      	adds	r3, r2, #1
 8001dfa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001dfe:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001e02:	460b      	mov	r3, r1
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	1a5b      	subs	r3, r3, r1
 8001e08:	015b      	lsls	r3, r3, #5
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001e10:	440b      	add	r3, r1
 8001e12:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001e16:	440b      	add	r3, r1
 8001e18:	4957      	ldr	r1, [pc, #348]	; (8001f78 <change_digit_3+0xa34>)
 8001e1a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e1e:	4a55      	ldr	r2, [pc, #340]	; (8001f74 <change_digit_3+0xa30>)
 8001e20:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e28:	3301      	adds	r3, #1
 8001e2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e32:	2b20      	cmp	r3, #32
 8001e34:	ddde      	ble.n	8001df4 <change_digit_3+0x8b0>
		for(int i = 0; i <= 57; ++i)
 8001e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e44:	2b39      	cmp	r3, #57	; 0x39
 8001e46:	ddd1      	ble.n	8001dec <change_digit_3+0x8a8>
	}

	if(number==60)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b3c      	cmp	r3, #60	; 0x3c
 8001e4e:	f040 8083 	bne.w	8001f58 <change_digit_3+0xa14>
	{
		for(int i = 0; i <= 57; ++i)
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e58:	e024      	b.n	8001ea4 <change_digit_3+0x960>
			for(int j = 0; j <= 32; ++j)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e5e:	e019      	b.n	8001e94 <change_digit_3+0x950>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001e60:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001e64:	1c53      	adds	r3, r2, #1
 8001e66:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001e6a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001e6e:	460b      	mov	r3, r1
 8001e70:	011b      	lsls	r3, r3, #4
 8001e72:	1a5b      	subs	r3, r3, r1
 8001e74:	015b      	lsls	r3, r3, #5
 8001e76:	4619      	mov	r1, r3
 8001e78:	f241 3349 	movw	r3, #4937	; 0x1349
 8001e7c:	440b      	add	r3, r1
 8001e7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001e80:	440b      	add	r3, r1
 8001e82:	493e      	ldr	r1, [pc, #248]	; (8001f7c <change_digit_3+0xa38>)
 8001e84:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e88:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <change_digit_3+0xa30>)
 8001e8a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e90:	3301      	adds	r3, #1
 8001e92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001e94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e96:	2b20      	cmp	r3, #32
 8001e98:	dde2      	ble.n	8001e60 <change_digit_3+0x91c>
		for(int i = 0; i <= 57; ++i)
 8001e9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ea4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea8:	2b39      	cmp	r3, #57	; 0x39
 8001eaa:	ddd6      	ble.n	8001e5a <change_digit_3+0x916>
		k = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eb6:	e021      	b.n	8001efc <change_digit_3+0x9b8>
			for(int j = 0; j <= 32; ++j)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	677b      	str	r3, [r7, #116]	; 0x74
 8001ebc:	e018      	b.n	8001ef0 <change_digit_3+0x9ac>
				screen[38+4861+i*480+j] = six_picture_3[k++];
 8001ebe:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001ec2:	1c53      	adds	r3, r2, #1
 8001ec4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001ec8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001eca:	460b      	mov	r3, r1
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	1a5b      	subs	r3, r3, r1
 8001ed0:	015b      	lsls	r3, r3, #5
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f241 3323 	movw	r3, #4899	; 0x1323
 8001ed8:	440b      	add	r3, r1
 8001eda:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001edc:	440b      	add	r3, r1
 8001ede:	4929      	ldr	r1, [pc, #164]	; (8001f84 <change_digit_3+0xa40>)
 8001ee0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ee4:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <change_digit_3+0xa30>)
 8001ee6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eec:	3301      	adds	r3, #1
 8001eee:	677b      	str	r3, [r7, #116]	; 0x74
 8001ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	dde3      	ble.n	8001ebe <change_digit_3+0x97a>
		for(int i = 0; i <= 57; ++i)
 8001ef6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ef8:	3301      	adds	r3, #1
 8001efa:	67bb      	str	r3, [r7, #120]	; 0x78
 8001efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001efe:	2b39      	cmp	r3, #57	; 0x39
 8001f00:	ddda      	ble.n	8001eb8 <change_digit_3+0x974>
		k = 0;
 8001f02:	2300      	movs	r3, #0
 8001f04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	673b      	str	r3, [r7, #112]	; 0x70
 8001f0c:	e021      	b.n	8001f52 <change_digit_3+0xa0e>
			for(int j = 0; j <= 32; ++j)
 8001f0e:	2300      	movs	r3, #0
 8001f10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f12:	e018      	b.n	8001f46 <change_digit_3+0xa02>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001f14:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f18:	1c53      	adds	r3, r2, #1
 8001f1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f1e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001f20:	460b      	mov	r3, r1
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	1a5b      	subs	r3, r3, r1
 8001f26:	015b      	lsls	r3, r3, #5
 8001f28:	4619      	mov	r1, r3
 8001f2a:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001f2e:	440b      	add	r3, r1
 8001f30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001f32:	440b      	add	r3, r1
 8001f34:	4910      	ldr	r1, [pc, #64]	; (8001f78 <change_digit_3+0xa34>)
 8001f36:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <change_digit_3+0xa30>)
 8001f3c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f42:	3301      	adds	r3, #1
 8001f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	dde3      	ble.n	8001f14 <change_digit_3+0x9d0>
		for(int i = 0; i <= 57; ++i)
 8001f4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f4e:	3301      	adds	r3, #1
 8001f50:	673b      	str	r3, [r7, #112]	; 0x70
 8001f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f54:	2b39      	cmp	r3, #57	; 0x39
 8001f56:	ddda      	ble.n	8001f0e <change_digit_3+0x9ca>
	}

	if(number==70)
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b46      	cmp	r3, #70	; 0x46
 8001f5e:	f040 808b 	bne.w	8002078 <change_digit_3+0xb34>
	{
		for(int i = 0; i <= 57; ++i)
 8001f62:	2300      	movs	r3, #0
 8001f64:	66bb      	str	r3, [r7, #104]	; 0x68
 8001f66:	e02e      	b.n	8001fc6 <change_digit_3+0xa82>
			for(int j = 0; j <= 32; ++j)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	667b      	str	r3, [r7, #100]	; 0x64
 8001f6c:	e025      	b.n	8001fba <change_digit_3+0xa76>
 8001f6e:	bf00      	nop
 8001f70:	080613c4 	.word	0x080613c4
 8001f74:	2000001c 	.word	0x2000001c
 8001f78:	080631ac 	.word	0x080631ac
 8001f7c:	08068b64 	.word	0x08068b64
 8001f80:	080604d0 	.word	0x080604d0
 8001f84:	08065e88 	.word	0x08065e88
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001f88:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001f8c:	1c53      	adds	r3, r2, #1
 8001f8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001f92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001f94:	460b      	mov	r3, r1
 8001f96:	011b      	lsls	r3, r3, #4
 8001f98:	1a5b      	subs	r3, r3, r1
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f241 3349 	movw	r3, #4937	; 0x1349
 8001fa2:	440b      	add	r3, r1
 8001fa4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001fa6:	440b      	add	r3, r1
 8001fa8:	49b1      	ldr	r1, [pc, #708]	; (8002270 <change_digit_3+0xd2c>)
 8001faa:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001fae:	4ab1      	ldr	r2, [pc, #708]	; (8002274 <change_digit_3+0xd30>)
 8001fb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	667b      	str	r3, [r7, #100]	; 0x64
 8001fba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fbc:	2b20      	cmp	r3, #32
 8001fbe:	dde3      	ble.n	8001f88 <change_digit_3+0xa44>
		for(int i = 0; i <= 57; ++i)
 8001fc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fc8:	2b39      	cmp	r3, #57	; 0x39
 8001fca:	ddcd      	ble.n	8001f68 <change_digit_3+0xa24>
		k = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	663b      	str	r3, [r7, #96]	; 0x60
 8001fd6:	e021      	b.n	800201c <change_digit_3+0xad8>
			for(int j = 0; j <= 32; ++j)
 8001fd8:	2300      	movs	r3, #0
 8001fda:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fdc:	e018      	b.n	8002010 <change_digit_3+0xacc>
				screen[38+4861+i*480+j] = seven_picture_3[k++];
 8001fde:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8001fe2:	1c53      	adds	r3, r2, #1
 8001fe4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8001fe8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001fea:	460b      	mov	r3, r1
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a5b      	subs	r3, r3, r1
 8001ff0:	015b      	lsls	r3, r3, #5
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f241 3323 	movw	r3, #4899	; 0x1323
 8001ff8:	440b      	add	r3, r1
 8001ffa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001ffc:	440b      	add	r3, r1
 8001ffe:	499e      	ldr	r1, [pc, #632]	; (8002278 <change_digit_3+0xd34>)
 8002000:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002004:	4a9b      	ldr	r2, [pc, #620]	; (8002274 <change_digit_3+0xd30>)
 8002006:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800200a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800200c:	3301      	adds	r3, #1
 800200e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002012:	2b20      	cmp	r3, #32
 8002014:	dde3      	ble.n	8001fde <change_digit_3+0xa9a>
		for(int i = 0; i <= 57; ++i)
 8002016:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002018:	3301      	adds	r3, #1
 800201a:	663b      	str	r3, [r7, #96]	; 0x60
 800201c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800201e:	2b39      	cmp	r3, #57	; 0x39
 8002020:	ddda      	ble.n	8001fd8 <change_digit_3+0xa94>
		k = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8002028:	2300      	movs	r3, #0
 800202a:	65bb      	str	r3, [r7, #88]	; 0x58
 800202c:	e021      	b.n	8002072 <change_digit_3+0xb2e>
			for(int j = 0; j <= 32; ++j)
 800202e:	2300      	movs	r3, #0
 8002030:	657b      	str	r3, [r7, #84]	; 0x54
 8002032:	e018      	b.n	8002066 <change_digit_3+0xb22>
				screen[4861+i*480+j] = none_picture_3[k++];
 8002034:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002038:	1c53      	adds	r3, r2, #1
 800203a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800203e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002040:	460b      	mov	r3, r1
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a5b      	subs	r3, r3, r1
 8002046:	015b      	lsls	r3, r3, #5
 8002048:	4619      	mov	r1, r3
 800204a:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800204e:	440b      	add	r3, r1
 8002050:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002052:	440b      	add	r3, r1
 8002054:	4989      	ldr	r1, [pc, #548]	; (800227c <change_digit_3+0xd38>)
 8002056:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800205a:	4a86      	ldr	r2, [pc, #536]	; (8002274 <change_digit_3+0xd30>)
 800205c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002062:	3301      	adds	r3, #1
 8002064:	657b      	str	r3, [r7, #84]	; 0x54
 8002066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002068:	2b20      	cmp	r3, #32
 800206a:	dde3      	ble.n	8002034 <change_digit_3+0xaf0>
		for(int i = 0; i <= 57; ++i)
 800206c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800206e:	3301      	adds	r3, #1
 8002070:	65bb      	str	r3, [r7, #88]	; 0x58
 8002072:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002074:	2b39      	cmp	r3, #57	; 0x39
 8002076:	ddda      	ble.n	800202e <change_digit_3+0xaea>
	}

	if(number==80)
 8002078:	1d3b      	adds	r3, r7, #4
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b50      	cmp	r3, #80	; 0x50
 800207e:	d17d      	bne.n	800217c <change_digit_3+0xc38>
	{
		for(int i = 0; i <= 57; ++i)
 8002080:	2300      	movs	r3, #0
 8002082:	653b      	str	r3, [r7, #80]	; 0x50
 8002084:	e021      	b.n	80020ca <change_digit_3+0xb86>
			for(int j = 0; j <= 32; ++j)
 8002086:	2300      	movs	r3, #0
 8002088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800208a:	e018      	b.n	80020be <change_digit_3+0xb7a>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 800208c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002090:	1c53      	adds	r3, r2, #1
 8002092:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002096:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002098:	460b      	mov	r3, r1
 800209a:	011b      	lsls	r3, r3, #4
 800209c:	1a5b      	subs	r3, r3, r1
 800209e:	015b      	lsls	r3, r3, #5
 80020a0:	4619      	mov	r1, r3
 80020a2:	f241 3349 	movw	r3, #4937	; 0x1349
 80020a6:	440b      	add	r3, r1
 80020a8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80020aa:	440b      	add	r3, r1
 80020ac:	4970      	ldr	r1, [pc, #448]	; (8002270 <change_digit_3+0xd2c>)
 80020ae:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80020b2:	4a70      	ldr	r2, [pc, #448]	; (8002274 <change_digit_3+0xd30>)
 80020b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80020b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020ba:	3301      	adds	r3, #1
 80020bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	dde3      	ble.n	800208c <change_digit_3+0xb48>
		for(int i = 0; i <= 57; ++i)
 80020c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020c6:	3301      	adds	r3, #1
 80020c8:	653b      	str	r3, [r7, #80]	; 0x50
 80020ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020cc:	2b39      	cmp	r3, #57	; 0x39
 80020ce:	ddda      	ble.n	8002086 <change_digit_3+0xb42>
		k = 0;
 80020d0:	2300      	movs	r3, #0
 80020d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80020d6:	2300      	movs	r3, #0
 80020d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80020da:	e021      	b.n	8002120 <change_digit_3+0xbdc>
			for(int j = 0; j <= 32; ++j)
 80020dc:	2300      	movs	r3, #0
 80020de:	647b      	str	r3, [r7, #68]	; 0x44
 80020e0:	e018      	b.n	8002114 <change_digit_3+0xbd0>
				screen[38+4861+i*480+j] = eigth_picture_3[k++];
 80020e2:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80020e6:	1c53      	adds	r3, r2, #1
 80020e8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80020ec:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80020ee:	460b      	mov	r3, r1
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a5b      	subs	r3, r3, r1
 80020f4:	015b      	lsls	r3, r3, #5
 80020f6:	4619      	mov	r1, r3
 80020f8:	f241 3323 	movw	r3, #4899	; 0x1323
 80020fc:	440b      	add	r3, r1
 80020fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002100:	440b      	add	r3, r1
 8002102:	495f      	ldr	r1, [pc, #380]	; (8002280 <change_digit_3+0xd3c>)
 8002104:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002108:	4a5a      	ldr	r2, [pc, #360]	; (8002274 <change_digit_3+0xd30>)
 800210a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	3301      	adds	r3, #1
 8002112:	647b      	str	r3, [r7, #68]	; 0x44
 8002114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002116:	2b20      	cmp	r3, #32
 8002118:	dde3      	ble.n	80020e2 <change_digit_3+0xb9e>
		for(int i = 0; i <= 57; ++i)
 800211a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800211c:	3301      	adds	r3, #1
 800211e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002120:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002122:	2b39      	cmp	r3, #57	; 0x39
 8002124:	ddda      	ble.n	80020dc <change_digit_3+0xb98>
		k = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800212c:	2300      	movs	r3, #0
 800212e:	643b      	str	r3, [r7, #64]	; 0x40
 8002130:	e021      	b.n	8002176 <change_digit_3+0xc32>
			for(int j = 0; j <= 32; ++j)
 8002132:	2300      	movs	r3, #0
 8002134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002136:	e018      	b.n	800216a <change_digit_3+0xc26>
				screen[4861+i*480+j] = none_picture_3[k++];
 8002138:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800213c:	1c53      	adds	r3, r2, #1
 800213e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002144:	460b      	mov	r3, r1
 8002146:	011b      	lsls	r3, r3, #4
 8002148:	1a5b      	subs	r3, r3, r1
 800214a:	015b      	lsls	r3, r3, #5
 800214c:	4619      	mov	r1, r3
 800214e:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8002152:	440b      	add	r3, r1
 8002154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002156:	440b      	add	r3, r1
 8002158:	4948      	ldr	r1, [pc, #288]	; (800227c <change_digit_3+0xd38>)
 800215a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800215e:	4a45      	ldr	r2, [pc, #276]	; (8002274 <change_digit_3+0xd30>)
 8002160:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002166:	3301      	adds	r3, #1
 8002168:	63fb      	str	r3, [r7, #60]	; 0x3c
 800216a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216c:	2b20      	cmp	r3, #32
 800216e:	dde3      	ble.n	8002138 <change_digit_3+0xbf4>
		for(int i = 0; i <= 57; ++i)
 8002170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002172:	3301      	adds	r3, #1
 8002174:	643b      	str	r3, [r7, #64]	; 0x40
 8002176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002178:	2b39      	cmp	r3, #57	; 0x39
 800217a:	ddda      	ble.n	8002132 <change_digit_3+0xbee>
	}

	if(number==90)
 800217c:	1d3b      	adds	r3, r7, #4
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b5a      	cmp	r3, #90	; 0x5a
 8002182:	f040 80b3 	bne.w	80022ec <change_digit_3+0xda8>
	{
		for(int i = 0; i <= 57; ++i)
 8002186:	2300      	movs	r3, #0
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
 800218a:	e021      	b.n	80021d0 <change_digit_3+0xc8c>
			for(int j = 0; j <= 32; ++j)
 800218c:	2300      	movs	r3, #0
 800218e:	637b      	str	r3, [r7, #52]	; 0x34
 8002190:	e018      	b.n	80021c4 <change_digit_3+0xc80>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8002192:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8002196:	1c53      	adds	r3, r2, #1
 8002198:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800219c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800219e:	460b      	mov	r3, r1
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	1a5b      	subs	r3, r3, r1
 80021a4:	015b      	lsls	r3, r3, #5
 80021a6:	4619      	mov	r1, r3
 80021a8:	f241 3349 	movw	r3, #4937	; 0x1349
 80021ac:	440b      	add	r3, r1
 80021ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021b0:	440b      	add	r3, r1
 80021b2:	492f      	ldr	r1, [pc, #188]	; (8002270 <change_digit_3+0xd2c>)
 80021b4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80021b8:	4a2e      	ldr	r2, [pc, #184]	; (8002274 <change_digit_3+0xd30>)
 80021ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80021be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c0:	3301      	adds	r3, #1
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34
 80021c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021c6:	2b20      	cmp	r3, #32
 80021c8:	dde3      	ble.n	8002192 <change_digit_3+0xc4e>
		for(int i = 0; i <= 57; ++i)
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	3301      	adds	r3, #1
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
 80021d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d2:	2b39      	cmp	r3, #57	; 0x39
 80021d4:	ddda      	ble.n	800218c <change_digit_3+0xc48>
		k = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80021dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	e031      	b.n	800224a <change_digit_3+0xd06>
			for(int j = 0; j <= 32; ++j)
 80021e6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e020      	b.n	8002232 <change_digit_3+0xcee>
				screen[38+4861+i*480+j] = nine_picture_3[k++];
 80021f0:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80021f4:	1c53      	adds	r3, r2, #1
 80021f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80021fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	460b      	mov	r3, r1
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a5b      	subs	r3, r3, r1
 8002206:	015b      	lsls	r3, r3, #5
 8002208:	4619      	mov	r1, r3
 800220a:	f241 3323 	movw	r3, #4899	; 0x1323
 800220e:	440b      	add	r3, r1
 8002210:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002214:	6809      	ldr	r1, [r1, #0]
 8002216:	440b      	add	r3, r1
 8002218:	491a      	ldr	r1, [pc, #104]	; (8002284 <change_digit_3+0xd40>)
 800221a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800221e:	4a15      	ldr	r2, [pc, #84]	; (8002274 <change_digit_3+0xd30>)
 8002220:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002228:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	3201      	adds	r2, #1
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b20      	cmp	r3, #32
 800223a:	ddd9      	ble.n	80021f0 <change_digit_3+0xcac>
		for(int i = 0; i <= 57; ++i)
 800223c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002240:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	3201      	adds	r2, #1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b39      	cmp	r3, #57	; 0x39
 8002252:	ddc8      	ble.n	80021e6 <change_digit_3+0xca2>
		k = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 800225a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	e03e      	b.n	80022e2 <change_digit_3+0xd9e>
			for(int j = 0; j <= 32; ++j)
 8002264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	e02d      	b.n	80022ca <change_digit_3+0xd86>
 800226e:	bf00      	nop
 8002270:	08068b64 	.word	0x08068b64
 8002274:	2000001c 	.word	0x2000001c
 8002278:	08064f94 	.word	0x08064f94
 800227c:	080631ac 	.word	0x080631ac
 8002280:	08069a58 	.word	0x08069a58
 8002284:	080622b8 	.word	0x080622b8
				screen[4861+i*480+j] = none_picture_3[k++];
 8002288:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800228c:	1c53      	adds	r3, r2, #1
 800228e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002296:	6819      	ldr	r1, [r3, #0]
 8002298:	460b      	mov	r3, r1
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a5b      	subs	r3, r3, r1
 800229e:	015b      	lsls	r3, r3, #5
 80022a0:	4619      	mov	r1, r3
 80022a2:	f241 23fd 	movw	r3, #4861	; 0x12fd
 80022a6:	440b      	add	r3, r1
 80022a8:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80022ac:	6809      	ldr	r1, [r1, #0]
 80022ae:	440b      	add	r3, r1
 80022b0:	4976      	ldr	r1, [pc, #472]	; (800248c <change_digit_3+0xf48>)
 80022b2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80022b6:	4a76      	ldr	r2, [pc, #472]	; (8002490 <change_digit_3+0xf4c>)
 80022b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80022c4:	6812      	ldr	r2, [r2, #0]
 80022c6:	3201      	adds	r2, #1
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b20      	cmp	r3, #32
 80022d2:	ddd9      	ble.n	8002288 <change_digit_3+0xd44>
		for(int i = 0; i <= 57; ++i)
 80022d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	3201      	adds	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b39      	cmp	r3, #57	; 0x39
 80022ea:	ddbb      	ble.n	8002264 <change_digit_3+0xd20>
	}

	if(number==100)
 80022ec:	1d3b      	adds	r3, r7, #4
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b64      	cmp	r3, #100	; 0x64
 80022f2:	f040 80ba 	bne.w	800246a <change_digit_3+0xf26>
	{
		for(int i = 0; i <= 57; ++i)
 80022f6:	f107 0320 	add.w	r3, r7, #32
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e031      	b.n	8002364 <change_digit_3+0xe20>
			for(int j = 0; j <= 32; ++j)
 8002300:	f107 031c 	add.w	r3, r7, #28
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e020      	b.n	800234c <change_digit_3+0xe08>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 800230a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800230e:	1c53      	adds	r3, r2, #1
 8002310:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002314:	f107 0320 	add.w	r3, r7, #32
 8002318:	6819      	ldr	r1, [r3, #0]
 800231a:	460b      	mov	r3, r1
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	1a5b      	subs	r3, r3, r1
 8002320:	015b      	lsls	r3, r3, #5
 8002322:	4619      	mov	r1, r3
 8002324:	f241 3349 	movw	r3, #4937	; 0x1349
 8002328:	440b      	add	r3, r1
 800232a:	f107 011c 	add.w	r1, r7, #28
 800232e:	6809      	ldr	r1, [r1, #0]
 8002330:	440b      	add	r3, r1
 8002332:	4958      	ldr	r1, [pc, #352]	; (8002494 <change_digit_3+0xf50>)
 8002334:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002338:	4a55      	ldr	r2, [pc, #340]	; (8002490 <change_digit_3+0xf4c>)
 800233a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800233e:	f107 031c 	add.w	r3, r7, #28
 8002342:	f107 021c 	add.w	r2, r7, #28
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	3201      	adds	r2, #1
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2b20      	cmp	r3, #32
 8002354:	ddd9      	ble.n	800230a <change_digit_3+0xdc6>
		for(int i = 0; i <= 57; ++i)
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	f107 0220 	add.w	r2, r7, #32
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	3201      	adds	r2, #1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	f107 0320 	add.w	r3, r7, #32
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b39      	cmp	r3, #57	; 0x39
 800236c:	ddc8      	ble.n	8002300 <change_digit_3+0xdbc>
		k = 0;
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 8002374:	f107 0318 	add.w	r3, r7, #24
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]
 800237c:	e031      	b.n	80023e2 <change_digit_3+0xe9e>
			for(int j = 0; j <= 32; ++j)
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	e020      	b.n	80023ca <change_digit_3+0xe86>
				screen[38+4861+i*480+j] = zero_picture_3[k++];
 8002388:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800238c:	1c53      	adds	r3, r2, #1
 800238e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002392:	f107 0318 	add.w	r3, r7, #24
 8002396:	6819      	ldr	r1, [r3, #0]
 8002398:	460b      	mov	r3, r1
 800239a:	011b      	lsls	r3, r3, #4
 800239c:	1a5b      	subs	r3, r3, r1
 800239e:	015b      	lsls	r3, r3, #5
 80023a0:	4619      	mov	r1, r3
 80023a2:	f241 3323 	movw	r3, #4899	; 0x1323
 80023a6:	440b      	add	r3, r1
 80023a8:	f107 0114 	add.w	r1, r7, #20
 80023ac:	6809      	ldr	r1, [r1, #0]
 80023ae:	440b      	add	r3, r1
 80023b0:	4938      	ldr	r1, [pc, #224]	; (8002494 <change_digit_3+0xf50>)
 80023b2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80023b6:	4a36      	ldr	r2, [pc, #216]	; (8002490 <change_digit_3+0xf4c>)
 80023b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	f107 0214 	add.w	r2, r7, #20
 80023c4:	6812      	ldr	r2, [r2, #0]
 80023c6:	3201      	adds	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f107 0314 	add.w	r3, r7, #20
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	ddd9      	ble.n	8002388 <change_digit_3+0xe44>
		for(int i = 0; i <= 57; ++i)
 80023d4:	f107 0318 	add.w	r3, r7, #24
 80023d8:	f107 0218 	add.w	r2, r7, #24
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	3201      	adds	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	f107 0318 	add.w	r3, r7, #24
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b39      	cmp	r3, #57	; 0x39
 80023ea:	ddc8      	ble.n	800237e <change_digit_3+0xe3a>
		k = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		for(int i = 0; i <= 57; ++i)
 80023f2:	f107 0310 	add.w	r3, r7, #16
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	e031      	b.n	8002460 <change_digit_3+0xf1c>
			for(int j = 0; j <= 32; ++j)
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	e020      	b.n	8002448 <change_digit_3+0xf04>
				screen[4861+i*480+j] = one_picture_3[k++];
 8002406:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800240a:	1c53      	adds	r3, r2, #1
 800240c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002410:	f107 0310 	add.w	r3, r7, #16
 8002414:	6819      	ldr	r1, [r3, #0]
 8002416:	460b      	mov	r3, r1
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a5b      	subs	r3, r3, r1
 800241c:	015b      	lsls	r3, r3, #5
 800241e:	4619      	mov	r1, r3
 8002420:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8002424:	440b      	add	r3, r1
 8002426:	f107 010c 	add.w	r1, r7, #12
 800242a:	6809      	ldr	r1, [r1, #0]
 800242c:	440b      	add	r3, r1
 800242e:	491a      	ldr	r1, [pc, #104]	; (8002498 <change_digit_3+0xf54>)
 8002430:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002434:	4a16      	ldr	r2, [pc, #88]	; (8002490 <change_digit_3+0xf4c>)
 8002436:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800243a:	f107 030c 	add.w	r3, r7, #12
 800243e:	f107 020c 	add.w	r2, r7, #12
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	3201      	adds	r2, #1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f107 030c 	add.w	r3, r7, #12
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b20      	cmp	r3, #32
 8002450:	ddd9      	ble.n	8002406 <change_digit_3+0xec2>
		for(int i = 0; i <= 57; ++i)
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	f107 0210 	add.w	r2, r7, #16
 800245a:	6812      	ldr	r2, [r2, #0]
 800245c:	3201      	adds	r2, #1
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b39      	cmp	r3, #57	; 0x39
 8002468:	ddc8      	ble.n	80023fc <change_digit_3+0xeb8>
	}

	LTDC_Layer2->CFBAR = (uint32_t)screen;
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <change_digit_3+0xf58>)
 800246c:	4a08      	ldr	r2, [pc, #32]	; (8002490 <change_digit_3+0xf4c>)
 800246e:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <change_digit_3+0xf5c>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <change_digit_3+0xf5c>)
 8002476:	f043 0302 	orr.w	r3, r3, #2
 800247a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800247c:	bf00      	nop
 800247e:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	080631ac 	.word	0x080631ac
 8002490:	2000001c 	.word	0x2000001c
 8002494:	08068b64 	.word	0x08068b64
 8002498:	080640a0 	.word	0x080640a0
 800249c:	40016904 	.word	0x40016904
 80024a0:	40016800 	.word	0x40016800

080024a4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	++cnt;
 80024a8:	4b90      	ldr	r3, [pc, #576]	; (80026ec <SysTick_Handler+0x248>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	4a8f      	ldr	r2, [pc, #572]	; (80026ec <SysTick_Handler+0x248>)
 80024b0:	6013      	str	r3, [r2, #0]

	if(cnt == 150000 && (flags & 0x1) != 0)
 80024b2:	4b8e      	ldr	r3, [pc, #568]	; (80026ec <SysTick_Handler+0x248>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8e      	ldr	r2, [pc, #568]	; (80026f0 <SysTick_Handler+0x24c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d144      	bne.n	8002546 <SysTick_Handler+0xa2>
 80024bc:	4b8d      	ldr	r3, [pc, #564]	; (80026f4 <SysTick_Handler+0x250>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d03e      	beq.n	8002546 <SysTick_Handler+0xa2>
	{
		cnt = 0;
 80024c8:	4b88      	ldr	r3, [pc, #544]	; (80026ec <SysTick_Handler+0x248>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
		if((flags & 0x80) == 0)
 80024ce:	4b89      	ldr	r3, [pc, #548]	; (80026f4 <SysTick_Handler+0x250>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b25b      	sxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	db17      	blt.n	8002508 <SysTick_Handler+0x64>
		{
			change_digit_1(1,10);
 80024d8:	210a      	movs	r1, #10
 80024da:	2001      	movs	r0, #1
 80024dc:	f7fe fc2c 	bl	8000d38 <change_digit_1>
			change_digit_1(2,10);
 80024e0:	210a      	movs	r1, #10
 80024e2:	2002      	movs	r0, #2
 80024e4:	f7fe fc28 	bl	8000d38 <change_digit_1>
			change_digit_1(3,10);
 80024e8:	210a      	movs	r1, #10
 80024ea:	2003      	movs	r0, #3
 80024ec:	f7fe fc24 	bl	8000d38 <change_digit_1>
			change_digit_1(4,10);
 80024f0:	210a      	movs	r1, #10
 80024f2:	2004      	movs	r0, #4
 80024f4:	f7fe fc20 	bl	8000d38 <change_digit_1>
			flags |= 0x80;
 80024f8:	4b7e      	ldr	r3, [pc, #504]	; (80026f4 <SysTick_Handler+0x250>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002500:	b2da      	uxtb	r2, r3
 8002502:	4b7c      	ldr	r3, [pc, #496]	; (80026f4 <SysTick_Handler+0x250>)
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	e01e      	b.n	8002546 <SysTick_Handler+0xa2>
		}
		else
		{
			change_digit_1(1,hour_2);
 8002508:	4b7b      	ldr	r3, [pc, #492]	; (80026f8 <SysTick_Handler+0x254>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4619      	mov	r1, r3
 800250e:	2001      	movs	r0, #1
 8002510:	f7fe fc12 	bl	8000d38 <change_digit_1>
			change_digit_1(2,hour);
 8002514:	4b79      	ldr	r3, [pc, #484]	; (80026fc <SysTick_Handler+0x258>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	4619      	mov	r1, r3
 800251a:	2002      	movs	r0, #2
 800251c:	f7fe fc0c 	bl	8000d38 <change_digit_1>
			change_digit_1(3,minute_2);
 8002520:	4b77      	ldr	r3, [pc, #476]	; (8002700 <SysTick_Handler+0x25c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4619      	mov	r1, r3
 8002526:	2003      	movs	r0, #3
 8002528:	f7fe fc06 	bl	8000d38 <change_digit_1>
			change_digit_1(4,minute);
 800252c:	4b75      	ldr	r3, [pc, #468]	; (8002704 <SysTick_Handler+0x260>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	4619      	mov	r1, r3
 8002532:	2004      	movs	r0, #4
 8002534:	f7fe fc00 	bl	8000d38 <change_digit_1>
			flags &= ~0x80;
 8002538:	4b6e      	ldr	r3, [pc, #440]	; (80026f4 <SysTick_Handler+0x250>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4b6c      	ldr	r3, [pc, #432]	; (80026f4 <SysTick_Handler+0x250>)
 8002544:	701a      	strb	r2, [r3, #0]
		}
	}
	if(cnt == 150000 && (flags & 0x2) != 0)
 8002546:	4b69      	ldr	r3, [pc, #420]	; (80026ec <SysTick_Handler+0x248>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a69      	ldr	r2, [pc, #420]	; (80026f0 <SysTick_Handler+0x24c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d125      	bne.n	800259c <SysTick_Handler+0xf8>
 8002550:	4b68      	ldr	r3, [pc, #416]	; (80026f4 <SysTick_Handler+0x250>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b00      	cmp	r3, #0
 800255a:	d01f      	beq.n	800259c <SysTick_Handler+0xf8>
	{
		cnt = 0;
 800255c:	4b63      	ldr	r3, [pc, #396]	; (80026ec <SysTick_Handler+0x248>)
 800255e:	2200      	movs	r2, #0
 8002560:	601a      	str	r2, [r3, #0]
		if((flags & 0x40) == 0)
 8002562:	4b64      	ldr	r3, [pc, #400]	; (80026f4 <SysTick_Handler+0x250>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <SysTick_Handler+0xe0>
		{
			change_digit_3(200);
 800256e:	20c8      	movs	r0, #200	; 0xc8
 8002570:	f7fe ffe8 	bl	8001544 <change_digit_3>
			flags |= 0x40;
 8002574:	4b5f      	ldr	r3, [pc, #380]	; (80026f4 <SysTick_Handler+0x250>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b5d      	ldr	r3, [pc, #372]	; (80026f4 <SysTick_Handler+0x250>)
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	e00b      	b.n	800259c <SysTick_Handler+0xf8>
		}
		else
		{
			change_digit_3(power);
 8002584:	4b60      	ldr	r3, [pc, #384]	; (8002708 <SysTick_Handler+0x264>)
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe ffdb 	bl	8001544 <change_digit_3>
			flags &= ~0x40;
 800258e:	4b59      	ldr	r3, [pc, #356]	; (80026f4 <SysTick_Handler+0x250>)
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b56      	ldr	r3, [pc, #344]	; (80026f4 <SysTick_Handler+0x250>)
 800259a:	701a      	strb	r2, [r3, #0]
		}
	}
	if(cnt == 587500 && (flags & 0x4) != 0)
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <SysTick_Handler+0x248>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a5a      	ldr	r2, [pc, #360]	; (800270c <SysTick_Handler+0x268>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d17d      	bne.n	80026a2 <SysTick_Handler+0x1fe>
 80025a6:	4b53      	ldr	r3, [pc, #332]	; (80026f4 <SysTick_Handler+0x250>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d077      	beq.n	80026a2 <SysTick_Handler+0x1fe>
	{
		if(minute == 0)
 80025b2:	4b54      	ldr	r3, [pc, #336]	; (8002704 <SysTick_Handler+0x260>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d164      	bne.n	8002684 <SysTick_Handler+0x1e0>
		{
			if(minute_2 == 0)
 80025ba:	4b51      	ldr	r3, [pc, #324]	; (8002700 <SysTick_Handler+0x25c>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d148      	bne.n	8002654 <SysTick_Handler+0x1b0>
			{
				if(hour == 0)
 80025c2:	4b4e      	ldr	r3, [pc, #312]	; (80026fc <SysTick_Handler+0x258>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d125      	bne.n	8002616 <SysTick_Handler+0x172>
				{
					cnt = 819;
 80025ca:	4b48      	ldr	r3, [pc, #288]	; (80026ec <SysTick_Handler+0x248>)
 80025cc:	f240 3233 	movw	r2, #819	; 0x333
 80025d0:	601a      	str	r2, [r3, #0]
					hour = 9;
 80025d2:	4b4a      	ldr	r3, [pc, #296]	; (80026fc <SysTick_Handler+0x258>)
 80025d4:	2209      	movs	r2, #9
 80025d6:	701a      	strb	r2, [r3, #0]
					minute_2 = 5;
 80025d8:	4b49      	ldr	r3, [pc, #292]	; (8002700 <SysTick_Handler+0x25c>)
 80025da:	2205      	movs	r2, #5
 80025dc:	701a      	strb	r2, [r3, #0]
					minute = 9;
 80025de:	4b49      	ldr	r3, [pc, #292]	; (8002704 <SysTick_Handler+0x260>)
 80025e0:	2209      	movs	r2, #9
 80025e2:	701a      	strb	r2, [r3, #0]
					--hour_2;
 80025e4:	4b44      	ldr	r3, [pc, #272]	; (80026f8 <SysTick_Handler+0x254>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b42      	ldr	r3, [pc, #264]	; (80026f8 <SysTick_Handler+0x254>)
 80025ee:	701a      	strb	r2, [r3, #0]
					change_digit_2(1,hour_2);
 80025f0:	4b41      	ldr	r3, [pc, #260]	; (80026f8 <SysTick_Handler+0x254>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	4619      	mov	r1, r3
 80025f6:	2001      	movs	r0, #1
 80025f8:	f7fe fdb6 	bl	8001168 <change_digit_2>
					change_digit_2(2,9);
 80025fc:	2109      	movs	r1, #9
 80025fe:	2002      	movs	r0, #2
 8002600:	f7fe fdb2 	bl	8001168 <change_digit_2>
					change_digit_2(3,5);
 8002604:	2105      	movs	r1, #5
 8002606:	2003      	movs	r0, #3
 8002608:	f7fe fdae 	bl	8001168 <change_digit_2>
					change_digit_2(4,9);
 800260c:	2109      	movs	r1, #9
 800260e:	2004      	movs	r0, #4
 8002610:	f7fe fdaa 	bl	8001168 <change_digit_2>
 8002614:	e045      	b.n	80026a2 <SysTick_Handler+0x1fe>
				}
				else
				{
					cnt = 683;
 8002616:	4b35      	ldr	r3, [pc, #212]	; (80026ec <SysTick_Handler+0x248>)
 8002618:	f240 22ab 	movw	r2, #683	; 0x2ab
 800261c:	601a      	str	r2, [r3, #0]
					minute_2 = 5;
 800261e:	4b38      	ldr	r3, [pc, #224]	; (8002700 <SysTick_Handler+0x25c>)
 8002620:	2205      	movs	r2, #5
 8002622:	701a      	strb	r2, [r3, #0]
					minute = 9;
 8002624:	4b37      	ldr	r3, [pc, #220]	; (8002704 <SysTick_Handler+0x260>)
 8002626:	2209      	movs	r2, #9
 8002628:	701a      	strb	r2, [r3, #0]
					--hour;
 800262a:	4b34      	ldr	r3, [pc, #208]	; (80026fc <SysTick_Handler+0x258>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	3b01      	subs	r3, #1
 8002630:	b2da      	uxtb	r2, r3
 8002632:	4b32      	ldr	r3, [pc, #200]	; (80026fc <SysTick_Handler+0x258>)
 8002634:	701a      	strb	r2, [r3, #0]
					change_digit_2(2,hour);
 8002636:	4b31      	ldr	r3, [pc, #196]	; (80026fc <SysTick_Handler+0x258>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	4619      	mov	r1, r3
 800263c:	2002      	movs	r0, #2
 800263e:	f7fe fd93 	bl	8001168 <change_digit_2>
					change_digit_2(3,5);
 8002642:	2105      	movs	r1, #5
 8002644:	2003      	movs	r0, #3
 8002646:	f7fe fd8f 	bl	8001168 <change_digit_2>
					change_digit_2(4,9);
 800264a:	2109      	movs	r1, #9
 800264c:	2004      	movs	r0, #4
 800264e:	f7fe fd8b 	bl	8001168 <change_digit_2>
 8002652:	e026      	b.n	80026a2 <SysTick_Handler+0x1fe>
				}
			}
			else
			{
				cnt = 414;
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <SysTick_Handler+0x248>)
 8002656:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800265a:	601a      	str	r2, [r3, #0]
				minute = 9;
 800265c:	4b29      	ldr	r3, [pc, #164]	; (8002704 <SysTick_Handler+0x260>)
 800265e:	2209      	movs	r2, #9
 8002660:	701a      	strb	r2, [r3, #0]
				--minute_2;
 8002662:	4b27      	ldr	r3, [pc, #156]	; (8002700 <SysTick_Handler+0x25c>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <SysTick_Handler+0x25c>)
 800266c:	701a      	strb	r2, [r3, #0]
				change_digit_2(3,minute_2);
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <SysTick_Handler+0x25c>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	4619      	mov	r1, r3
 8002674:	2003      	movs	r0, #3
 8002676:	f7fe fd77 	bl	8001168 <change_digit_2>
				change_digit_2(4,9);
 800267a:	2109      	movs	r1, #9
 800267c:	2004      	movs	r0, #4
 800267e:	f7fe fd73 	bl	8001168 <change_digit_2>
 8002682:	e00e      	b.n	80026a2 <SysTick_Handler+0x1fe>
			}
		}
		else
		{
			cnt = 136;
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <SysTick_Handler+0x248>)
 8002686:	2288      	movs	r2, #136	; 0x88
 8002688:	601a      	str	r2, [r3, #0]
			--minute;
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <SysTick_Handler+0x260>)
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	3b01      	subs	r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b1c      	ldr	r3, [pc, #112]	; (8002704 <SysTick_Handler+0x260>)
 8002694:	701a      	strb	r2, [r3, #0]
			change_digit_2(4,minute);
 8002696:	4b1b      	ldr	r3, [pc, #108]	; (8002704 <SysTick_Handler+0x260>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	4619      	mov	r1, r3
 800269c:	2004      	movs	r0, #4
 800269e:	f7fe fd63 	bl	8001168 <change_digit_2>
		}
	}
	if((hour_2 == 0 && hour == 0 && minute_2 == 0 && minute == 0))
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <SysTick_Handler+0x254>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <SysTick_Handler+0x232>
 80026aa:	4b14      	ldr	r3, [pc, #80]	; (80026fc <SysTick_Handler+0x258>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d111      	bne.n	80026d6 <SysTick_Handler+0x232>
 80026b2:	4b13      	ldr	r3, [pc, #76]	; (8002700 <SysTick_Handler+0x25c>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d10d      	bne.n	80026d6 <SysTick_Handler+0x232>
 80026ba:	4b12      	ldr	r3, [pc, #72]	; (8002704 <SysTick_Handler+0x260>)
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d109      	bne.n	80026d6 <SysTick_Handler+0x232>
	{
		flags &= ~0x4;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <SysTick_Handler+0x250>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	f023 0304 	bic.w	r3, r3, #4
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <SysTick_Handler+0x250>)
 80026ce:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = 0;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <SysTick_Handler+0x26c>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if(cnt == 600000)
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <SysTick_Handler+0x248>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <SysTick_Handler+0x270>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d102      	bne.n	80026e6 <SysTick_Handler+0x242>
		cnt = 0;
 80026e0:	4b02      	ldr	r3, [pc, #8]	; (80026ec <SysTick_Handler+0x248>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	2003fc20 	.word	0x2003fc20
 80026f0:	000249f0 	.word	0x000249f0
 80026f4:	2003fc1c 	.word	0x2003fc1c
 80026f8:	2003fc27 	.word	0x2003fc27
 80026fc:	2003fc26 	.word	0x2003fc26
 8002700:	2003fc25 	.word	0x2003fc25
 8002704:	2003fc24 	.word	0x2003fc24
 8002708:	2003fc2c 	.word	0x2003fc2c
 800270c:	0008f6ec 	.word	0x0008f6ec
 8002710:	40000400 	.word	0x40000400
 8002714:	000927c0 	.word	0x000927c0

08002718 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler()
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
	if((flags & 0x4) == 0)
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d156      	bne.n	80027d8 <EXTI0_IRQHandler+0xc0>
	{
		if((flags & 0x2) != 0)
 800272a:	4b35      	ldr	r3, [pc, #212]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00c      	beq.n	8002750 <EXTI0_IRQHandler+0x38>
		{
			flags &= ~0x2;
 8002736:	4b32      	ldr	r3, [pc, #200]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	f023 0302 	bic.w	r3, r3, #2
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b2f      	ldr	r3, [pc, #188]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 8002742:	701a      	strb	r2, [r3, #0]
			change_digit_3(power);
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <EXTI0_IRQHandler+0xec>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fefb 	bl	8001544 <change_digit_3>
 800274e:	e043      	b.n	80027d8 <EXTI0_IRQHandler+0xc0>
		}
		else
		{
			if((flags & 0x1) != 0)
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d036      	beq.n	80027ca <EXTI0_IRQHandler+0xb2>
			{
				flags |= 0x2;
 800275c:	4b28      	ldr	r3, [pc, #160]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	f043 0302 	orr.w	r3, r3, #2
 8002764:	b2da      	uxtb	r2, r3
 8002766:	4b26      	ldr	r3, [pc, #152]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 8002768:	701a      	strb	r2, [r3, #0]
				flags &= ~0x1;
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	b2da      	uxtb	r2, r3
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 8002776:	701a      	strb	r2, [r3, #0]
				set_minute = minute;
 8002778:	4b23      	ldr	r3, [pc, #140]	; (8002808 <EXTI0_IRQHandler+0xf0>)
 800277a:	781a      	ldrb	r2, [r3, #0]
 800277c:	4b23      	ldr	r3, [pc, #140]	; (800280c <EXTI0_IRQHandler+0xf4>)
 800277e:	701a      	strb	r2, [r3, #0]
				set_minute_2 = minute_2;
 8002780:	4b23      	ldr	r3, [pc, #140]	; (8002810 <EXTI0_IRQHandler+0xf8>)
 8002782:	781a      	ldrb	r2, [r3, #0]
 8002784:	4b23      	ldr	r3, [pc, #140]	; (8002814 <EXTI0_IRQHandler+0xfc>)
 8002786:	701a      	strb	r2, [r3, #0]
				set_hour = hour;
 8002788:	4b23      	ldr	r3, [pc, #140]	; (8002818 <EXTI0_IRQHandler+0x100>)
 800278a:	781a      	ldrb	r2, [r3, #0]
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <EXTI0_IRQHandler+0x104>)
 800278e:	701a      	strb	r2, [r3, #0]
				set_hour_2 = hour_2;
 8002790:	4b23      	ldr	r3, [pc, #140]	; (8002820 <EXTI0_IRQHandler+0x108>)
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	4b23      	ldr	r3, [pc, #140]	; (8002824 <EXTI0_IRQHandler+0x10c>)
 8002796:	701a      	strb	r2, [r3, #0]
				change_digit_1(1,set_hour_2);
 8002798:	4b22      	ldr	r3, [pc, #136]	; (8002824 <EXTI0_IRQHandler+0x10c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4619      	mov	r1, r3
 800279e:	2001      	movs	r0, #1
 80027a0:	f7fe faca 	bl	8000d38 <change_digit_1>
				change_digit_1(2,set_hour);
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <EXTI0_IRQHandler+0x104>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	2002      	movs	r0, #2
 80027ac:	f7fe fac4 	bl	8000d38 <change_digit_1>
				change_digit_1(3,set_minute_2);
 80027b0:	4b18      	ldr	r3, [pc, #96]	; (8002814 <EXTI0_IRQHandler+0xfc>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	4619      	mov	r1, r3
 80027b6:	2003      	movs	r0, #3
 80027b8:	f7fe fabe 	bl	8000d38 <change_digit_1>
				change_digit_1(4,set_minute);
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <EXTI0_IRQHandler+0xf4>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	2004      	movs	r0, #4
 80027c4:	f7fe fab8 	bl	8000d38 <change_digit_1>
 80027c8:	e006      	b.n	80027d8 <EXTI0_IRQHandler+0xc0>

			}
			else
				flags |= 0x1;
 80027ca:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <EXTI0_IRQHandler+0xe8>)
 80027d6:	701a      	strb	r2, [r3, #0]
		}
	}
	for(int i = 0; i <= 1000000; ++i);
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	e002      	b.n	80027e4 <EXTI0_IRQHandler+0xcc>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3301      	adds	r3, #1
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a10      	ldr	r2, [pc, #64]	; (8002828 <EXTI0_IRQHandler+0x110>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	ddf8      	ble.n	80027de <EXTI0_IRQHandler+0xc6>
	EXTI->PR |= EXTI_PR_PR0;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	; (800282c <EXTI0_IRQHandler+0x114>)
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	4a0e      	ldr	r2, [pc, #56]	; (800282c <EXTI0_IRQHandler+0x114>)
 80027f2:	f043 0301 	orr.w	r3, r3, #1
 80027f6:	6153      	str	r3, [r2, #20]
}
 80027f8:	bf00      	nop
 80027fa:	3708      	adds	r7, #8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	2003fc1c 	.word	0x2003fc1c
 8002804:	2003fc2c 	.word	0x2003fc2c
 8002808:	2003fc24 	.word	0x2003fc24
 800280c:	2003fc28 	.word	0x2003fc28
 8002810:	2003fc25 	.word	0x2003fc25
 8002814:	2003fc29 	.word	0x2003fc29
 8002818:	2003fc26 	.word	0x2003fc26
 800281c:	2003fc2a 	.word	0x2003fc2a
 8002820:	2003fc27 	.word	0x2003fc27
 8002824:	2003fc2b 	.word	0x2003fc2b
 8002828:	000f4240 	.word	0x000f4240
 800282c:	40013c00 	.word	0x40013c00

08002830 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler()
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
	if((flags & 0x2) != 0 && power != 100)
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <EXTI1_IRQHandler+0xc0>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <EXTI1_IRQHandler+0x26>
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <EXTI1_IRQHandler+0xc4>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d005      	beq.n	8002856 <EXTI1_IRQHandler+0x26>
		power += 10;
 800284a:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <EXTI1_IRQHandler+0xc4>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	330a      	adds	r3, #10
 8002850:	b2da      	uxtb	r2, r3
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <EXTI1_IRQHandler+0xc4>)
 8002854:	701a      	strb	r2, [r3, #0]
	if((flags & 0x1) != 0)
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <EXTI1_IRQHandler+0xc0>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d02c      	beq.n	80028bc <EXTI1_IRQHandler+0x8c>
	{
		if(hour_2 >= 9 && hour >= 9 && minute_2 >= 3 && minute >= 0)
 8002862:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <EXTI1_IRQHandler+0xc8>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b08      	cmp	r3, #8
 8002868:	d907      	bls.n	800287a <EXTI1_IRQHandler+0x4a>
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <EXTI1_IRQHandler+0xcc>)
 800286c:	781b      	ldrb	r3, [r3, #0]
 800286e:	2b08      	cmp	r3, #8
 8002870:	d903      	bls.n	800287a <EXTI1_IRQHandler+0x4a>
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <EXTI1_IRQHandler+0xd0>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b02      	cmp	r3, #2
 8002878:	d822      	bhi.n	80028c0 <EXTI1_IRQHandler+0x90>
			goto end_plus;
		else
		{
			minute_2 += 3;
 800287a:	4b21      	ldr	r3, [pc, #132]	; (8002900 <EXTI1_IRQHandler+0xd0>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	3303      	adds	r3, #3
 8002880:	b2da      	uxtb	r2, r3
 8002882:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <EXTI1_IRQHandler+0xd0>)
 8002884:	701a      	strb	r2, [r3, #0]
			if(minute_2 == 6)
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <EXTI1_IRQHandler+0xd0>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d116      	bne.n	80028bc <EXTI1_IRQHandler+0x8c>
			{
				++hour;
 800288e:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <EXTI1_IRQHandler+0xcc>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	3301      	adds	r3, #1
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <EXTI1_IRQHandler+0xcc>)
 8002898:	701a      	strb	r2, [r3, #0]
				minute_2 = 0;
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <EXTI1_IRQHandler+0xd0>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
				if(hour == 9)
 80028a0:	4b16      	ldr	r3, [pc, #88]	; (80028fc <EXTI1_IRQHandler+0xcc>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b09      	cmp	r3, #9
 80028a6:	d109      	bne.n	80028bc <EXTI1_IRQHandler+0x8c>
				{
					++hour_2;
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <EXTI1_IRQHandler+0xc8>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	3301      	adds	r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <EXTI1_IRQHandler+0xc8>)
 80028b2:	701a      	strb	r2, [r3, #0]
					hour = 0;
 80028b4:	4b11      	ldr	r3, [pc, #68]	; (80028fc <EXTI1_IRQHandler+0xcc>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]
 80028ba:	e002      	b.n	80028c2 <EXTI1_IRQHandler+0x92>
				}
			}
		}
	}
	end_plus:
 80028bc:	bf00      	nop
 80028be:	e000      	b.n	80028c2 <EXTI1_IRQHandler+0x92>
			goto end_plus;
 80028c0:	bf00      	nop
	for(int i = 0; i <= 300000; ++i);
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	e002      	b.n	80028ce <EXTI1_IRQHandler+0x9e>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3301      	adds	r3, #1
 80028cc:	607b      	str	r3, [r7, #4]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a0c      	ldr	r2, [pc, #48]	; (8002904 <EXTI1_IRQHandler+0xd4>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	ddf8      	ble.n	80028c8 <EXTI1_IRQHandler+0x98>
	EXTI->PR |= EXTI_PR_PR1;
 80028d6:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <EXTI1_IRQHandler+0xd8>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <EXTI1_IRQHandler+0xd8>)
 80028dc:	f043 0302 	orr.w	r3, r3, #2
 80028e0:	6153      	str	r3, [r2, #20]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	2003fc1c 	.word	0x2003fc1c
 80028f4:	2003fc2c 	.word	0x2003fc2c
 80028f8:	2003fc27 	.word	0x2003fc27
 80028fc:	2003fc26 	.word	0x2003fc26
 8002900:	2003fc25 	.word	0x2003fc25
 8002904:	000493e0 	.word	0x000493e0
 8002908:	40013c00 	.word	0x40013c00

0800290c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler()
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
	if((flags & 0x2) != 0 && power != 0)
 8002912:	4b31      	ldr	r3, [pc, #196]	; (80029d8 <EXTI2_IRQHandler+0xcc>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d009      	beq.n	8002932 <EXTI2_IRQHandler+0x26>
 800291e:	4b2f      	ldr	r3, [pc, #188]	; (80029dc <EXTI2_IRQHandler+0xd0>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d005      	beq.n	8002932 <EXTI2_IRQHandler+0x26>
		power -= 10;
 8002926:	4b2d      	ldr	r3, [pc, #180]	; (80029dc <EXTI2_IRQHandler+0xd0>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	3b0a      	subs	r3, #10
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4b2b      	ldr	r3, [pc, #172]	; (80029dc <EXTI2_IRQHandler+0xd0>)
 8002930:	701a      	strb	r2, [r3, #0]
	if((flags & 0x1) != 0)
 8002932:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <EXTI2_IRQHandler+0xcc>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d032      	beq.n	80029a4 <EXTI2_IRQHandler+0x98>
	{
		if((hour_2 == 0 && hour == 0 && minute_2 == 0 && minute == 0))
 800293e:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <EXTI2_IRQHandler+0xd4>)
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10b      	bne.n	800295e <EXTI2_IRQHandler+0x52>
 8002946:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <EXTI2_IRQHandler+0xd8>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d107      	bne.n	800295e <EXTI2_IRQHandler+0x52>
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <EXTI2_IRQHandler+0xdc>)
 8002950:	781b      	ldrb	r3, [r3, #0]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d103      	bne.n	800295e <EXTI2_IRQHandler+0x52>
 8002956:	4b25      	ldr	r3, [pc, #148]	; (80029ec <EXTI2_IRQHandler+0xe0>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d024      	beq.n	80029a8 <EXTI2_IRQHandler+0x9c>
			goto end_minus;
		else
		{
			if(minute_2 == 0)
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <EXTI2_IRQHandler+0xdc>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d117      	bne.n	8002996 <EXTI2_IRQHandler+0x8a>
			{
				if(hour == 0)
 8002966:	4b1f      	ldr	r3, [pc, #124]	; (80029e4 <EXTI2_IRQHandler+0xd8>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d109      	bne.n	8002982 <EXTI2_IRQHandler+0x76>
				{
					--hour_2;
 800296e:	4b1c      	ldr	r3, [pc, #112]	; (80029e0 <EXTI2_IRQHandler+0xd4>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	3b01      	subs	r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <EXTI2_IRQHandler+0xd4>)
 8002978:	701a      	strb	r2, [r3, #0]
					hour = 9;
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <EXTI2_IRQHandler+0xd8>)
 800297c:	2209      	movs	r2, #9
 800297e:	701a      	strb	r2, [r3, #0]
 8002980:	e013      	b.n	80029aa <EXTI2_IRQHandler+0x9e>
				}
				else
				{
					--hour;
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <EXTI2_IRQHandler+0xd8>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	3b01      	subs	r3, #1
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <EXTI2_IRQHandler+0xd8>)
 800298c:	701a      	strb	r2, [r3, #0]
					minute_2 = 3;
 800298e:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <EXTI2_IRQHandler+0xdc>)
 8002990:	2203      	movs	r2, #3
 8002992:	701a      	strb	r2, [r3, #0]
 8002994:	e009      	b.n	80029aa <EXTI2_IRQHandler+0x9e>
				}
			}
			else
				minute_2 -= 3;
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <EXTI2_IRQHandler+0xdc>)
 8002998:	781b      	ldrb	r3, [r3, #0]
 800299a:	3b03      	subs	r3, #3
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <EXTI2_IRQHandler+0xdc>)
 80029a0:	701a      	strb	r2, [r3, #0]
 80029a2:	e002      	b.n	80029aa <EXTI2_IRQHandler+0x9e>
		}
	}
	end_minus:
 80029a4:	bf00      	nop
 80029a6:	e000      	b.n	80029aa <EXTI2_IRQHandler+0x9e>
			goto end_minus;
 80029a8:	bf00      	nop
	for(int i = 0; i <= 300000; ++i);
 80029aa:	2300      	movs	r3, #0
 80029ac:	607b      	str	r3, [r7, #4]
 80029ae:	e002      	b.n	80029b6 <EXTI2_IRQHandler+0xaa>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3301      	adds	r3, #1
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <EXTI2_IRQHandler+0xe4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	ddf8      	ble.n	80029b0 <EXTI2_IRQHandler+0xa4>
	EXTI->PR |= EXTI_PR_PR2;
 80029be:	4b0d      	ldr	r3, [pc, #52]	; (80029f4 <EXTI2_IRQHandler+0xe8>)
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4a0c      	ldr	r2, [pc, #48]	; (80029f4 <EXTI2_IRQHandler+0xe8>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	6153      	str	r3, [r2, #20]
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr
 80029d6:	bf00      	nop
 80029d8:	2003fc1c 	.word	0x2003fc1c
 80029dc:	2003fc2c 	.word	0x2003fc2c
 80029e0:	2003fc27 	.word	0x2003fc27
 80029e4:	2003fc26 	.word	0x2003fc26
 80029e8:	2003fc25 	.word	0x2003fc25
 80029ec:	2003fc24 	.word	0x2003fc24
 80029f0:	000493e0 	.word	0x000493e0
 80029f4:	40013c00 	.word	0x40013c00

080029f8 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler()
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
	if((flags & 0x4) == 0 && (flags & 0x1) == 0 && (flags & 0x2) == 0)
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	f003 0304 	and.w	r3, r3, #4
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d147      	bne.n	8002a9a <EXTI3_IRQHandler+0xa2>
 8002a0a:	4b39      	ldr	r3, [pc, #228]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d141      	bne.n	8002a9a <EXTI3_IRQHandler+0xa2>
 8002a16:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d13b      	bne.n	8002a9a <EXTI3_IRQHandler+0xa2>
	{
		flags |= 0x4;
 8002a22:	4b33      	ldr	r3, [pc, #204]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	f043 0304 	orr.w	r3, r3, #4
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	4b30      	ldr	r3, [pc, #192]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002a2e:	701a      	strb	r2, [r3, #0]
		TIM3->CCR1 = power;
 8002a30:	4b30      	ldr	r3, [pc, #192]	; (8002af4 <EXTI3_IRQHandler+0xfc>)
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <EXTI3_IRQHandler+0x100>)
 8002a36:	635a      	str	r2, [r3, #52]	; 0x34
		change_digit_1(1,set_hour_2);
 8002a38:	4b30      	ldr	r3, [pc, #192]	; (8002afc <EXTI3_IRQHandler+0x104>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	2001      	movs	r0, #1
 8002a40:	f7fe f97a 	bl	8000d38 <change_digit_1>
		change_digit_1(2,set_hour);
 8002a44:	4b2e      	ldr	r3, [pc, #184]	; (8002b00 <EXTI3_IRQHandler+0x108>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	4619      	mov	r1, r3
 8002a4a:	2002      	movs	r0, #2
 8002a4c:	f7fe f974 	bl	8000d38 <change_digit_1>
		change_digit_1(3,set_minute_2);
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <EXTI3_IRQHandler+0x10c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4619      	mov	r1, r3
 8002a56:	2003      	movs	r0, #3
 8002a58:	f7fe f96e 	bl	8000d38 <change_digit_1>
		change_digit_1(4,set_minute);
 8002a5c:	4b2a      	ldr	r3, [pc, #168]	; (8002b08 <EXTI3_IRQHandler+0x110>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	4619      	mov	r1, r3
 8002a62:	2004      	movs	r0, #4
 8002a64:	f7fe f968 	bl	8000d38 <change_digit_1>
		change_digit_2(1,hour_2);
 8002a68:	4b28      	ldr	r3, [pc, #160]	; (8002b0c <EXTI3_IRQHandler+0x114>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7fe fb7a 	bl	8001168 <change_digit_2>
		change_digit_2(2,hour);
 8002a74:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <EXTI3_IRQHandler+0x118>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	2002      	movs	r0, #2
 8002a7c:	f7fe fb74 	bl	8001168 <change_digit_2>
		change_digit_2(3,minute_2);
 8002a80:	4b24      	ldr	r3, [pc, #144]	; (8002b14 <EXTI3_IRQHandler+0x11c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4619      	mov	r1, r3
 8002a86:	2003      	movs	r0, #3
 8002a88:	f7fe fb6e 	bl	8001168 <change_digit_2>
		change_digit_2(4,minute);
 8002a8c:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <EXTI3_IRQHandler+0x120>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	2004      	movs	r0, #4
 8002a94:	f7fe fb68 	bl	8001168 <change_digit_2>
 8002a98:	e015      	b.n	8002ac6 <EXTI3_IRQHandler+0xce>
	}
	else
	{
		if((flags & 0x1) == 0 && (flags & 0x2) == 0)
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10f      	bne.n	8002ac6 <EXTI3_IRQHandler+0xce>
 8002aa6:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <EXTI3_IRQHandler+0xce>
		{
			TIM3->CCR1 = 0;
 8002ab2:	4b11      	ldr	r3, [pc, #68]	; (8002af8 <EXTI3_IRQHandler+0x100>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	635a      	str	r2, [r3, #52]	; 0x34
			flags &= ~0x4;
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	f023 0304 	bic.w	r3, r3, #4
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <EXTI3_IRQHandler+0xf8>)
 8002ac4:	701a      	strb	r2, [r3, #0]
		}
	}
	for(int i = 0; i <= 1000000; ++i);
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
 8002aca:	e002      	b.n	8002ad2 <EXTI3_IRQHandler+0xda>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	607b      	str	r3, [r7, #4]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <EXTI3_IRQHandler+0x124>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	ddf8      	ble.n	8002acc <EXTI3_IRQHandler+0xd4>
	EXTI->PR |= EXTI_PR_PR3;
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <EXTI3_IRQHandler+0x128>)
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <EXTI3_IRQHandler+0x128>)
 8002ae0:	f043 0308 	orr.w	r3, r3, #8
 8002ae4:	6153      	str	r3, [r2, #20]
}
 8002ae6:	bf00      	nop
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	2003fc1c 	.word	0x2003fc1c
 8002af4:	2003fc2c 	.word	0x2003fc2c
 8002af8:	40000400 	.word	0x40000400
 8002afc:	2003fc2b 	.word	0x2003fc2b
 8002b00:	2003fc2a 	.word	0x2003fc2a
 8002b04:	2003fc29 	.word	0x2003fc29
 8002b08:	2003fc28 	.word	0x2003fc28
 8002b0c:	2003fc27 	.word	0x2003fc27
 8002b10:	2003fc26 	.word	0x2003fc26
 8002b14:	2003fc25 	.word	0x2003fc25
 8002b18:	2003fc24 	.word	0x2003fc24
 8002b1c:	000f4240 	.word	0x000f4240
 8002b20:	40013c00 	.word	0x40013c00

08002b24 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler()
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
	flags &= ~0x4;
 8002b2a:	4b28      	ldr	r3, [pc, #160]	; (8002bcc <EXTI4_IRQHandler+0xa8>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f023 0304 	bic.w	r3, r3, #4
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <EXTI4_IRQHandler+0xa8>)
 8002b36:	701a      	strb	r2, [r3, #0]
	TIM3->CCR1 = 0;
 8002b38:	4b25      	ldr	r3, [pc, #148]	; (8002bd0 <EXTI4_IRQHandler+0xac>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	635a      	str	r2, [r3, #52]	; 0x34
	power = 0;
 8002b3e:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <EXTI4_IRQHandler+0xb0>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]
	minute = 0;
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <EXTI4_IRQHandler+0xb4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
	minute_2 = 0;
 8002b4a:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <EXTI4_IRQHandler+0xb8>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
	hour = 0;
 8002b50:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <EXTI4_IRQHandler+0xbc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
	hour_2 = 0;
 8002b56:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <EXTI4_IRQHandler+0xc0>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
	change_digit_1(1,0);
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2001      	movs	r0, #1
 8002b60:	f7fe f8ea 	bl	8000d38 <change_digit_1>
	change_digit_1(2,0);
 8002b64:	2100      	movs	r1, #0
 8002b66:	2002      	movs	r0, #2
 8002b68:	f7fe f8e6 	bl	8000d38 <change_digit_1>
	change_digit_1(3,0);
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2003      	movs	r0, #3
 8002b70:	f7fe f8e2 	bl	8000d38 <change_digit_1>
	change_digit_1(4,0);
 8002b74:	2100      	movs	r1, #0
 8002b76:	2004      	movs	r0, #4
 8002b78:	f7fe f8de 	bl	8000d38 <change_digit_1>
	change_digit_2(1,0);
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7fe faf2 	bl	8001168 <change_digit_2>
	change_digit_2(2,0);
 8002b84:	2100      	movs	r1, #0
 8002b86:	2002      	movs	r0, #2
 8002b88:	f7fe faee 	bl	8001168 <change_digit_2>
	change_digit_2(3,0);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	2003      	movs	r0, #3
 8002b90:	f7fe faea 	bl	8001168 <change_digit_2>
	change_digit_2(4,0);
 8002b94:	2100      	movs	r1, #0
 8002b96:	2004      	movs	r0, #4
 8002b98:	f7fe fae6 	bl	8001168 <change_digit_2>
	change_digit_3(0);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fe fcd1 	bl	8001544 <change_digit_3>

	for(int i = 0; i <= 1000000; ++i);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	e002      	b.n	8002bae <EXTI4_IRQHandler+0x8a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3301      	adds	r3, #1
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a0d      	ldr	r2, [pc, #52]	; (8002be8 <EXTI4_IRQHandler+0xc4>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	ddf8      	ble.n	8002ba8 <EXTI4_IRQHandler+0x84>
	EXTI->PR |= EXTI_PR_PR4;
 8002bb6:	4b0d      	ldr	r3, [pc, #52]	; (8002bec <EXTI4_IRQHandler+0xc8>)
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	4a0c      	ldr	r2, [pc, #48]	; (8002bec <EXTI4_IRQHandler+0xc8>)
 8002bbc:	f043 0310 	orr.w	r3, r3, #16
 8002bc0:	6153      	str	r3, [r2, #20]
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2003fc1c 	.word	0x2003fc1c
 8002bd0:	40000400 	.word	0x40000400
 8002bd4:	2003fc2c 	.word	0x2003fc2c
 8002bd8:	2003fc24 	.word	0x2003fc24
 8002bdc:	2003fc25 	.word	0x2003fc25
 8002be0:	2003fc26 	.word	0x2003fc26
 8002be4:	2003fc27 	.word	0x2003fc27
 8002be8:	000f4240 	.word	0x000f4240
 8002bec:	40013c00 	.word	0x40013c00

08002bf0 <main>:

int main(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
	initialization();
 8002bf6:	f7fd fb71 	bl	80002dc <initialization>

	// Initialization picture
	LTDC_Layer2->CFBAR = (uint32_t)init_picture;
 8002bfa:	4b2a      	ldr	r3, [pc, #168]	; (8002ca4 <main+0xb4>)
 8002bfc:	4a2a      	ldr	r2, [pc, #168]	; (8002ca8 <main+0xb8>)
 8002bfe:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <main+0xbc>)
 8002c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <main+0xbc>)
 8002c06:	f043 0302 	orr.w	r3, r3, #2
 8002c0a:	6253      	str	r3, [r2, #36]	; 0x24
	for(int i = 0; i <= 5000000; ++i);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	e002      	b.n	8002c18 <main+0x28>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	3301      	adds	r3, #1
 8002c16:	607b      	str	r3, [r7, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a25      	ldr	r2, [pc, #148]	; (8002cb0 <main+0xc0>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	ddf8      	ble.n	8002c12 <main+0x22>

	// Main picture
	LTDC_Layer2->CFBAR = (uint32_t)main_picture;
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <main+0xb4>)
 8002c22:	4a24      	ldr	r2, [pc, #144]	; (8002cb4 <main+0xc4>)
 8002c24:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8002c26:	4b21      	ldr	r3, [pc, #132]	; (8002cac <main+0xbc>)
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	4a20      	ldr	r2, [pc, #128]	; (8002cac <main+0xbc>)
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	6253      	str	r3, [r2, #36]	; 0x24

	// Time
	change_digit_1(1,hour_2);
 8002c32:	4b21      	ldr	r3, [pc, #132]	; (8002cb8 <main+0xc8>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	4619      	mov	r1, r3
 8002c38:	2001      	movs	r0, #1
 8002c3a:	f7fe f87d 	bl	8000d38 <change_digit_1>
	change_digit_1(2,hour);
 8002c3e:	4b1f      	ldr	r3, [pc, #124]	; (8002cbc <main+0xcc>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	2002      	movs	r0, #2
 8002c46:	f7fe f877 	bl	8000d38 <change_digit_1>
	change_digit_1(3,minute_2);
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <main+0xd0>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	4619      	mov	r1, r3
 8002c50:	2003      	movs	r0, #3
 8002c52:	f7fe f871 	bl	8000d38 <change_digit_1>
	change_digit_1(4,minute);
 8002c56:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <main+0xd4>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	2004      	movs	r0, #4
 8002c5e:	f7fe f86b 	bl	8000d38 <change_digit_1>

	// Time 2
	change_digit_2(1,hour_2);
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <main+0xc8>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	2001      	movs	r0, #1
 8002c6a:	f7fe fa7d 	bl	8001168 <change_digit_2>
	change_digit_2(2,hour);
 8002c6e:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <main+0xcc>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	2002      	movs	r0, #2
 8002c76:	f7fe fa77 	bl	8001168 <change_digit_2>
	change_digit_2(3,minute_2);
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <main+0xd0>)
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	2003      	movs	r0, #3
 8002c82:	f7fe fa71 	bl	8001168 <change_digit_2>
	change_digit_2(4,minute);
 8002c86:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <main+0xd4>)
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	2004      	movs	r0, #4
 8002c8e:	f7fe fa6b 	bl	8001168 <change_digit_2>

	// Power
	change_digit_3(power);
 8002c92:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <main+0xd8>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe fc54 	bl	8001544 <change_digit_3>

	// Timer
	SysTick_Config(180);
 8002c9c:	20b4      	movs	r0, #180	; 0xb4
 8002c9e:	f7fd fafb 	bl	8000298 <SysTick_Config>

	while(1);
 8002ca2:	e7fe      	b.n	8002ca2 <main+0xb2>
 8002ca4:	40016904 	.word	0x40016904
 8002ca8:	0806a94c 	.word	0x0806a94c
 8002cac:	40016800 	.word	0x40016800
 8002cb0:	004c4b40 	.word	0x004c4b40
 8002cb4:	080aa54c 	.word	0x080aa54c
 8002cb8:	2003fc27 	.word	0x2003fc27
 8002cbc:	2003fc26 	.word	0x2003fc26
 8002cc0:	2003fc25 	.word	0x2003fc25
 8002cc4:	2003fc24 	.word	0x2003fc24
 8002cc8:	2003fc2c 	.word	0x2003fc2c

08002ccc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cd0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cd6:	490d      	ldr	r1, [pc, #52]	; (8002d0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cd8:	4a0d      	ldr	r2, [pc, #52]	; (8002d10 <LoopForever+0xe>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cdc:	e002      	b.n	8002ce4 <LoopCopyDataInit>

08002cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce2:	3304      	adds	r3, #4

08002ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce8:	d3f9      	bcc.n	8002cde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cec:	4c0a      	ldr	r4, [pc, #40]	; (8002d18 <LoopForever+0x16>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf0:	e001      	b.n	8002cf6 <LoopFillZerobss>

08002cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf4:	3204      	adds	r2, #4

08002cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf8:	d3fb      	bcc.n	8002cf2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002cfa:	f000 f811 	bl	8002d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cfe:	f7ff ff77 	bl	8002bf0 <main>

08002d02 <LoopForever>:

LoopForever:
    b LoopForever
 8002d02:	e7fe      	b.n	8002d02 <LoopForever>
  ldr   r0, =_estack
 8002d04:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002d08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d0c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8002d10:	080ea154 	.word	0x080ea154
  ldr r2, =_sbss
 8002d14:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8002d18:	2003fc30 	.word	0x2003fc30

08002d1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d1c:	e7fe      	b.n	8002d1c <ADC_IRQHandler>
	...

08002d20 <__libc_init_array>:
 8002d20:	b570      	push	{r4, r5, r6, lr}
 8002d22:	4d0d      	ldr	r5, [pc, #52]	; (8002d58 <__libc_init_array+0x38>)
 8002d24:	4c0d      	ldr	r4, [pc, #52]	; (8002d5c <__libc_init_array+0x3c>)
 8002d26:	1b64      	subs	r4, r4, r5
 8002d28:	10a4      	asrs	r4, r4, #2
 8002d2a:	2600      	movs	r6, #0
 8002d2c:	42a6      	cmp	r6, r4
 8002d2e:	d109      	bne.n	8002d44 <__libc_init_array+0x24>
 8002d30:	4d0b      	ldr	r5, [pc, #44]	; (8002d60 <__libc_init_array+0x40>)
 8002d32:	4c0c      	ldr	r4, [pc, #48]	; (8002d64 <__libc_init_array+0x44>)
 8002d34:	f000 f818 	bl	8002d68 <_init>
 8002d38:	1b64      	subs	r4, r4, r5
 8002d3a:	10a4      	asrs	r4, r4, #2
 8002d3c:	2600      	movs	r6, #0
 8002d3e:	42a6      	cmp	r6, r4
 8002d40:	d105      	bne.n	8002d4e <__libc_init_array+0x2e>
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d48:	4798      	blx	r3
 8002d4a:	3601      	adds	r6, #1
 8002d4c:	e7ee      	b.n	8002d2c <__libc_init_array+0xc>
 8002d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d52:	4798      	blx	r3
 8002d54:	3601      	adds	r6, #1
 8002d56:	e7f2      	b.n	8002d3e <__libc_init_array+0x1e>
 8002d58:	080ea14c 	.word	0x080ea14c
 8002d5c:	080ea14c 	.word	0x080ea14c
 8002d60:	080ea14c 	.word	0x080ea14c
 8002d64:	080ea150 	.word	0x080ea150

08002d68 <_init>:
 8002d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6a:	bf00      	nop
 8002d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d6e:	bc08      	pop	{r3}
 8002d70:	469e      	mov	lr, r3
 8002d72:	4770      	bx	lr

08002d74 <_fini>:
 8002d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d76:	bf00      	nop
 8002d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d7a:	bc08      	pop	{r3}
 8002d7c:	469e      	mov	lr, r3
 8002d7e:	4770      	bx	lr
