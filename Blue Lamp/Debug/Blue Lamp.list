
Blue Lamp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022f8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000e73cc  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080e988c  080e988c  00100004  2**0
                  CONTENTS
  4 .ARM          00000000  080e988c  080e988c  00100004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080e988c  080e988c  00100004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080e988c  080e988c  000f988c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080e9890  080e9890  000f9890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080e9894  00100000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0003fc24  20000004  080e9898  00100004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2003fc28  080e9898  0010fc28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00100004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f6c  00000000  00000000  00100034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000290  00000000  00000000  00101fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000088  00000000  00000000  00102230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  001022b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7a6  00000000  00000000  00102328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001df3  00000000  00000000  0011dace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b4bc  00000000  00000000  0011f8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001bad7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000188  00000000  00000000  001badd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000004 	.word	0x20000004
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080024a8 	.word	0x080024a8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000008 	.word	0x20000008
 8000204:	080024a8 	.word	0x080024a8

08000208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	6039      	str	r1, [r7, #0]
 8000212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000218:	2b00      	cmp	r3, #0
 800021a:	db0a      	blt.n	8000232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800021c:	683b      	ldr	r3, [r7, #0]
 800021e:	b2da      	uxtb	r2, r3
 8000220:	490c      	ldr	r1, [pc, #48]	; (8000254 <__NVIC_SetPriority+0x4c>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	0112      	lsls	r2, r2, #4
 8000228:	b2d2      	uxtb	r2, r2
 800022a:	440b      	add	r3, r1
 800022c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000230:	e00a      	b.n	8000248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	b2da      	uxtb	r2, r3
 8000236:	4908      	ldr	r1, [pc, #32]	; (8000258 <__NVIC_SetPriority+0x50>)
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	f003 030f 	and.w	r3, r3, #15
 800023e:	3b04      	subs	r3, #4
 8000240:	0112      	lsls	r2, r2, #4
 8000242:	b2d2      	uxtb	r2, r2
 8000244:	440b      	add	r3, r1
 8000246:	761a      	strb	r2, [r3, #24]
}
 8000248:	bf00      	nop
 800024a:	370c      	adds	r7, #12
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	e000e100 	.word	0xe000e100
 8000258:	e000ed00 	.word	0xe000ed00

0800025c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	3b01      	subs	r3, #1
 8000268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800026c:	d301      	bcc.n	8000272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800026e:	2301      	movs	r3, #1
 8000270:	e00f      	b.n	8000292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000272:	4a0a      	ldr	r2, [pc, #40]	; (800029c <SysTick_Config+0x40>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	3b01      	subs	r3, #1
 8000278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800027a:	210f      	movs	r1, #15
 800027c:	f04f 30ff 	mov.w	r0, #4294967295
 8000280:	f7ff ffc2 	bl	8000208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000284:	4b05      	ldr	r3, [pc, #20]	; (800029c <SysTick_Config+0x40>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028a:	4b04      	ldr	r3, [pc, #16]	; (800029c <SysTick_Config+0x40>)
 800028c:	2207      	movs	r2, #7
 800028e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000290:	2300      	movs	r3, #0
}
 8000292:	4618      	mov	r0, r3
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010

080002a0 <EXTI0_IRQHandler>:
// PI0 - D5
// PI1 - D13
// PI2 - D8
// PI3 - D7
// PB4 - D3
void EXTI0_IRQHandler(){}
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
	...

080002b0 <initialization>:

void initialization()
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002b6:	4b9e      	ldr	r3, [pc, #632]	; (8000530 <initialization+0x280>)
 80002b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ba:	4a9d      	ldr	r2, [pc, #628]	; (8000530 <initialization+0x280>)
 80002bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002c0:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;
 80002c2:	4b9b      	ldr	r3, [pc, #620]	; (8000530 <initialization+0x280>)
 80002c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002c6:	4a9a      	ldr	r2, [pc, #616]	; (8000530 <initialization+0x280>)
 80002c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002cc:	6453      	str	r3, [r2, #68]	; 0x44
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 80002ce:	4b98      	ldr	r3, [pc, #608]	; (8000530 <initialization+0x280>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d2:	4a97      	ldr	r2, [pc, #604]	; (8000530 <initialization+0x280>)
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOEEN;
 80002da:	4b95      	ldr	r3, [pc, #596]	; (8000530 <initialization+0x280>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a94      	ldr	r2, [pc, #592]	; (8000530 <initialization+0x280>)
 80002e0:	f043 0310 	orr.w	r3, r3, #16
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOJEN;
 80002e6:	4b92      	ldr	r3, [pc, #584]	; (8000530 <initialization+0x280>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ea:	4a91      	ldr	r2, [pc, #580]	; (8000530 <initialization+0x280>)
 80002ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002f0:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOKEN;
 80002f2:	4b8f      	ldr	r3, [pc, #572]	; (8000530 <initialization+0x280>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f6:	4a8e      	ldr	r2, [pc, #568]	; (8000530 <initialization+0x280>)
 80002f8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002fc:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN;
 80002fe:	4b8c      	ldr	r3, [pc, #560]	; (8000530 <initialization+0x280>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a8b      	ldr	r2, [pc, #556]	; (8000530 <initialization+0x280>)
 8000304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800030a:	4b89      	ldr	r3, [pc, #548]	; (8000530 <initialization+0x280>)
 800030c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800030e:	4a88      	ldr	r2, [pc, #544]	; (8000530 <initialization+0x280>)
 8000310:	f043 0302 	orr.w	r3, r3, #2
 8000314:	6413      	str	r3, [r2, #64]	; 0x40

	RCC->CR |= RCC_CR_HSEON;
 8000316:	4b86      	ldr	r3, [pc, #536]	; (8000530 <initialization+0x280>)
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4a85      	ldr	r2, [pc, #532]	; (8000530 <initialization+0x280>)
 800031c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000320:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY));
 8000322:	bf00      	nop
 8000324:	4b82      	ldr	r3, [pc, #520]	; (8000530 <initialization+0x280>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032c:	2b00      	cmp	r3, #0
 800032e:	d0f9      	beq.n	8000324 <initialization+0x74>
	FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 8000330:	4b80      	ldr	r3, [pc, #512]	; (8000534 <initialization+0x284>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a7f      	ldr	r2, [pc, #508]	; (8000534 <initialization+0x284>)
 8000336:	f043 0305 	orr.w	r3, r3, #5
 800033a:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLM_0 | RCC_PLLCFGR_PLLM_3 | RCC_PLLCFGR_PLLM_4;
 800033c:	4b7c      	ldr	r3, [pc, #496]	; (8000530 <initialization+0x280>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	4a7b      	ldr	r2, [pc, #492]	; (8000530 <initialization+0x280>)
 8000342:	f043 0319 	orr.w	r3, r3, #25
 8000346:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLN_4 | RCC_PLLCFGR_PLLN_5 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLN_8;
 8000348:	4b79      	ldr	r3, [pc, #484]	; (8000530 <initialization+0x280>)
 800034a:	685b      	ldr	r3, [r3, #4]
 800034c:	4a78      	ldr	r2, [pc, #480]	; (8000530 <initialization+0x280>)
 800034e:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8000352:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLN_6;
 8000354:	4b76      	ldr	r3, [pc, #472]	; (8000530 <initialization+0x280>)
 8000356:	685b      	ldr	r3, [r3, #4]
 8000358:	4a75      	ldr	r2, [pc, #468]	; (8000530 <initialization+0x280>)
 800035a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800035e:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLP_0;
 8000360:	4b73      	ldr	r3, [pc, #460]	; (8000530 <initialization+0x280>)
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	4a72      	ldr	r2, [pc, #456]	; (8000530 <initialization+0x280>)
 8000366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800036a:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE2_2;
 800036c:	4b70      	ldr	r3, [pc, #448]	; (8000530 <initialization+0x280>)
 800036e:	689b      	ldr	r3, [r3, #8]
 8000370:	4a6f      	ldr	r2, [pc, #444]	; (8000530 <initialization+0x280>)
 8000372:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
 8000376:	6093      	str	r3, [r2, #8]
	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC;
 8000378:	4b6d      	ldr	r3, [pc, #436]	; (8000530 <initialization+0x280>)
 800037a:	685b      	ldr	r3, [r3, #4]
 800037c:	4a6c      	ldr	r2, [pc, #432]	; (8000530 <initialization+0x280>)
 800037e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000382:	6053      	str	r3, [r2, #4]
	RCC->CR |= RCC_CR_PLLON;
 8000384:	4b6a      	ldr	r3, [pc, #424]	; (8000530 <initialization+0x280>)
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a69      	ldr	r2, [pc, #420]	; (8000530 <initialization+0x280>)
 800038a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800038e:	6013      	str	r3, [r2, #0]
	while((RCC->CR & RCC_CR_PLLRDY) == 0);
 8000390:	bf00      	nop
 8000392:	4b67      	ldr	r3, [pc, #412]	; (8000530 <initialization+0x280>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f9      	beq.n	8000392 <initialization+0xe2>
	RCC->CFGR |= RCC_CFGR_SW_PLL;
 800039e:	4b64      	ldr	r3, [pc, #400]	; (8000530 <initialization+0x280>)
 80003a0:	689b      	ldr	r3, [r3, #8]
 80003a2:	4a63      	ldr	r2, [pc, #396]	; (8000530 <initialization+0x280>)
 80003a4:	f043 0302 	orr.w	r3, r3, #2
 80003a8:	6093      	str	r3, [r2, #8]
	while((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 80003aa:	bf00      	nop
 80003ac:	4b60      	ldr	r3, [pc, #384]	; (8000530 <initialization+0x280>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	f003 030c 	and.w	r3, r3, #12
 80003b4:	2b08      	cmp	r3, #8
 80003b6:	d1f9      	bne.n	80003ac <initialization+0xfc>
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7;
 80003b8:	4b5d      	ldr	r3, [pc, #372]	; (8000530 <initialization+0x280>)
 80003ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003be:	4a5c      	ldr	r2, [pc, #368]	; (8000530 <initialization+0x280>)
 80003c0:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 80003c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->PLLSAICFGR |= RCC_PLLSAICFGR_PLLSAIR_0 | RCC_PLLSAICFGR_PLLSAIR_2;
 80003c8:	4b59      	ldr	r3, [pc, #356]	; (8000530 <initialization+0x280>)
 80003ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003ce:	4a58      	ldr	r2, [pc, #352]	; (8000530 <initialization+0x280>)
 80003d0:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80003d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	RCC->DCKCFGR1 	|= RCC_DCKCFGR1_PLLSAIDIVR_0;
 80003d8:	4b55      	ldr	r3, [pc, #340]	; (8000530 <initialization+0x280>)
 80003da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003de:	4a54      	ldr	r2, [pc, #336]	; (8000530 <initialization+0x280>)
 80003e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->DCKCFGR1 	&= ~RCC_DCKCFGR1_PLLSAIDIVR_1;
 80003e8:	4b51      	ldr	r3, [pc, #324]	; (8000530 <initialization+0x280>)
 80003ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80003ee:	4a50      	ldr	r2, [pc, #320]	; (8000530 <initialization+0x280>)
 80003f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80003f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	RCC->CR |= RCC_CR_PLLSAION;
 80003f8:	4b4d      	ldr	r3, [pc, #308]	; (8000530 <initialization+0x280>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a4c      	ldr	r2, [pc, #304]	; (8000530 <initialization+0x280>)
 80003fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000402:	6013      	str	r3, [r2, #0]
	while ((RCC->CR & RCC_CR_PLLSAIRDY) == 0);
 8000404:	bf00      	nop
 8000406:	4b4a      	ldr	r3, [pc, #296]	; (8000530 <initialization+0x280>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800040e:	2b00      	cmp	r3, #0
 8000410:	d0f9      	beq.n	8000406 <initialization+0x156>

	GPIOC->MODER |= GPIO_MODER_MODER6_1;
 8000412:	4b49      	ldr	r3, [pc, #292]	; (8000538 <initialization+0x288>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a48      	ldr	r2, [pc, #288]	; (8000538 <initialization+0x288>)
 8000418:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800041c:	6013      	str	r3, [r2, #0]
	GPIOC->AFR[0] |= GPIO_AFRL_AFRL6_1;
 800041e:	4b46      	ldr	r3, [pc, #280]	; (8000538 <initialization+0x288>)
 8000420:	6a1b      	ldr	r3, [r3, #32]
 8000422:	4a45      	ldr	r2, [pc, #276]	; (8000538 <initialization+0x288>)
 8000424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000428:	6213      	str	r3, [r2, #32]
	TIM3->PSC = 1080;
 800042a:	4b44      	ldr	r3, [pc, #272]	; (800053c <initialization+0x28c>)
 800042c:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8000430:	629a      	str	r2, [r3, #40]	; 0x28
	TIM3->ARR = 100;
 8000432:	4b42      	ldr	r3, [pc, #264]	; (800053c <initialization+0x28c>)
 8000434:	2264      	movs	r2, #100	; 0x64
 8000436:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM3->CCR1 = 50;
 8000438:	4b40      	ldr	r3, [pc, #256]	; (800053c <initialization+0x28c>)
 800043a:	2232      	movs	r2, #50	; 0x32
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_1 | TIM_CCMR1_OC1M_2;
 800043e:	4b3f      	ldr	r3, [pc, #252]	; (800053c <initialization+0x28c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a3e      	ldr	r2, [pc, #248]	; (800053c <initialization+0x28c>)
 8000444:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000448:	6193      	str	r3, [r2, #24]
	TIM3->CCER |= TIM_CCER_CC1E;
 800044a:	4b3c      	ldr	r3, [pc, #240]	; (800053c <initialization+0x28c>)
 800044c:	6a1b      	ldr	r3, [r3, #32]
 800044e:	4a3b      	ldr	r2, [pc, #236]	; (800053c <initialization+0x28c>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6213      	str	r3, [r2, #32]
	TIM3->CR1 |= TIM_CR1_CEN;
 8000456:	4b39      	ldr	r3, [pc, #228]	; (800053c <initialization+0x28c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a38      	ldr	r2, [pc, #224]	; (800053c <initialization+0x28c>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6013      	str	r3, [r2, #0]

	//B0 PE4
	GPIOE->MODER   &= ~GPIO_MODER_MODER4;
 8000462:	4b37      	ldr	r3, [pc, #220]	; (8000540 <initialization+0x290>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a36      	ldr	r2, [pc, #216]	; (8000540 <initialization+0x290>)
 8000468:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800046c:	6013      	str	r3, [r2, #0]
	GPIOE->MODER   |= GPIO_MODER_MODER4_1;
 800046e:	4b34      	ldr	r3, [pc, #208]	; (8000540 <initialization+0x290>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a33      	ldr	r2, [pc, #204]	; (8000540 <initialization+0x290>)
 8000474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000478:	6013      	str	r3, [r2, #0]
	GPIOE->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 800047a:	4b31      	ldr	r3, [pc, #196]	; (8000540 <initialization+0x290>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	4a30      	ldr	r2, [pc, #192]	; (8000540 <initialization+0x290>)
 8000480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000484:	6093      	str	r3, [r2, #8]
	GPIOE->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 8000486:	4b2e      	ldr	r3, [pc, #184]	; (8000540 <initialization+0x290>)
 8000488:	6a1b      	ldr	r3, [r3, #32]
 800048a:	4a2d      	ldr	r2, [pc, #180]	; (8000540 <initialization+0x290>)
 800048c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000490:	6213      	str	r3, [r2, #32]
	GPIOE->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 8000492:	4b2b      	ldr	r3, [pc, #172]	; (8000540 <initialization+0x290>)
 8000494:	6a1b      	ldr	r3, [r3, #32]
 8000496:	4a2a      	ldr	r2, [pc, #168]	; (8000540 <initialization+0x290>)
 8000498:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 800049c:	6213      	str	r3, [r2, #32]

	//B1 PJ13
	GPIOJ->MODER   &= ~GPIO_MODER_MODER13;
 800049e:	4b29      	ldr	r3, [pc, #164]	; (8000544 <initialization+0x294>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a28      	ldr	r2, [pc, #160]	; (8000544 <initialization+0x294>)
 80004a4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80004a8:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER13_1;
 80004aa:	4b26      	ldr	r3, [pc, #152]	; (8000544 <initialization+0x294>)
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	4a25      	ldr	r2, [pc, #148]	; (8000544 <initialization+0x294>)
 80004b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004b4:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_1;
 80004b6:	4b23      	ldr	r3, [pc, #140]	; (8000544 <initialization+0x294>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	4a22      	ldr	r2, [pc, #136]	; (8000544 <initialization+0x294>)
 80004bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004c0:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL5_0;
 80004c2:	4b20      	ldr	r3, [pc, #128]	; (8000544 <initialization+0x294>)
 80004c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c6:	4a1f      	ldr	r2, [pc, #124]	; (8000544 <initialization+0x294>)
 80004c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80004cc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 80004ce:	4b1d      	ldr	r3, [pc, #116]	; (8000544 <initialization+0x294>)
 80004d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004d2:	4a1c      	ldr	r2, [pc, #112]	; (8000544 <initialization+0x294>)
 80004d4:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 80004d8:	6253      	str	r3, [r2, #36]	; 0x24

	//B2 PJ14
	GPIOJ->MODER   &= ~GPIO_MODER_MODER14;
 80004da:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <initialization+0x294>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a19      	ldr	r2, [pc, #100]	; (8000544 <initialization+0x294>)
 80004e0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80004e4:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER14_1;
 80004e6:	4b17      	ldr	r3, [pc, #92]	; (8000544 <initialization+0x294>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a16      	ldr	r2, [pc, #88]	; (8000544 <initialization+0x294>)
 80004ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004f0:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 80004f2:	4b14      	ldr	r3, [pc, #80]	; (8000544 <initialization+0x294>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	4a13      	ldr	r2, [pc, #76]	; (8000544 <initialization+0x294>)
 80004f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80004fc:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 80004fe:	4b11      	ldr	r3, [pc, #68]	; (8000544 <initialization+0x294>)
 8000500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000502:	4a10      	ldr	r2, [pc, #64]	; (8000544 <initialization+0x294>)
 8000504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000508:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 800050a:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <initialization+0x294>)
 800050c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800050e:	4a0d      	ldr	r2, [pc, #52]	; (8000544 <initialization+0x294>)
 8000510:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000514:	6253      	str	r3, [r2, #36]	; 0x24

	//B3 PJ15
	GPIOJ->MODER   &= ~GPIO_MODER_MODER15;
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <initialization+0x294>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <initialization+0x294>)
 800051c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000520:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER15_1;
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <initialization+0x294>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <initialization+0x294>)
 8000528:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800052c:	6013      	str	r3, [r2, #0]
 800052e:	e00b      	b.n	8000548 <initialization+0x298>
 8000530:	40023800 	.word	0x40023800
 8000534:	40023c00 	.word	0x40023c00
 8000538:	40020800 	.word	0x40020800
 800053c:	40000400 	.word	0x40000400
 8000540:	40021000 	.word	0x40021000
 8000544:	40022400 	.word	0x40022400
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 8000548:	4b98      	ldr	r3, [pc, #608]	; (80007ac <initialization+0x4fc>)
 800054a:	689b      	ldr	r3, [r3, #8]
 800054c:	4a97      	ldr	r2, [pc, #604]	; (80007ac <initialization+0x4fc>)
 800054e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000552:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 8000554:	4b95      	ldr	r3, [pc, #596]	; (80007ac <initialization+0x4fc>)
 8000556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000558:	4a94      	ldr	r2, [pc, #592]	; (80007ac <initialization+0x4fc>)
 800055a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800055e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000560:	4b92      	ldr	r3, [pc, #584]	; (80007ac <initialization+0x4fc>)
 8000562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000564:	4a91      	ldr	r2, [pc, #580]	; (80007ac <initialization+0x4fc>)
 8000566:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 800056a:	6253      	str	r3, [r2, #36]	; 0x24

	//B4 PJ12
	GPIOJ->MODER   &= ~GPIO_MODER_MODER12;
 800056c:	4b8f      	ldr	r3, [pc, #572]	; (80007ac <initialization+0x4fc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a8e      	ldr	r2, [pc, #568]	; (80007ac <initialization+0x4fc>)
 8000572:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000576:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER12_1;
 8000578:	4b8c      	ldr	r3, [pc, #560]	; (80007ac <initialization+0x4fc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a8b      	ldr	r2, [pc, #556]	; (80007ac <initialization+0x4fc>)
 800057e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000582:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR12_1;
 8000584:	4b89      	ldr	r3, [pc, #548]	; (80007ac <initialization+0x4fc>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	4a88      	ldr	r2, [pc, #544]	; (80007ac <initialization+0x4fc>)
 800058a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800058e:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL4_0;
 8000590:	4b86      	ldr	r3, [pc, #536]	; (80007ac <initialization+0x4fc>)
 8000592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000594:	4a85      	ldr	r2, [pc, #532]	; (80007ac <initialization+0x4fc>)
 8000596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800059a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 800059c:	4b83      	ldr	r3, [pc, #524]	; (80007ac <initialization+0x4fc>)
 800059e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005a0:	4a82      	ldr	r2, [pc, #520]	; (80007ac <initialization+0x4fc>)
 80005a2:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80005a6:	6253      	str	r3, [r2, #36]	; 0x24

	//B5 PK4
	GPIOK->MODER   &= ~GPIO_MODER_MODER4;
 80005a8:	4b81      	ldr	r3, [pc, #516]	; (80007b0 <initialization+0x500>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a80      	ldr	r2, [pc, #512]	; (80007b0 <initialization+0x500>)
 80005ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005b2:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER4_1;
 80005b4:	4b7e      	ldr	r3, [pc, #504]	; (80007b0 <initialization+0x500>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a7d      	ldr	r2, [pc, #500]	; (80007b0 <initialization+0x500>)
 80005ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005be:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 80005c0:	4b7b      	ldr	r3, [pc, #492]	; (80007b0 <initialization+0x500>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	4a7a      	ldr	r2, [pc, #488]	; (80007b0 <initialization+0x500>)
 80005c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ca:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 80005cc:	4b78      	ldr	r3, [pc, #480]	; (80007b0 <initialization+0x500>)
 80005ce:	6a1b      	ldr	r3, [r3, #32]
 80005d0:	4a77      	ldr	r2, [pc, #476]	; (80007b0 <initialization+0x500>)
 80005d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d6:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 80005d8:	4b75      	ldr	r3, [pc, #468]	; (80007b0 <initialization+0x500>)
 80005da:	6a1b      	ldr	r3, [r3, #32]
 80005dc:	4a74      	ldr	r2, [pc, #464]	; (80007b0 <initialization+0x500>)
 80005de:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80005e2:	6213      	str	r3, [r2, #32]

	//B6 PK5
	GPIOK->MODER   &= ~GPIO_MODER_MODER5;
 80005e4:	4b72      	ldr	r3, [pc, #456]	; (80007b0 <initialization+0x500>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	4a71      	ldr	r2, [pc, #452]	; (80007b0 <initialization+0x500>)
 80005ea:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80005ee:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER5_1;
 80005f0:	4b6f      	ldr	r3, [pc, #444]	; (80007b0 <initialization+0x500>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a6e      	ldr	r2, [pc, #440]	; (80007b0 <initialization+0x500>)
 80005f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005fa:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 80005fc:	4b6c      	ldr	r3, [pc, #432]	; (80007b0 <initialization+0x500>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	4a6b      	ldr	r2, [pc, #428]	; (80007b0 <initialization+0x500>)
 8000602:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000606:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 8000608:	4b69      	ldr	r3, [pc, #420]	; (80007b0 <initialization+0x500>)
 800060a:	6a1b      	ldr	r3, [r3, #32]
 800060c:	4a68      	ldr	r2, [pc, #416]	; (80007b0 <initialization+0x500>)
 800060e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000612:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000614:	4b66      	ldr	r3, [pc, #408]	; (80007b0 <initialization+0x500>)
 8000616:	6a1b      	ldr	r3, [r3, #32]
 8000618:	4a65      	ldr	r2, [pc, #404]	; (80007b0 <initialization+0x500>)
 800061a:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800061e:	6213      	str	r3, [r2, #32]

	//B7 PK6
	GPIOK->MODER   &= ~GPIO_MODER_MODER6;
 8000620:	4b63      	ldr	r3, [pc, #396]	; (80007b0 <initialization+0x500>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a62      	ldr	r2, [pc, #392]	; (80007b0 <initialization+0x500>)
 8000626:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800062a:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER6_1;
 800062c:	4b60      	ldr	r3, [pc, #384]	; (80007b0 <initialization+0x500>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a5f      	ldr	r2, [pc, #380]	; (80007b0 <initialization+0x500>)
 8000632:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000636:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 8000638:	4b5d      	ldr	r3, [pc, #372]	; (80007b0 <initialization+0x500>)
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	4a5c      	ldr	r2, [pc, #368]	; (80007b0 <initialization+0x500>)
 800063e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000642:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 8000644:	4b5a      	ldr	r3, [pc, #360]	; (80007b0 <initialization+0x500>)
 8000646:	6a1b      	ldr	r3, [r3, #32]
 8000648:	4a59      	ldr	r2, [pc, #356]	; (80007b0 <initialization+0x500>)
 800064a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800064e:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000650:	4b57      	ldr	r3, [pc, #348]	; (80007b0 <initialization+0x500>)
 8000652:	6a1b      	ldr	r3, [r3, #32]
 8000654:	4a56      	ldr	r2, [pc, #344]	; (80007b0 <initialization+0x500>)
 8000656:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 800065a:	6213      	str	r3, [r2, #32]

	//R0 PI 15
	GPIOI->MODER   &= ~GPIO_MODER_MODER15;
 800065c:	4b55      	ldr	r3, [pc, #340]	; (80007b4 <initialization+0x504>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a54      	ldr	r2, [pc, #336]	; (80007b4 <initialization+0x504>)
 8000662:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8000666:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER15_1;
 8000668:	4b52      	ldr	r3, [pc, #328]	; (80007b4 <initialization+0x504>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a51      	ldr	r2, [pc, #324]	; (80007b4 <initialization+0x504>)
 800066e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000672:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR15_1;
 8000674:	4b4f      	ldr	r3, [pc, #316]	; (80007b4 <initialization+0x504>)
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	4a4e      	ldr	r2, [pc, #312]	; (80007b4 <initialization+0x504>)
 800067a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800067e:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL7_0;
 8000680:	4b4c      	ldr	r3, [pc, #304]	; (80007b4 <initialization+0x504>)
 8000682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000684:	4a4b      	ldr	r2, [pc, #300]	; (80007b4 <initialization+0x504>)
 8000686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800068a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800068c:	4b49      	ldr	r3, [pc, #292]	; (80007b4 <initialization+0x504>)
 800068e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000690:	4a48      	ldr	r2, [pc, #288]	; (80007b4 <initialization+0x504>)
 8000692:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000696:	6253      	str	r3, [r2, #36]	; 0x24

	//R1 PJ0
	GPIOJ->MODER   &= ~GPIO_MODER_MODER0;
 8000698:	4b44      	ldr	r3, [pc, #272]	; (80007ac <initialization+0x4fc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a43      	ldr	r2, [pc, #268]	; (80007ac <initialization+0x4fc>)
 800069e:	f023 0303 	bic.w	r3, r3, #3
 80006a2:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER0_1;
 80006a4:	4b41      	ldr	r3, [pc, #260]	; (80007ac <initialization+0x4fc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a40      	ldr	r2, [pc, #256]	; (80007ac <initialization+0x4fc>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 80006b0:	4b3e      	ldr	r3, [pc, #248]	; (80007ac <initialization+0x4fc>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	4a3d      	ldr	r2, [pc, #244]	; (80007ac <initialization+0x4fc>)
 80006b6:	f043 0302 	orr.w	r3, r3, #2
 80006ba:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 80006bc:	4b3b      	ldr	r3, [pc, #236]	; (80007ac <initialization+0x4fc>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	4a3a      	ldr	r2, [pc, #232]	; (80007ac <initialization+0x4fc>)
 80006c2:	f023 0301 	bic.w	r3, r3, #1
 80006c6:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 80006c8:	4b38      	ldr	r3, [pc, #224]	; (80007ac <initialization+0x4fc>)
 80006ca:	6a1b      	ldr	r3, [r3, #32]
 80006cc:	4a37      	ldr	r2, [pc, #220]	; (80007ac <initialization+0x4fc>)
 80006ce:	f043 030e 	orr.w	r3, r3, #14
 80006d2:	6213      	str	r3, [r2, #32]

	//R2 PJ1
	GPIOJ->MODER   &= ~GPIO_MODER_MODER1;
 80006d4:	4b35      	ldr	r3, [pc, #212]	; (80007ac <initialization+0x4fc>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a34      	ldr	r2, [pc, #208]	; (80007ac <initialization+0x4fc>)
 80006da:	f023 030c 	bic.w	r3, r3, #12
 80006de:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER1_1;
 80006e0:	4b32      	ldr	r3, [pc, #200]	; (80007ac <initialization+0x4fc>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a31      	ldr	r2, [pc, #196]	; (80007ac <initialization+0x4fc>)
 80006e6:	f043 0308 	orr.w	r3, r3, #8
 80006ea:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 80006ec:	4b2f      	ldr	r3, [pc, #188]	; (80007ac <initialization+0x4fc>)
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	4a2e      	ldr	r2, [pc, #184]	; (80007ac <initialization+0x4fc>)
 80006f2:	f043 0308 	orr.w	r3, r3, #8
 80006f6:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 80006f8:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <initialization+0x4fc>)
 80006fa:	6a1b      	ldr	r3, [r3, #32]
 80006fc:	4a2b      	ldr	r2, [pc, #172]	; (80007ac <initialization+0x4fc>)
 80006fe:	f023 0310 	bic.w	r3, r3, #16
 8000702:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000704:	4b29      	ldr	r3, [pc, #164]	; (80007ac <initialization+0x4fc>)
 8000706:	6a1b      	ldr	r3, [r3, #32]
 8000708:	4a28      	ldr	r2, [pc, #160]	; (80007ac <initialization+0x4fc>)
 800070a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800070e:	6213      	str	r3, [r2, #32]

	//R3 PJ2
	GPIOJ->MODER   &= ~GPIO_MODER_MODER2;
 8000710:	4b26      	ldr	r3, [pc, #152]	; (80007ac <initialization+0x4fc>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a25      	ldr	r2, [pc, #148]	; (80007ac <initialization+0x4fc>)
 8000716:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800071a:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER2_1;
 800071c:	4b23      	ldr	r3, [pc, #140]	; (80007ac <initialization+0x4fc>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a22      	ldr	r2, [pc, #136]	; (80007ac <initialization+0x4fc>)
 8000722:	f043 0320 	orr.w	r3, r3, #32
 8000726:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 8000728:	4b20      	ldr	r3, [pc, #128]	; (80007ac <initialization+0x4fc>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	4a1f      	ldr	r2, [pc, #124]	; (80007ac <initialization+0x4fc>)
 800072e:	f043 0320 	orr.w	r3, r3, #32
 8000732:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <initialization+0x4fc>)
 8000736:	6a1b      	ldr	r3, [r3, #32]
 8000738:	4a1c      	ldr	r2, [pc, #112]	; (80007ac <initialization+0x4fc>)
 800073a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800073e:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <initialization+0x4fc>)
 8000742:	6a1b      	ldr	r3, [r3, #32]
 8000744:	4a19      	ldr	r2, [pc, #100]	; (80007ac <initialization+0x4fc>)
 8000746:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 800074a:	6213      	str	r3, [r2, #32]

	//R4 PJ3

	GPIOJ->MODER   &= ~GPIO_MODER_MODER3;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <initialization+0x4fc>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a16      	ldr	r2, [pc, #88]	; (80007ac <initialization+0x4fc>)
 8000752:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000756:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER3_1;
 8000758:	4b14      	ldr	r3, [pc, #80]	; (80007ac <initialization+0x4fc>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a13      	ldr	r2, [pc, #76]	; (80007ac <initialization+0x4fc>)
 800075e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000762:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR3_1;
 8000764:	4b11      	ldr	r3, [pc, #68]	; (80007ac <initialization+0x4fc>)
 8000766:	689b      	ldr	r3, [r3, #8]
 8000768:	4a10      	ldr	r2, [pc, #64]	; (80007ac <initialization+0x4fc>)
 800076a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076e:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL3_0;
 8000770:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <initialization+0x4fc>)
 8000772:	6a1b      	ldr	r3, [r3, #32]
 8000774:	4a0d      	ldr	r2, [pc, #52]	; (80007ac <initialization+0x4fc>)
 8000776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800077a:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 800077c:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <initialization+0x4fc>)
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <initialization+0x4fc>)
 8000782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000786:	6213      	str	r3, [r2, #32]

	//R5 PJ4
	GPIOJ->MODER   &= ~GPIO_MODER_MODER4;
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <initialization+0x4fc>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <initialization+0x4fc>)
 800078e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000792:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER4_1;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <initialization+0x4fc>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <initialization+0x4fc>)
 800079a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800079e:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_1;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <initialization+0x4fc>)
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	4a01      	ldr	r2, [pc, #4]	; (80007ac <initialization+0x4fc>)
 80007a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007aa:	e005      	b.n	80007b8 <initialization+0x508>
 80007ac:	40022400 	.word	0x40022400
 80007b0:	40022800 	.word	0x40022800
 80007b4:	40022000 	.word	0x40022000
 80007b8:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL4_0;
 80007ba:	4b99      	ldr	r3, [pc, #612]	; (8000a20 <initialization+0x770>)
 80007bc:	6a1b      	ldr	r3, [r3, #32]
 80007be:	4a98      	ldr	r2, [pc, #608]	; (8000a20 <initialization+0x770>)
 80007c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007c4:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL4_1 | GPIO_AFRL_AFRL4_2 | GPIO_AFRL_AFRL4_3;
 80007c6:	4b96      	ldr	r3, [pc, #600]	; (8000a20 <initialization+0x770>)
 80007c8:	6a1b      	ldr	r3, [r3, #32]
 80007ca:	4a95      	ldr	r2, [pc, #596]	; (8000a20 <initialization+0x770>)
 80007cc:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 80007d0:	6213      	str	r3, [r2, #32]

	//R6 PJ5
	GPIOJ->MODER   &= ~GPIO_MODER_MODER5;
 80007d2:	4b93      	ldr	r3, [pc, #588]	; (8000a20 <initialization+0x770>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a92      	ldr	r2, [pc, #584]	; (8000a20 <initialization+0x770>)
 80007d8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80007dc:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER5_1;
 80007de:	4b90      	ldr	r3, [pc, #576]	; (8000a20 <initialization+0x770>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4a8f      	ldr	r2, [pc, #572]	; (8000a20 <initialization+0x770>)
 80007e4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e8:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_1;
 80007ea:	4b8d      	ldr	r3, [pc, #564]	; (8000a20 <initialization+0x770>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	4a8c      	ldr	r2, [pc, #560]	; (8000a20 <initialization+0x770>)
 80007f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f4:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL5_0;
 80007f6:	4b8a      	ldr	r3, [pc, #552]	; (8000a20 <initialization+0x770>)
 80007f8:	6a1b      	ldr	r3, [r3, #32]
 80007fa:	4a89      	ldr	r2, [pc, #548]	; (8000a20 <initialization+0x770>)
 80007fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000800:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL5_1 | GPIO_AFRL_AFRL5_2 | GPIO_AFRL_AFRL5_3;
 8000802:	4b87      	ldr	r3, [pc, #540]	; (8000a20 <initialization+0x770>)
 8000804:	6a1b      	ldr	r3, [r3, #32]
 8000806:	4a86      	ldr	r2, [pc, #536]	; (8000a20 <initialization+0x770>)
 8000808:	f443 0360 	orr.w	r3, r3, #14680064	; 0xe00000
 800080c:	6213      	str	r3, [r2, #32]

	//R7 PJ6
	GPIOJ->MODER   &= ~GPIO_MODER_MODER6;
 800080e:	4b84      	ldr	r3, [pc, #528]	; (8000a20 <initialization+0x770>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a83      	ldr	r2, [pc, #524]	; (8000a20 <initialization+0x770>)
 8000814:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000818:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER6_1;
 800081a:	4b81      	ldr	r3, [pc, #516]	; (8000a20 <initialization+0x770>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4a80      	ldr	r2, [pc, #512]	; (8000a20 <initialization+0x770>)
 8000820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000824:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR6_1;
 8000826:	4b7e      	ldr	r3, [pc, #504]	; (8000a20 <initialization+0x770>)
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	4a7d      	ldr	r2, [pc, #500]	; (8000a20 <initialization+0x770>)
 800082c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000830:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL6_0;
 8000832:	4b7b      	ldr	r3, [pc, #492]	; (8000a20 <initialization+0x770>)
 8000834:	6a1b      	ldr	r3, [r3, #32]
 8000836:	4a7a      	ldr	r2, [pc, #488]	; (8000a20 <initialization+0x770>)
 8000838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800083c:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 800083e:	4b78      	ldr	r3, [pc, #480]	; (8000a20 <initialization+0x770>)
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	4a77      	ldr	r2, [pc, #476]	; (8000a20 <initialization+0x770>)
 8000844:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000848:	6213      	str	r3, [r2, #32]

	//G0 PJ7
	GPIOJ->MODER   &= ~GPIO_MODER_MODER7;
 800084a:	4b75      	ldr	r3, [pc, #468]	; (8000a20 <initialization+0x770>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a74      	ldr	r2, [pc, #464]	; (8000a20 <initialization+0x770>)
 8000850:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000854:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER7_1;
 8000856:	4b72      	ldr	r3, [pc, #456]	; (8000a20 <initialization+0x770>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a71      	ldr	r2, [pc, #452]	; (8000a20 <initialization+0x770>)
 800085c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000860:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 8000862:	4b6f      	ldr	r3, [pc, #444]	; (8000a20 <initialization+0x770>)
 8000864:	689b      	ldr	r3, [r3, #8]
 8000866:	4a6e      	ldr	r2, [pc, #440]	; (8000a20 <initialization+0x770>)
 8000868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086c:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 800086e:	4b6c      	ldr	r3, [pc, #432]	; (8000a20 <initialization+0x770>)
 8000870:	6a1b      	ldr	r3, [r3, #32]
 8000872:	4a6b      	ldr	r2, [pc, #428]	; (8000a20 <initialization+0x770>)
 8000874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000878:	6213      	str	r3, [r2, #32]
	GPIOJ->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 800087a:	4b69      	ldr	r3, [pc, #420]	; (8000a20 <initialization+0x770>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	4a68      	ldr	r2, [pc, #416]	; (8000a20 <initialization+0x770>)
 8000880:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000884:	6213      	str	r3, [r2, #32]

	//G1 PJ8
	GPIOJ->MODER   &= ~GPIO_MODER_MODER8;
 8000886:	4b66      	ldr	r3, [pc, #408]	; (8000a20 <initialization+0x770>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a65      	ldr	r2, [pc, #404]	; (8000a20 <initialization+0x770>)
 800088c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000890:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER8_1;
 8000892:	4b63      	ldr	r3, [pc, #396]	; (8000a20 <initialization+0x770>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a62      	ldr	r2, [pc, #392]	; (8000a20 <initialization+0x770>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089c:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_1;
 800089e:	4b60      	ldr	r3, [pc, #384]	; (8000a20 <initialization+0x770>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	4a5f      	ldr	r2, [pc, #380]	; (8000a20 <initialization+0x770>)
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL0_0;
 80008aa:	4b5d      	ldr	r3, [pc, #372]	; (8000a20 <initialization+0x770>)
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	4a5c      	ldr	r2, [pc, #368]	; (8000a20 <initialization+0x770>)
 80008b0:	f023 0301 	bic.w	r3, r3, #1
 80008b4:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 80008b6:	4b5a      	ldr	r3, [pc, #360]	; (8000a20 <initialization+0x770>)
 80008b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ba:	4a59      	ldr	r2, [pc, #356]	; (8000a20 <initialization+0x770>)
 80008bc:	f043 030e 	orr.w	r3, r3, #14
 80008c0:	6253      	str	r3, [r2, #36]	; 0x24

	//G2 PJ9
	GPIOJ->MODER   &= ~GPIO_MODER_MODER9;
 80008c2:	4b57      	ldr	r3, [pc, #348]	; (8000a20 <initialization+0x770>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a56      	ldr	r2, [pc, #344]	; (8000a20 <initialization+0x770>)
 80008c8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80008cc:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER9_1;
 80008ce:	4b54      	ldr	r3, [pc, #336]	; (8000a20 <initialization+0x770>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a53      	ldr	r2, [pc, #332]	; (8000a20 <initialization+0x770>)
 80008d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008d8:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 80008da:	4b51      	ldr	r3, [pc, #324]	; (8000a20 <initialization+0x770>)
 80008dc:	689b      	ldr	r3, [r3, #8]
 80008de:	4a50      	ldr	r2, [pc, #320]	; (8000a20 <initialization+0x770>)
 80008e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80008e4:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 80008e6:	4b4e      	ldr	r3, [pc, #312]	; (8000a20 <initialization+0x770>)
 80008e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ea:	4a4d      	ldr	r2, [pc, #308]	; (8000a20 <initialization+0x770>)
 80008ec:	f023 0310 	bic.w	r3, r3, #16
 80008f0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 80008f2:	4b4b      	ldr	r3, [pc, #300]	; (8000a20 <initialization+0x770>)
 80008f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008f6:	4a4a      	ldr	r2, [pc, #296]	; (8000a20 <initialization+0x770>)
 80008f8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80008fc:	6253      	str	r3, [r2, #36]	; 0x24

	//G3 PJ10
	GPIOJ->MODER   &= ~GPIO_MODER_MODER10;
 80008fe:	4b48      	ldr	r3, [pc, #288]	; (8000a20 <initialization+0x770>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4a47      	ldr	r2, [pc, #284]	; (8000a20 <initialization+0x770>)
 8000904:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000908:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER10_1;
 800090a:	4b45      	ldr	r3, [pc, #276]	; (8000a20 <initialization+0x770>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4a44      	ldr	r2, [pc, #272]	; (8000a20 <initialization+0x770>)
 8000910:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000914:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 8000916:	4b42      	ldr	r3, [pc, #264]	; (8000a20 <initialization+0x770>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <initialization+0x770>)
 800091c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000920:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <initialization+0x770>)
 8000924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000926:	4a3e      	ldr	r2, [pc, #248]	; (8000a20 <initialization+0x770>)
 8000928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800092c:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 800092e:	4b3c      	ldr	r3, [pc, #240]	; (8000a20 <initialization+0x770>)
 8000930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000932:	4a3b      	ldr	r2, [pc, #236]	; (8000a20 <initialization+0x770>)
 8000934:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000938:	6253      	str	r3, [r2, #36]	; 0x24

	//G4 PJ11
	GPIOJ->MODER   &= ~GPIO_MODER_MODER11;
 800093a:	4b39      	ldr	r3, [pc, #228]	; (8000a20 <initialization+0x770>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a38      	ldr	r2, [pc, #224]	; (8000a20 <initialization+0x770>)
 8000940:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000944:	6013      	str	r3, [r2, #0]
	GPIOJ->MODER   |= GPIO_MODER_MODER11_1;
 8000946:	4b36      	ldr	r3, [pc, #216]	; (8000a20 <initialization+0x770>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a35      	ldr	r2, [pc, #212]	; (8000a20 <initialization+0x770>)
 800094c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000950:	6013      	str	r3, [r2, #0]
	GPIOJ->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR11_1;
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <initialization+0x770>)
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <initialization+0x770>)
 8000958:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800095c:	6093      	str	r3, [r2, #8]
	GPIOJ->AFR[1] &= ~GPIO_AFRL_AFRL3_0;
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <initialization+0x770>)
 8000960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000962:	4a2f      	ldr	r2, [pc, #188]	; (8000a20 <initialization+0x770>)
 8000964:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000968:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOJ->AFR[1] |= GPIO_AFRL_AFRL3_1 | GPIO_AFRL_AFRL3_2 | GPIO_AFRL_AFRL3_3;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <initialization+0x770>)
 800096c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096e:	4a2c      	ldr	r2, [pc, #176]	; (8000a20 <initialization+0x770>)
 8000970:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000974:	6253      	str	r3, [r2, #36]	; 0x24

	//G5 PK0
	GPIOK->MODER   &= ~GPIO_MODER_MODER0;
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <initialization+0x774>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4a2a      	ldr	r2, [pc, #168]	; (8000a24 <initialization+0x774>)
 800097c:	f023 0303 	bic.w	r3, r3, #3
 8000980:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER0_1;
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <initialization+0x774>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a27      	ldr	r2, [pc, #156]	; (8000a24 <initialization+0x774>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;
 800098e:	4b25      	ldr	r3, [pc, #148]	; (8000a24 <initialization+0x774>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	4a24      	ldr	r2, [pc, #144]	; (8000a24 <initialization+0x774>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL0_0;
 800099a:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <initialization+0x774>)
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <initialization+0x774>)
 80009a0:	f023 0301 	bic.w	r3, r3, #1
 80009a4:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL0_1 | GPIO_AFRL_AFRL0_2 | GPIO_AFRL_AFRL0_3;
 80009a6:	4b1f      	ldr	r3, [pc, #124]	; (8000a24 <initialization+0x774>)
 80009a8:	6a1b      	ldr	r3, [r3, #32]
 80009aa:	4a1e      	ldr	r2, [pc, #120]	; (8000a24 <initialization+0x774>)
 80009ac:	f043 030e 	orr.w	r3, r3, #14
 80009b0:	6213      	str	r3, [r2, #32]

	//G6 PK1
	GPIOK->MODER   &= ~GPIO_MODER_MODER1;
 80009b2:	4b1c      	ldr	r3, [pc, #112]	; (8000a24 <initialization+0x774>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a1b      	ldr	r2, [pc, #108]	; (8000a24 <initialization+0x774>)
 80009b8:	f023 030c 	bic.w	r3, r3, #12
 80009bc:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER1_1;
 80009be:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <initialization+0x774>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4a18      	ldr	r2, [pc, #96]	; (8000a24 <initialization+0x774>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_1;
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <initialization+0x774>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <initialization+0x774>)
 80009d0:	f043 0308 	orr.w	r3, r3, #8
 80009d4:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL1_0;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <initialization+0x774>)
 80009d8:	6a1b      	ldr	r3, [r3, #32]
 80009da:	4a12      	ldr	r2, [pc, #72]	; (8000a24 <initialization+0x774>)
 80009dc:	f023 0310 	bic.w	r3, r3, #16
 80009e0:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <initialization+0x774>)
 80009e4:	6a1b      	ldr	r3, [r3, #32]
 80009e6:	4a0f      	ldr	r2, [pc, #60]	; (8000a24 <initialization+0x774>)
 80009e8:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80009ec:	6213      	str	r3, [r2, #32]

	//G7 PK2
	GPIOK->MODER   &= ~GPIO_MODER_MODER2;
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <initialization+0x774>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0c      	ldr	r2, [pc, #48]	; (8000a24 <initialization+0x774>)
 80009f4:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80009f8:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER2_1;
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <initialization+0x774>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a09      	ldr	r2, [pc, #36]	; (8000a24 <initialization+0x774>)
 8000a00:	f043 0320 	orr.w	r3, r3, #32
 8000a04:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_1;
 8000a06:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <initialization+0x774>)
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <initialization+0x774>)
 8000a0c:	f043 0320 	orr.w	r3, r3, #32
 8000a10:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL2_0;
 8000a12:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <initialization+0x774>)
 8000a14:	6a1b      	ldr	r3, [r3, #32]
 8000a16:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <initialization+0x774>)
 8000a18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a1c:	e004      	b.n	8000a28 <initialization+0x778>
 8000a1e:	bf00      	nop
 8000a20:	40022400 	.word	0x40022400
 8000a24:	40022800 	.word	0x40022800
 8000a28:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000a2a:	4b90      	ldr	r3, [pc, #576]	; (8000c6c <initialization+0x9bc>)
 8000a2c:	6a1b      	ldr	r3, [r3, #32]
 8000a2e:	4a8f      	ldr	r2, [pc, #572]	; (8000c6c <initialization+0x9bc>)
 8000a30:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000a34:	6213      	str	r3, [r2, #32]

	//VSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER9;
 8000a36:	4b8e      	ldr	r3, [pc, #568]	; (8000c70 <initialization+0x9c0>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a8d      	ldr	r2, [pc, #564]	; (8000c70 <initialization+0x9c0>)
 8000a3c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000a40:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER9_1;
 8000a42:	4b8b      	ldr	r3, [pc, #556]	; (8000c70 <initialization+0x9c0>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	4a8a      	ldr	r2, [pc, #552]	; (8000c70 <initialization+0x9c0>)
 8000a48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a4c:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9_1;
 8000a4e:	4b88      	ldr	r3, [pc, #544]	; (8000c70 <initialization+0x9c0>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	4a87      	ldr	r2, [pc, #540]	; (8000c70 <initialization+0x9c0>)
 8000a54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a58:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL1_0;
 8000a5a:	4b85      	ldr	r3, [pc, #532]	; (8000c70 <initialization+0x9c0>)
 8000a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a5e:	4a84      	ldr	r2, [pc, #528]	; (8000c70 <initialization+0x9c0>)
 8000a60:	f023 0310 	bic.w	r3, r3, #16
 8000a64:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL1_1 | GPIO_AFRL_AFRL1_2 | GPIO_AFRL_AFRL1_3;
 8000a66:	4b82      	ldr	r3, [pc, #520]	; (8000c70 <initialization+0x9c0>)
 8000a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6a:	4a81      	ldr	r2, [pc, #516]	; (8000c70 <initialization+0x9c0>)
 8000a6c:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000a70:	6253      	str	r3, [r2, #36]	; 0x24

	//HSYNC
	GPIOI->MODER   &= ~GPIO_MODER_MODER10;
 8000a72:	4b7f      	ldr	r3, [pc, #508]	; (8000c70 <initialization+0x9c0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a7e      	ldr	r2, [pc, #504]	; (8000c70 <initialization+0x9c0>)
 8000a78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000a7c:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER10_1;
 8000a7e:	4b7c      	ldr	r3, [pc, #496]	; (8000c70 <initialization+0x9c0>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a7b      	ldr	r2, [pc, #492]	; (8000c70 <initialization+0x9c0>)
 8000a84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a88:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR10_1;
 8000a8a:	4b79      	ldr	r3, [pc, #484]	; (8000c70 <initialization+0x9c0>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	4a78      	ldr	r2, [pc, #480]	; (8000c70 <initialization+0x9c0>)
 8000a90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a94:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL2_0;
 8000a96:	4b76      	ldr	r3, [pc, #472]	; (8000c70 <initialization+0x9c0>)
 8000a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a9a:	4a75      	ldr	r2, [pc, #468]	; (8000c70 <initialization+0x9c0>)
 8000a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000aa0:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL2_1 | GPIO_AFRL_AFRL2_2 | GPIO_AFRL_AFRL2_3;
 8000aa2:	4b73      	ldr	r3, [pc, #460]	; (8000c70 <initialization+0x9c0>)
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa6:	4a72      	ldr	r2, [pc, #456]	; (8000c70 <initialization+0x9c0>)
 8000aa8:	f443 6360 	orr.w	r3, r3, #3584	; 0xe00
 8000aac:	6253      	str	r3, [r2, #36]	; 0x24

	//CLK
	GPIOI->MODER   &= ~GPIO_MODER_MODER14;
 8000aae:	4b70      	ldr	r3, [pc, #448]	; (8000c70 <initialization+0x9c0>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a6f      	ldr	r2, [pc, #444]	; (8000c70 <initialization+0x9c0>)
 8000ab4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8000ab8:	6013      	str	r3, [r2, #0]
	GPIOI->MODER   |= GPIO_MODER_MODER14_1;
 8000aba:	4b6d      	ldr	r3, [pc, #436]	; (8000c70 <initialization+0x9c0>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a6c      	ldr	r2, [pc, #432]	; (8000c70 <initialization+0x9c0>)
 8000ac0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ac4:	6013      	str	r3, [r2, #0]
	GPIOI->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR14_1;
 8000ac6:	4b6a      	ldr	r3, [pc, #424]	; (8000c70 <initialization+0x9c0>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	4a69      	ldr	r2, [pc, #420]	; (8000c70 <initialization+0x9c0>)
 8000acc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ad0:	6093      	str	r3, [r2, #8]
	GPIOI->AFR[1] &= ~GPIO_AFRL_AFRL6_0;
 8000ad2:	4b67      	ldr	r3, [pc, #412]	; (8000c70 <initialization+0x9c0>)
 8000ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ad6:	4a66      	ldr	r2, [pc, #408]	; (8000c70 <initialization+0x9c0>)
 8000ad8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000adc:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOI->AFR[1] |= GPIO_AFRL_AFRL6_1 | GPIO_AFRL_AFRL6_2 | GPIO_AFRL_AFRL6_3;
 8000ade:	4b64      	ldr	r3, [pc, #400]	; (8000c70 <initialization+0x9c0>)
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	4a63      	ldr	r2, [pc, #396]	; (8000c70 <initialization+0x9c0>)
 8000ae4:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 8000ae8:	6253      	str	r3, [r2, #36]	; 0x24

	//DE
	GPIOK->MODER   &= ~GPIO_MODER_MODER7;
 8000aea:	4b60      	ldr	r3, [pc, #384]	; (8000c6c <initialization+0x9bc>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a5f      	ldr	r2, [pc, #380]	; (8000c6c <initialization+0x9bc>)
 8000af0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000af4:	6013      	str	r3, [r2, #0]
	GPIOK->MODER   |= GPIO_MODER_MODER7_1;
 8000af6:	4b5d      	ldr	r3, [pc, #372]	; (8000c6c <initialization+0x9bc>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a5c      	ldr	r2, [pc, #368]	; (8000c6c <initialization+0x9bc>)
 8000afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b00:	6013      	str	r3, [r2, #0]
	GPIOK->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7_1;
 8000b02:	4b5a      	ldr	r3, [pc, #360]	; (8000c6c <initialization+0x9bc>)
 8000b04:	689b      	ldr	r3, [r3, #8]
 8000b06:	4a59      	ldr	r2, [pc, #356]	; (8000c6c <initialization+0x9bc>)
 8000b08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b0c:	6093      	str	r3, [r2, #8]
	GPIOK->AFR[0] &= ~GPIO_AFRL_AFRL7_0;
 8000b0e:	4b57      	ldr	r3, [pc, #348]	; (8000c6c <initialization+0x9bc>)
 8000b10:	6a1b      	ldr	r3, [r3, #32]
 8000b12:	4a56      	ldr	r2, [pc, #344]	; (8000c6c <initialization+0x9bc>)
 8000b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6213      	str	r3, [r2, #32]
	GPIOK->AFR[0] |= GPIO_AFRL_AFRL7_1 | GPIO_AFRL_AFRL7_2 | GPIO_AFRL_AFRL7_3;
 8000b1a:	4b54      	ldr	r3, [pc, #336]	; (8000c6c <initialization+0x9bc>)
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	4a53      	ldr	r2, [pc, #332]	; (8000c6c <initialization+0x9bc>)
 8000b20:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8000b24:	6213      	str	r3, [r2, #32]

	//LED
	GPIOK->MODER &= ~GPIO_MODER_MODER3;
 8000b26:	4b51      	ldr	r3, [pc, #324]	; (8000c6c <initialization+0x9bc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a50      	ldr	r2, [pc, #320]	; (8000c6c <initialization+0x9bc>)
 8000b2c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000b30:	6013      	str	r3, [r2, #0]
	GPIOK->MODER |= GPIO_MODER_MODER3_0;
 8000b32:	4b4e      	ldr	r3, [pc, #312]	; (8000c6c <initialization+0x9bc>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a4d      	ldr	r2, [pc, #308]	; (8000c6c <initialization+0x9bc>)
 8000b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b3c:	6013      	str	r3, [r2, #0]
	GPIOK->BSRR |= GPIO_BSRR_BS_3;
 8000b3e:	4b4b      	ldr	r3, [pc, #300]	; (8000c6c <initialization+0x9bc>)
 8000b40:	699b      	ldr	r3, [r3, #24]
 8000b42:	4a4a      	ldr	r2, [pc, #296]	; (8000c6c <initialization+0x9bc>)
 8000b44:	f043 0308 	orr.w	r3, r3, #8
 8000b48:	6193      	str	r3, [r2, #24]

	//ON
	GPIOI->MODER &= ~GPIO_MODER_MODER12;
 8000b4a:	4b49      	ldr	r3, [pc, #292]	; (8000c70 <initialization+0x9c0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a48      	ldr	r2, [pc, #288]	; (8000c70 <initialization+0x9c0>)
 8000b50:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000b54:	6013      	str	r3, [r2, #0]
	GPIOI->MODER |= GPIO_MODER_MODER12_0;
 8000b56:	4b46      	ldr	r3, [pc, #280]	; (8000c70 <initialization+0x9c0>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a45      	ldr	r2, [pc, #276]	; (8000c70 <initialization+0x9c0>)
 8000b5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b60:	6013      	str	r3, [r2, #0]
	GPIOI->BSRR |= GPIO_BSRR_BS_12;
 8000b62:	4b43      	ldr	r3, [pc, #268]	; (8000c70 <initialization+0x9c0>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	4a42      	ldr	r2, [pc, #264]	; (8000c70 <initialization+0x9c0>)
 8000b68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b6c:	6193      	str	r3, [r2, #24]

	GPIOC->MODER &= ~GPIO_MODER_MODER7;
 8000b6e:	4b41      	ldr	r3, [pc, #260]	; (8000c74 <initialization+0x9c4>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a40      	ldr	r2, [pc, #256]	; (8000c74 <initialization+0x9c4>)
 8000b74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b78:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= GPIO_MODER_MODER7_0;
 8000b7a:	4b3e      	ldr	r3, [pc, #248]	; (8000c74 <initialization+0x9c4>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a3d      	ldr	r2, [pc, #244]	; (8000c74 <initialization+0x9c4>)
 8000b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b84:	6013      	str	r3, [r2, #0]
	GPIOC->BSRR |= GPIO_BSRR_BS_7;
 8000b86:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <initialization+0x9c4>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	4a3a      	ldr	r2, [pc, #232]	; (8000c74 <initialization+0x9c4>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6193      	str	r3, [r2, #24]

	LTDC->SSCR |= ((DISPLAY_HSYNC - 1) << 16 | (DISPLAY_VSYNC - 1));
 8000b92:	4b39      	ldr	r3, [pc, #228]	; (8000c78 <initialization+0x9c8>)
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4938      	ldr	r1, [pc, #224]	; (8000c78 <initialization+0x9c8>)
 8000b98:	4b38      	ldr	r3, [pc, #224]	; (8000c7c <initialization+0x9cc>)
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	608b      	str	r3, [r1, #8]
	LTDC->BPCR |= ((DISPLAY_HSYNC+DISPLAY_HBP-1) << 16 | (DISPLAY_VSYNC+DISPLAY_VBP-1));
 8000b9e:	4b36      	ldr	r3, [pc, #216]	; (8000c78 <initialization+0x9c8>)
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	4935      	ldr	r1, [pc, #212]	; (8000c78 <initialization+0x9c8>)
 8000ba4:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <initialization+0x9d0>)
 8000ba6:	4313      	orrs	r3, r2
 8000ba8:	60cb      	str	r3, [r1, #12]
	LTDC->AWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP - 1) << 16 | (DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1));
 8000baa:	4b33      	ldr	r3, [pc, #204]	; (8000c78 <initialization+0x9c8>)
 8000bac:	691a      	ldr	r2, [r3, #16]
 8000bae:	4932      	ldr	r1, [pc, #200]	; (8000c78 <initialization+0x9c8>)
 8000bb0:	4b34      	ldr	r3, [pc, #208]	; (8000c84 <initialization+0x9d4>)
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	610b      	str	r3, [r1, #16]
	LTDC->TWCR |= ((DISPLAY_WIDTH + DISPLAY_HSYNC + DISPLAY_HBP + DISPLAY_HFP -1)<< 16 |(DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP + DISPLAY_VFP - 1));
 8000bb6:	4b30      	ldr	r3, [pc, #192]	; (8000c78 <initialization+0x9c8>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	492f      	ldr	r1, [pc, #188]	; (8000c78 <initialization+0x9c8>)
 8000bbc:	4b32      	ldr	r3, [pc, #200]	; (8000c88 <initialization+0x9d8>)
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	614b      	str	r3, [r1, #20]
	LTDC_Layer2->WHPCR |= (((DISPLAY_WIDTH + DISPLAY_HBP + DISPLAY_HSYNC - 1) << 16) | (DISPLAY_HBP + DISPLAY_HSYNC));
 8000bc2:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <initialization+0x9dc>)
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	4931      	ldr	r1, [pc, #196]	; (8000c8c <initialization+0x9dc>)
 8000bc8:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <initialization+0x9e0>)
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	604b      	str	r3, [r1, #4]
	LTDC_Layer2->WVPCR |= (((DISPLAY_HEIGHT + DISPLAY_VSYNC + DISPLAY_VBP - 1) << 16) |(DISPLAY_VSYNC + DISPLAY_VBP));
 8000bce:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <initialization+0x9dc>)
 8000bd0:	689a      	ldr	r2, [r3, #8]
 8000bd2:	492e      	ldr	r1, [pc, #184]	; (8000c8c <initialization+0x9dc>)
 8000bd4:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <initialization+0x9e4>)
 8000bd6:	4313      	orrs	r3, r2
 8000bd8:	608b      	str	r3, [r1, #8]
	LTDC_Layer2->PFCR = 2;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <initialization+0x9dc>)
 8000bdc:	2202      	movs	r2, #2
 8000bde:	611a      	str	r2, [r3, #16]
	LTDC_Layer2->BFCR |= ((4 << 8) | 5);
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <initialization+0x9dc>)
 8000be2:	69da      	ldr	r2, [r3, #28]
 8000be4:	4929      	ldr	r1, [pc, #164]	; (8000c8c <initialization+0x9dc>)
 8000be6:	f240 4305 	movw	r3, #1029	; 0x405
 8000bea:	4313      	orrs	r3, r2
 8000bec:	61cb      	str	r3, [r1, #28]
	LTDC_Layer2->CACR = 0xff;
 8000bee:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <initialization+0x9dc>)
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	615a      	str	r2, [r3, #20]
	LTDC_Layer2->CFBLR |= (((PIXEL_SIZE * DISPLAY_WIDTH) << 16) | (PIXEL_SIZE * DISPLAY_WIDTH + 3));
 8000bf4:	4b25      	ldr	r3, [pc, #148]	; (8000c8c <initialization+0x9dc>)
 8000bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf8:	4924      	ldr	r1, [pc, #144]	; (8000c8c <initialization+0x9dc>)
 8000bfa:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <initialization+0x9e8>)
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	62cb      	str	r3, [r1, #44]	; 0x2c
	LTDC_Layer2->CFBLNR |= DISPLAY_HEIGHT;
 8000c00:	4b22      	ldr	r3, [pc, #136]	; (8000c8c <initialization+0x9dc>)
 8000c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c04:	4a21      	ldr	r2, [pc, #132]	; (8000c8c <initialization+0x9dc>)
 8000c06:	f443 7388 	orr.w	r3, r3, #272	; 0x110
 8000c0a:	6313      	str	r3, [r2, #48]	; 0x30
	LTDC_Layer2->CR |= LTDC_LxCR_LEN;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <initialization+0x9dc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <initialization+0x9dc>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6013      	str	r3, [r2, #0]
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8000c18:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <initialization+0x9c8>)
 8000c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c1c:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <initialization+0x9c8>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	6253      	str	r3, [r2, #36]	; 0x24
	LTDC->GCR |= LTDC_GCR_LTDCEN;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <initialization+0x9c8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <initialization+0x9c8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6193      	str	r3, [r2, #24]

	for(int i = 0; i <= 130559; ++i)
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	e00a      	b.n	8000c4c <initialization+0x99c>
		screen[i] = main_picture[i];
 8000c36:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <initialization+0x9ec>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000c3e:	4a18      	ldr	r2, [pc, #96]	; (8000ca0 <initialization+0x9f0>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0; i <= 130559; ++i)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f5b3 3fff 	cmp.w	r3, #130560	; 0x1fe00
 8000c52:	dbf0      	blt.n	8000c36 <initialization+0x986>

	GPIOK->BSRR |= GPIO_BSRR_BS_3;
 8000c54:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <initialization+0x9bc>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <initialization+0x9bc>)
 8000c5a:	f043 0308 	orr.w	r3, r3, #8
 8000c5e:	6193      	str	r3, [r2, #24]
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	40022800 	.word	0x40022800
 8000c70:	40022000 	.word	0x40022000
 8000c74:	40020800 	.word	0x40020800
 8000c78:	40016800 	.word	0x40016800
 8000c7c:	001d0009 	.word	0x001d0009
 8000c80:	002a000b 	.word	0x002a000b
 8000c84:	020a011b 	.word	0x020a011b
 8000c88:	022a011d 	.word	0x022a011d
 8000c8c:	40016904 	.word	0x40016904
 8000c90:	020a002b 	.word	0x020a002b
 8000c94:	011b000c 	.word	0x011b000c
 8000c98:	07800783 	.word	0x07800783
 8000c9c:	080a9c8c 	.word	0x080a9c8c
 8000ca0:	20000020 	.word	0x20000020

08000ca4 <change_digit_1>:

void change_digit_1(int poz, int number)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b099      	sub	sp, #100	; 0x64
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]
	int x = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	65fb      	str	r3, [r7, #92]	; 0x5c
	int k = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	65bb      	str	r3, [r7, #88]	; 0x58

	if(poz==1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d101      	bne.n	8000cc0 <change_digit_1+0x1c>
		x = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d101      	bne.n	8000cca <change_digit_1+0x26>
		x = 38;
 8000cc6:	2326      	movs	r3, #38	; 0x26
 8000cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==3)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	d101      	bne.n	8000cd4 <change_digit_1+0x30>
		x = 86;
 8000cd0:	2356      	movs	r3, #86	; 0x56
 8000cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==4)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	d101      	bne.n	8000cde <change_digit_1+0x3a>
		x = 124;
 8000cda:	237c      	movs	r3, #124	; 0x7c
 8000cdc:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(number==0)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d126      	bne.n	8000d32 <change_digit_1+0x8e>
		for(int i = 0; i <= 57; ++i)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8000ce8:	e020      	b.n	8000d2c <change_digit_1+0x88>
			for(int j = 0; j <= 32; ++j)
 8000cea:	2300      	movs	r3, #0
 8000cec:	653b      	str	r3, [r7, #80]	; 0x50
 8000cee:	e017      	b.n	8000d20 <change_digit_1+0x7c>
				screen[x+5113+i*480+j] = zero_picture_1[k++];
 8000cf0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000cf2:	1c4b      	adds	r3, r1, #1
 8000cf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cf8:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000cfc:	441a      	add	r2, r3
 8000cfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000d00:	4603      	mov	r3, r0
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	1a1b      	subs	r3, r3, r0
 8000d06:	015b      	lsls	r3, r3, #5
 8000d08:	441a      	add	r2, r3
 8000d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d0c:	4413      	add	r3, r2
 8000d0e:	4aa0      	ldr	r2, [pc, #640]	; (8000f90 <change_digit_1+0x2ec>)
 8000d10:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000d14:	4a9f      	ldr	r2, [pc, #636]	; (8000f94 <change_digit_1+0x2f0>)
 8000d16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	653b      	str	r3, [r7, #80]	; 0x50
 8000d20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000d22:	2b20      	cmp	r3, #32
 8000d24:	dde4      	ble.n	8000cf0 <change_digit_1+0x4c>
		for(int i = 0; i <= 57; ++i)
 8000d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d28:	3301      	adds	r3, #1
 8000d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8000d2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000d2e:	2b39      	cmp	r3, #57	; 0x39
 8000d30:	dddb      	ble.n	8000cea <change_digit_1+0x46>
	if(number==1)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d126      	bne.n	8000d86 <change_digit_1+0xe2>
		for(int i = 0; i <= 57; ++i)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d3c:	e020      	b.n	8000d80 <change_digit_1+0xdc>
			for(int j = 0; j <= 32; ++j)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d42:	e017      	b.n	8000d74 <change_digit_1+0xd0>
				screen[x+5113+i*480+j] = one_picture_1[k++];
 8000d44:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d46:	1c4b      	adds	r3, r1, #1
 8000d48:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d4c:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000d50:	441a      	add	r2, r3
 8000d52:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000d54:	4603      	mov	r3, r0
 8000d56:	011b      	lsls	r3, r3, #4
 8000d58:	1a1b      	subs	r3, r3, r0
 8000d5a:	015b      	lsls	r3, r3, #5
 8000d5c:	441a      	add	r2, r3
 8000d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d60:	4413      	add	r3, r2
 8000d62:	4a8d      	ldr	r2, [pc, #564]	; (8000f98 <change_digit_1+0x2f4>)
 8000d64:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000d68:	4a8a      	ldr	r2, [pc, #552]	; (8000f94 <change_digit_1+0x2f0>)
 8000d6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000d6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d70:	3301      	adds	r3, #1
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8000d74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d76:	2b20      	cmp	r3, #32
 8000d78:	dde4      	ble.n	8000d44 <change_digit_1+0xa0>
		for(int i = 0; i <= 57; ++i)
 8000d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d82:	2b39      	cmp	r3, #57	; 0x39
 8000d84:	dddb      	ble.n	8000d3e <change_digit_1+0x9a>
	if(number==2)
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d126      	bne.n	8000dda <change_digit_1+0x136>
		for(int i = 0; i <= 57; ++i)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8000d90:	e020      	b.n	8000dd4 <change_digit_1+0x130>
			for(int j = 0; j <= 32; ++j)
 8000d92:	2300      	movs	r3, #0
 8000d94:	643b      	str	r3, [r7, #64]	; 0x40
 8000d96:	e017      	b.n	8000dc8 <change_digit_1+0x124>
				screen[x+5113+i*480+j] = two_picture_1[k++];
 8000d98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000d9a:	1c4b      	adds	r3, r1, #1
 8000d9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8000d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000da0:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000da4:	441a      	add	r2, r3
 8000da6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000da8:	4603      	mov	r3, r0
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	1a1b      	subs	r3, r3, r0
 8000dae:	015b      	lsls	r3, r3, #5
 8000db0:	441a      	add	r2, r3
 8000db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000db4:	4413      	add	r3, r2
 8000db6:	4a79      	ldr	r2, [pc, #484]	; (8000f9c <change_digit_1+0x2f8>)
 8000db8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000dbc:	4a75      	ldr	r2, [pc, #468]	; (8000f94 <change_digit_1+0x2f0>)
 8000dbe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8000dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dca:	2b20      	cmp	r3, #32
 8000dcc:	dde4      	ble.n	8000d98 <change_digit_1+0xf4>
		for(int i = 0; i <= 57; ++i)
 8000dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8000dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000dd6:	2b39      	cmp	r3, #57	; 0x39
 8000dd8:	dddb      	ble.n	8000d92 <change_digit_1+0xee>
	if(number==3)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d126      	bne.n	8000e2e <change_digit_1+0x18a>
		for(int i = 0; i <= 57; ++i)
 8000de0:	2300      	movs	r3, #0
 8000de2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000de4:	e020      	b.n	8000e28 <change_digit_1+0x184>
			for(int j = 0; j <= 32; ++j)
 8000de6:	2300      	movs	r3, #0
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
 8000dea:	e017      	b.n	8000e1c <change_digit_1+0x178>
				screen[x+5113+i*480+j] = three_picture_1[k++];
 8000dec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000dee:	1c4b      	adds	r3, r1, #1
 8000df0:	65bb      	str	r3, [r7, #88]	; 0x58
 8000df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000df4:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000df8:	441a      	add	r2, r3
 8000dfa:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	011b      	lsls	r3, r3, #4
 8000e00:	1a1b      	subs	r3, r3, r0
 8000e02:	015b      	lsls	r3, r3, #5
 8000e04:	441a      	add	r2, r3
 8000e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a65      	ldr	r2, [pc, #404]	; (8000fa0 <change_digit_1+0x2fc>)
 8000e0c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000e10:	4a60      	ldr	r2, [pc, #384]	; (8000f94 <change_digit_1+0x2f0>)
 8000e12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e18:	3301      	adds	r3, #1
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000e1e:	2b20      	cmp	r3, #32
 8000e20:	dde4      	ble.n	8000dec <change_digit_1+0x148>
		for(int i = 0; i <= 57; ++i)
 8000e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e24:	3301      	adds	r3, #1
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e2a:	2b39      	cmp	r3, #57	; 0x39
 8000e2c:	dddb      	ble.n	8000de6 <change_digit_1+0x142>
	if(number==4)
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	2b04      	cmp	r3, #4
 8000e32:	d126      	bne.n	8000e82 <change_digit_1+0x1de>
		for(int i = 0; i <= 57; ++i)
 8000e34:	2300      	movs	r3, #0
 8000e36:	637b      	str	r3, [r7, #52]	; 0x34
 8000e38:	e020      	b.n	8000e7c <change_digit_1+0x1d8>
			for(int j = 0; j <= 32; ++j)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
 8000e3e:	e017      	b.n	8000e70 <change_digit_1+0x1cc>
				screen[x+5113+i*480+j] = four_picture_1[k++];
 8000e40:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e42:	1c4b      	adds	r3, r1, #1
 8000e44:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e48:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000e4c:	441a      	add	r2, r3
 8000e4e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000e50:	4603      	mov	r3, r0
 8000e52:	011b      	lsls	r3, r3, #4
 8000e54:	1a1b      	subs	r3, r3, r0
 8000e56:	015b      	lsls	r3, r3, #5
 8000e58:	441a      	add	r2, r3
 8000e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5c:	4413      	add	r3, r2
 8000e5e:	4a51      	ldr	r2, [pc, #324]	; (8000fa4 <change_digit_1+0x300>)
 8000e60:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000e64:	4a4b      	ldr	r2, [pc, #300]	; (8000f94 <change_digit_1+0x2f0>)
 8000e66:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	633b      	str	r3, [r7, #48]	; 0x30
 8000e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e72:	2b20      	cmp	r3, #32
 8000e74:	dde4      	ble.n	8000e40 <change_digit_1+0x19c>
		for(int i = 0; i <= 57; ++i)
 8000e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e78:	3301      	adds	r3, #1
 8000e7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7e:	2b39      	cmp	r3, #57	; 0x39
 8000e80:	dddb      	ble.n	8000e3a <change_digit_1+0x196>
	if(number==5)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b05      	cmp	r3, #5
 8000e86:	d126      	bne.n	8000ed6 <change_digit_1+0x232>
		for(int i = 0; i <= 57; ++i)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e8c:	e020      	b.n	8000ed0 <change_digit_1+0x22c>
			for(int j = 0; j <= 32; ++j)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e92:	e017      	b.n	8000ec4 <change_digit_1+0x220>
				screen[x+5113+i*480+j] = five_picture_1[k++];
 8000e94:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000e96:	1c4b      	adds	r3, r1, #1
 8000e98:	65bb      	str	r3, [r7, #88]	; 0x58
 8000e9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e9c:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000ea0:	441a      	add	r2, r3
 8000ea2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	1a1b      	subs	r3, r3, r0
 8000eaa:	015b      	lsls	r3, r3, #5
 8000eac:	441a      	add	r2, r3
 8000eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eb0:	4413      	add	r3, r2
 8000eb2:	4a3d      	ldr	r2, [pc, #244]	; (8000fa8 <change_digit_1+0x304>)
 8000eb4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000eb8:	4a36      	ldr	r2, [pc, #216]	; (8000f94 <change_digit_1+0x2f0>)
 8000eba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ec6:	2b20      	cmp	r3, #32
 8000ec8:	dde4      	ble.n	8000e94 <change_digit_1+0x1f0>
		for(int i = 0; i <= 57; ++i)
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	3301      	adds	r3, #1
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed2:	2b39      	cmp	r3, #57	; 0x39
 8000ed4:	dddb      	ble.n	8000e8e <change_digit_1+0x1ea>
	if(number==6)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	2b06      	cmp	r3, #6
 8000eda:	d126      	bne.n	8000f2a <change_digit_1+0x286>
		for(int i = 0; i <= 57; ++i)
 8000edc:	2300      	movs	r3, #0
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
 8000ee0:	e020      	b.n	8000f24 <change_digit_1+0x280>
			for(int j = 0; j <= 32; ++j)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	623b      	str	r3, [r7, #32]
 8000ee6:	e017      	b.n	8000f18 <change_digit_1+0x274>
				screen[x+5113+i*480+j] = six_picture_1[k++];
 8000ee8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000eea:	1c4b      	adds	r3, r1, #1
 8000eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8000eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000ef0:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000ef4:	441a      	add	r2, r3
 8000ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ef8:	4603      	mov	r3, r0
 8000efa:	011b      	lsls	r3, r3, #4
 8000efc:	1a1b      	subs	r3, r3, r0
 8000efe:	015b      	lsls	r3, r3, #5
 8000f00:	441a      	add	r2, r3
 8000f02:	6a3b      	ldr	r3, [r7, #32]
 8000f04:	4413      	add	r3, r2
 8000f06:	4a29      	ldr	r2, [pc, #164]	; (8000fac <change_digit_1+0x308>)
 8000f08:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000f0c:	4a21      	ldr	r2, [pc, #132]	; (8000f94 <change_digit_1+0x2f0>)
 8000f0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000f12:	6a3b      	ldr	r3, [r7, #32]
 8000f14:	3301      	adds	r3, #1
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	6a3b      	ldr	r3, [r7, #32]
 8000f1a:	2b20      	cmp	r3, #32
 8000f1c:	dde4      	ble.n	8000ee8 <change_digit_1+0x244>
		for(int i = 0; i <= 57; ++i)
 8000f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f20:	3301      	adds	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	; 0x24
 8000f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f26:	2b39      	cmp	r3, #57	; 0x39
 8000f28:	dddb      	ble.n	8000ee2 <change_digit_1+0x23e>
	if(number==7)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	2b07      	cmp	r3, #7
 8000f2e:	d126      	bne.n	8000f7e <change_digit_1+0x2da>
		for(int i = 0; i <= 57; ++i)
 8000f30:	2300      	movs	r3, #0
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	e020      	b.n	8000f78 <change_digit_1+0x2d4>
			for(int j = 0; j <= 32; ++j)
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	e017      	b.n	8000f6c <change_digit_1+0x2c8>
				screen[x+5113+i*480+j] = seven_picture_1[k++];
 8000f3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000f3e:	1c4b      	adds	r3, r1, #1
 8000f40:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f44:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000f48:	441a      	add	r2, r3
 8000f4a:	69f8      	ldr	r0, [r7, #28]
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	011b      	lsls	r3, r3, #4
 8000f50:	1a1b      	subs	r3, r3, r0
 8000f52:	015b      	lsls	r3, r3, #5
 8000f54:	441a      	add	r2, r3
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	4413      	add	r3, r2
 8000f5a:	4a15      	ldr	r2, [pc, #84]	; (8000fb0 <change_digit_1+0x30c>)
 8000f5c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <change_digit_1+0x2f0>)
 8000f62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	2b20      	cmp	r3, #32
 8000f70:	dde4      	ble.n	8000f3c <change_digit_1+0x298>
		for(int i = 0; i <= 57; ++i)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3301      	adds	r3, #1
 8000f76:	61fb      	str	r3, [r7, #28]
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	2b39      	cmp	r3, #57	; 0x39
 8000f7c:	dddb      	ble.n	8000f36 <change_digit_1+0x292>
	if(number==8)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b08      	cmp	r3, #8
 8000f82:	d138      	bne.n	8000ff6 <change_digit_1+0x352>
		for(int i = 0; i <= 57; ++i)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e032      	b.n	8000ff0 <change_digit_1+0x34c>
			for(int j = 0; j <= 32; ++j)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	e029      	b.n	8000fe4 <change_digit_1+0x340>
 8000f90:	08009c60 	.word	0x08009c60
 8000f94:	20000020 	.word	0x20000020
 8000f98:	0800519c 	.word	0x0800519c
 8000f9c:	08008d6c 	.word	0x08008d6c
 8000fa0:	08007e78 	.word	0x08007e78
 8000fa4:	080033b4 	.word	0x080033b4
 8000fa8:	080024c0 	.word	0x080024c0
 8000fac:	08006f84 	.word	0x08006f84
 8000fb0:	08006090 	.word	0x08006090
				screen[x+5113+i*480+j] = eigth_picture_1[k++];
 8000fb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8000fb6:	1c4b      	adds	r3, r1, #1
 8000fb8:	65bb      	str	r3, [r7, #88]	; 0x58
 8000fba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000fbc:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8000fc0:	441a      	add	r2, r3
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	011b      	lsls	r3, r3, #4
 8000fc8:	1a1b      	subs	r3, r3, r0
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	441a      	add	r2, r3
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	4a25      	ldr	r2, [pc, #148]	; (8001068 <change_digit_1+0x3c4>)
 8000fd4:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8000fd8:	4a24      	ldr	r2, [pc, #144]	; (800106c <change_digit_1+0x3c8>)
 8000fda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	613b      	str	r3, [r7, #16]
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	2b20      	cmp	r3, #32
 8000fe8:	dde4      	ble.n	8000fb4 <change_digit_1+0x310>
		for(int i = 0; i <= 57; ++i)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	2b39      	cmp	r3, #57	; 0x39
 8000ff4:	ddc9      	ble.n	8000f8a <change_digit_1+0x2e6>
	if(number==9)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d126      	bne.n	800104a <change_digit_1+0x3a6>
		for(int i = 0; i <= 57; ++i)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	e020      	b.n	8001044 <change_digit_1+0x3a0>
			for(int j = 0; j <= 32; ++j)
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	e017      	b.n	8001038 <change_digit_1+0x394>
				screen[x+5113+i*480+j] = nine_picture_1[k++];
 8001008:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800100a:	1c4b      	adds	r3, r1, #1
 800100c:	65bb      	str	r3, [r7, #88]	; 0x58
 800100e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001010:	f241 32f9 	movw	r2, #5113	; 0x13f9
 8001014:	441a      	add	r2, r3
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	4603      	mov	r3, r0
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	1a1b      	subs	r3, r3, r0
 800101e:	015b      	lsls	r3, r3, #5
 8001020:	441a      	add	r2, r3
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	4413      	add	r3, r2
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <change_digit_1+0x3cc>)
 8001028:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <change_digit_1+0x3c8>)
 800102e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3301      	adds	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b20      	cmp	r3, #32
 800103c:	dde4      	ble.n	8001008 <change_digit_1+0x364>
		for(int i = 0; i <= 57; ++i)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b39      	cmp	r3, #57	; 0x39
 8001048:	dddb      	ble.n	8001002 <change_digit_1+0x35e>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <change_digit_1+0x3d0>)
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <change_digit_1+0x3c8>)
 800104e:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <change_digit_1+0x3d4>)
 8001052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001054:	4a08      	ldr	r2, [pc, #32]	; (8001078 <change_digit_1+0x3d4>)
 8001056:	f043 0302 	orr.w	r3, r3, #2
 800105a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800105c:	bf00      	nop
 800105e:	3764      	adds	r7, #100	; 0x64
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	0800ab54 	.word	0x0800ab54
 800106c:	20000020 	.word	0x20000020
 8001070:	080042a8 	.word	0x080042a8
 8001074:	40016904 	.word	0x40016904
 8001078:	40016800 	.word	0x40016800

0800107c <change_digit_2>:

void change_digit_2(int poz, int number)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b098      	sub	sp, #96	; 0x60
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
	change_digit_1(poz, number);
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff fe0b 	bl	8000ca4 <change_digit_1>
	int x = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	65fb      	str	r3, [r7, #92]	; 0x5c
	int k = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	65bb      	str	r3, [r7, #88]	; 0x58

	if(poz==1)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d101      	bne.n	80010a0 <change_digit_2+0x24>
		x = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==2)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d101      	bne.n	80010aa <change_digit_2+0x2e>
		x = 110;
 80010a6:	236e      	movs	r3, #110	; 0x6e
 80010a8:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==3)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	d101      	bne.n	80010b4 <change_digit_2+0x38>
		x = 246;
 80010b0:	23f6      	movs	r3, #246	; 0xf6
 80010b2:	65fb      	str	r3, [r7, #92]	; 0x5c
	if(poz==4)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	d102      	bne.n	80010c0 <change_digit_2+0x44>
		x = 356;
 80010ba:	f44f 73b2 	mov.w	r3, #356	; 0x164
 80010be:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(number==0)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d126      	bne.n	8001114 <change_digit_2+0x98>
		for(int i = 0; i <= 173; ++i)
 80010c6:	2300      	movs	r3, #0
 80010c8:	657b      	str	r3, [r7, #84]	; 0x54
 80010ca:	e020      	b.n	800110e <change_digit_2+0x92>
			for(int j = 0; j <= 98; ++j)
 80010cc:	2300      	movs	r3, #0
 80010ce:	653b      	str	r3, [r7, #80]	; 0x50
 80010d0:	e017      	b.n	8001102 <change_digit_2+0x86>
				screen[x+42253+i*480+j] = zero_picture_2[k++];
 80010d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80010d4:	1c4b      	adds	r3, r1, #1
 80010d6:	65bb      	str	r3, [r7, #88]	; 0x58
 80010d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010da:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80010de:	441a      	add	r2, r3
 80010e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80010e2:	4603      	mov	r3, r0
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	1a1b      	subs	r3, r3, r0
 80010e8:	015b      	lsls	r3, r3, #5
 80010ea:	441a      	add	r2, r3
 80010ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010ee:	4413      	add	r3, r2
 80010f0:	4aa0      	ldr	r2, [pc, #640]	; (8001374 <change_digit_2+0x2f8>)
 80010f2:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80010f6:	4aa0      	ldr	r2, [pc, #640]	; (8001378 <change_digit_2+0x2fc>)
 80010f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80010fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80010fe:	3301      	adds	r3, #1
 8001100:	653b      	str	r3, [r7, #80]	; 0x50
 8001102:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001104:	2b62      	cmp	r3, #98	; 0x62
 8001106:	dde4      	ble.n	80010d2 <change_digit_2+0x56>
		for(int i = 0; i <= 173; ++i)
 8001108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800110a:	3301      	adds	r3, #1
 800110c:	657b      	str	r3, [r7, #84]	; 0x54
 800110e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001110:	2bad      	cmp	r3, #173	; 0xad
 8001112:	dddb      	ble.n	80010cc <change_digit_2+0x50>
	if(number==1)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d126      	bne.n	8001168 <change_digit_2+0xec>
		for(int i = 0; i <= 173; ++i)
 800111a:	2300      	movs	r3, #0
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800111e:	e020      	b.n	8001162 <change_digit_2+0xe6>
			for(int j = 0; j <= 98; ++j)
 8001120:	2300      	movs	r3, #0
 8001122:	64bb      	str	r3, [r7, #72]	; 0x48
 8001124:	e017      	b.n	8001156 <change_digit_2+0xda>
				screen[x+42253+i*480+j] = one_picture_2[k++];
 8001126:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001128:	1c4b      	adds	r3, r1, #1
 800112a:	65bb      	str	r3, [r7, #88]	; 0x58
 800112c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800112e:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001132:	441a      	add	r2, r3
 8001134:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001136:	4603      	mov	r3, r0
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	1a1b      	subs	r3, r3, r0
 800113c:	015b      	lsls	r3, r3, #5
 800113e:	441a      	add	r2, r3
 8001140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001142:	4413      	add	r3, r2
 8001144:	4a8d      	ldr	r2, [pc, #564]	; (800137c <change_digit_2+0x300>)
 8001146:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800114a:	4a8b      	ldr	r2, [pc, #556]	; (8001378 <change_digit_2+0x2fc>)
 800114c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001152:	3301      	adds	r3, #1
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
 8001156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001158:	2b62      	cmp	r3, #98	; 0x62
 800115a:	dde4      	ble.n	8001126 <change_digit_2+0xaa>
		for(int i = 0; i <= 173; ++i)
 800115c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800115e:	3301      	adds	r3, #1
 8001160:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001164:	2bad      	cmp	r3, #173	; 0xad
 8001166:	dddb      	ble.n	8001120 <change_digit_2+0xa4>
	if(number==2)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d126      	bne.n	80011bc <change_digit_2+0x140>
		for(int i = 0; i <= 173; ++i)
 800116e:	2300      	movs	r3, #0
 8001170:	647b      	str	r3, [r7, #68]	; 0x44
 8001172:	e020      	b.n	80011b6 <change_digit_2+0x13a>
			for(int j = 0; j <= 98; ++j)
 8001174:	2300      	movs	r3, #0
 8001176:	643b      	str	r3, [r7, #64]	; 0x40
 8001178:	e017      	b.n	80011aa <change_digit_2+0x12e>
				screen[x+42253+i*480+j] = two_picture_2[k++];
 800117a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800117c:	1c4b      	adds	r3, r1, #1
 800117e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001182:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001186:	441a      	add	r2, r3
 8001188:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800118a:	4603      	mov	r3, r0
 800118c:	011b      	lsls	r3, r3, #4
 800118e:	1a1b      	subs	r3, r3, r0
 8001190:	015b      	lsls	r3, r3, #5
 8001192:	441a      	add	r2, r3
 8001194:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001196:	4413      	add	r3, r2
 8001198:	4a79      	ldr	r2, [pc, #484]	; (8001380 <change_digit_2+0x304>)
 800119a:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800119e:	4a76      	ldr	r2, [pc, #472]	; (8001378 <change_digit_2+0x2fc>)
 80011a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80011a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011a6:	3301      	adds	r3, #1
 80011a8:	643b      	str	r3, [r7, #64]	; 0x40
 80011aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011ac:	2b62      	cmp	r3, #98	; 0x62
 80011ae:	dde4      	ble.n	800117a <change_digit_2+0xfe>
		for(int i = 0; i <= 173; ++i)
 80011b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b2:	3301      	adds	r3, #1
 80011b4:	647b      	str	r3, [r7, #68]	; 0x44
 80011b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80011b8:	2bad      	cmp	r3, #173	; 0xad
 80011ba:	dddb      	ble.n	8001174 <change_digit_2+0xf8>
	if(number==3)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d126      	bne.n	8001210 <change_digit_2+0x194>
		for(int i = 0; i <= 173; ++i)
 80011c2:	2300      	movs	r3, #0
 80011c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80011c6:	e020      	b.n	800120a <change_digit_2+0x18e>
			for(int j = 0; j <= 98; ++j)
 80011c8:	2300      	movs	r3, #0
 80011ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80011cc:	e017      	b.n	80011fe <change_digit_2+0x182>
				screen[x+42253+i*480+j] = three_picture_2[k++];
 80011ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80011d0:	1c4b      	adds	r3, r1, #1
 80011d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80011d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011d6:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80011da:	441a      	add	r2, r3
 80011dc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80011de:	4603      	mov	r3, r0
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	1a1b      	subs	r3, r3, r0
 80011e4:	015b      	lsls	r3, r3, #5
 80011e6:	441a      	add	r2, r3
 80011e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011ea:	4413      	add	r3, r2
 80011ec:	4a65      	ldr	r2, [pc, #404]	; (8001384 <change_digit_2+0x308>)
 80011ee:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80011f2:	4a61      	ldr	r2, [pc, #388]	; (8001378 <change_digit_2+0x2fc>)
 80011f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80011f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011fa:	3301      	adds	r3, #1
 80011fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80011fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001200:	2b62      	cmp	r3, #98	; 0x62
 8001202:	dde4      	ble.n	80011ce <change_digit_2+0x152>
		for(int i = 0; i <= 173; ++i)
 8001204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001206:	3301      	adds	r3, #1
 8001208:	63fb      	str	r3, [r7, #60]	; 0x3c
 800120a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800120c:	2bad      	cmp	r3, #173	; 0xad
 800120e:	dddb      	ble.n	80011c8 <change_digit_2+0x14c>
	if(number==4)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2b04      	cmp	r3, #4
 8001214:	d126      	bne.n	8001264 <change_digit_2+0x1e8>
		for(int i = 0; i <= 173; ++i)
 8001216:	2300      	movs	r3, #0
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
 800121a:	e020      	b.n	800125e <change_digit_2+0x1e2>
			for(int j = 0; j <= 98; ++j)
 800121c:	2300      	movs	r3, #0
 800121e:	633b      	str	r3, [r7, #48]	; 0x30
 8001220:	e017      	b.n	8001252 <change_digit_2+0x1d6>
				screen[x+42253+i*480+j] = four_picture_2[k++];
 8001222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001224:	1c4b      	adds	r3, r1, #1
 8001226:	65bb      	str	r3, [r7, #88]	; 0x58
 8001228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800122a:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800122e:	441a      	add	r2, r3
 8001230:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001232:	4603      	mov	r3, r0
 8001234:	011b      	lsls	r3, r3, #4
 8001236:	1a1b      	subs	r3, r3, r0
 8001238:	015b      	lsls	r3, r3, #5
 800123a:	441a      	add	r2, r3
 800123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123e:	4413      	add	r3, r2
 8001240:	4a51      	ldr	r2, [pc, #324]	; (8001388 <change_digit_2+0x30c>)
 8001242:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001246:	4a4c      	ldr	r2, [pc, #304]	; (8001378 <change_digit_2+0x2fc>)
 8001248:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 800124c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800124e:	3301      	adds	r3, #1
 8001250:	633b      	str	r3, [r7, #48]	; 0x30
 8001252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001254:	2b62      	cmp	r3, #98	; 0x62
 8001256:	dde4      	ble.n	8001222 <change_digit_2+0x1a6>
		for(int i = 0; i <= 173; ++i)
 8001258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800125a:	3301      	adds	r3, #1
 800125c:	637b      	str	r3, [r7, #52]	; 0x34
 800125e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001260:	2bad      	cmp	r3, #173	; 0xad
 8001262:	dddb      	ble.n	800121c <change_digit_2+0x1a0>
	if(number==5)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b05      	cmp	r3, #5
 8001268:	d126      	bne.n	80012b8 <change_digit_2+0x23c>
		for(int i = 0; i <= 173; ++i)
 800126a:	2300      	movs	r3, #0
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800126e:	e020      	b.n	80012b2 <change_digit_2+0x236>
			for(int j = 0; j <= 98; ++j)
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
 8001274:	e017      	b.n	80012a6 <change_digit_2+0x22a>
				screen[x+42253+i*480+j] = five_picture_2[k++];
 8001276:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001278:	1c4b      	adds	r3, r1, #1
 800127a:	65bb      	str	r3, [r7, #88]	; 0x58
 800127c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800127e:	f24a 520d 	movw	r2, #42253	; 0xa50d
 8001282:	441a      	add	r2, r3
 8001284:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001286:	4603      	mov	r3, r0
 8001288:	011b      	lsls	r3, r3, #4
 800128a:	1a1b      	subs	r3, r3, r0
 800128c:	015b      	lsls	r3, r3, #5
 800128e:	441a      	add	r2, r3
 8001290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001292:	4413      	add	r3, r2
 8001294:	4a3d      	ldr	r2, [pc, #244]	; (800138c <change_digit_2+0x310>)
 8001296:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 800129a:	4a37      	ldr	r2, [pc, #220]	; (8001378 <change_digit_2+0x2fc>)
 800129c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80012a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a2:	3301      	adds	r3, #1
 80012a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80012a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a8:	2b62      	cmp	r3, #98	; 0x62
 80012aa:	dde4      	ble.n	8001276 <change_digit_2+0x1fa>
		for(int i = 0; i <= 173; ++i)
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	3301      	adds	r3, #1
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b4:	2bad      	cmp	r3, #173	; 0xad
 80012b6:	dddb      	ble.n	8001270 <change_digit_2+0x1f4>
	if(number==6)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b06      	cmp	r3, #6
 80012bc:	d126      	bne.n	800130c <change_digit_2+0x290>
		for(int i = 0; i <= 173; ++i)
 80012be:	2300      	movs	r3, #0
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
 80012c2:	e020      	b.n	8001306 <change_digit_2+0x28a>
			for(int j = 0; j <= 98; ++j)
 80012c4:	2300      	movs	r3, #0
 80012c6:	623b      	str	r3, [r7, #32]
 80012c8:	e017      	b.n	80012fa <change_digit_2+0x27e>
				screen[x+42253+i*480+j] = six_picture_2[k++];
 80012ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80012cc:	1c4b      	adds	r3, r1, #1
 80012ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80012d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d2:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80012d6:	441a      	add	r2, r3
 80012d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012da:	4603      	mov	r3, r0
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	1a1b      	subs	r3, r3, r0
 80012e0:	015b      	lsls	r3, r3, #5
 80012e2:	441a      	add	r2, r3
 80012e4:	6a3b      	ldr	r3, [r7, #32]
 80012e6:	4413      	add	r3, r2
 80012e8:	4a29      	ldr	r2, [pc, #164]	; (8001390 <change_digit_2+0x314>)
 80012ea:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80012ee:	4a22      	ldr	r2, [pc, #136]	; (8001378 <change_digit_2+0x2fc>)
 80012f0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80012f4:	6a3b      	ldr	r3, [r7, #32]
 80012f6:	3301      	adds	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	6a3b      	ldr	r3, [r7, #32]
 80012fc:	2b62      	cmp	r3, #98	; 0x62
 80012fe:	dde4      	ble.n	80012ca <change_digit_2+0x24e>
		for(int i = 0; i <= 173; ++i)
 8001300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001302:	3301      	adds	r3, #1
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001308:	2bad      	cmp	r3, #173	; 0xad
 800130a:	dddb      	ble.n	80012c4 <change_digit_2+0x248>
	if(number==7)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b07      	cmp	r3, #7
 8001310:	d126      	bne.n	8001360 <change_digit_2+0x2e4>
		for(int i = 0; i <= 173; ++i)
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	e020      	b.n	800135a <change_digit_2+0x2de>
			for(int j = 0; j <= 98; ++j)
 8001318:	2300      	movs	r3, #0
 800131a:	61bb      	str	r3, [r7, #24]
 800131c:	e017      	b.n	800134e <change_digit_2+0x2d2>
				screen[x+42253+i*480+j] = seven_picture_2[k++];
 800131e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001320:	1c4b      	adds	r3, r1, #1
 8001322:	65bb      	str	r3, [r7, #88]	; 0x58
 8001324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001326:	f24a 520d 	movw	r2, #42253	; 0xa50d
 800132a:	441a      	add	r2, r3
 800132c:	69f8      	ldr	r0, [r7, #28]
 800132e:	4603      	mov	r3, r0
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	1a1b      	subs	r3, r3, r0
 8001334:	015b      	lsls	r3, r3, #5
 8001336:	441a      	add	r2, r3
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	4413      	add	r3, r2
 800133c:	4a15      	ldr	r2, [pc, #84]	; (8001394 <change_digit_2+0x318>)
 800133e:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001342:	4a0d      	ldr	r2, [pc, #52]	; (8001378 <change_digit_2+0x2fc>)
 8001344:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	3301      	adds	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b62      	cmp	r3, #98	; 0x62
 8001352:	dde4      	ble.n	800131e <change_digit_2+0x2a2>
		for(int i = 0; i <= 173; ++i)
 8001354:	69fb      	ldr	r3, [r7, #28]
 8001356:	3301      	adds	r3, #1
 8001358:	61fb      	str	r3, [r7, #28]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2bad      	cmp	r3, #173	; 0xad
 800135e:	dddb      	ble.n	8001318 <change_digit_2+0x29c>
	if(number==8)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2b08      	cmp	r3, #8
 8001364:	d139      	bne.n	80013da <change_digit_2+0x35e>
		for(int i = 0; i <= 173; ++i)
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	e033      	b.n	80013d4 <change_digit_2+0x358>
			for(int j = 0; j <= 98; ++j)
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	e02a      	b.n	80013c8 <change_digit_2+0x34c>
 8001372:	bf00      	nop
 8001374:	0804eee8 	.word	0x0804eee8
 8001378:	20000020 	.word	0x20000020
 800137c:	08024e04 	.word	0x08024e04
 8001380:	08046854 	.word	0x08046854
 8001384:	0803e1c0 	.word	0x0803e1c0
 8001388:	080140dc 	.word	0x080140dc
 800138c:	0800ba48 	.word	0x0800ba48
 8001390:	08035b2c 	.word	0x08035b2c
 8001394:	0802d498 	.word	0x0802d498
				screen[x+42253+i*480+j] = eigth_picture_2[k++];
 8001398:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800139a:	1c4b      	adds	r3, r1, #1
 800139c:	65bb      	str	r3, [r7, #88]	; 0x58
 800139e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013a0:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80013a4:	441a      	add	r2, r3
 80013a6:	6978      	ldr	r0, [r7, #20]
 80013a8:	4603      	mov	r3, r0
 80013aa:	011b      	lsls	r3, r3, #4
 80013ac:	1a1b      	subs	r3, r3, r0
 80013ae:	015b      	lsls	r3, r3, #5
 80013b0:	441a      	add	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4413      	add	r3, r2
 80013b6:	4a24      	ldr	r2, [pc, #144]	; (8001448 <change_digit_2+0x3cc>)
 80013b8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 80013bc:	4a23      	ldr	r2, [pc, #140]	; (800144c <change_digit_2+0x3d0>)
 80013be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	3301      	adds	r3, #1
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	2b62      	cmp	r3, #98	; 0x62
 80013cc:	dde4      	ble.n	8001398 <change_digit_2+0x31c>
		for(int i = 0; i <= 173; ++i)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2bad      	cmp	r3, #173	; 0xad
 80013d8:	ddc8      	ble.n	800136c <change_digit_2+0x2f0>
	if(number==9)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2b09      	cmp	r3, #9
 80013de:	d126      	bne.n	800142e <change_digit_2+0x3b2>
		for(int i = 0; i <= 173; ++i)
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	e020      	b.n	8001428 <change_digit_2+0x3ac>
			for(int j = 0; j <= 98; ++j)
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	e017      	b.n	800141c <change_digit_2+0x3a0>
				screen[x+42253+i*480+j] = nine_picture_2[k++];
 80013ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80013ee:	1c4b      	adds	r3, r1, #1
 80013f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80013f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f4:	f24a 520d 	movw	r2, #42253	; 0xa50d
 80013f8:	441a      	add	r2, r3
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	4603      	mov	r3, r0
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	1a1b      	subs	r3, r3, r0
 8001402:	015b      	lsls	r3, r3, #5
 8001404:	441a      	add	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	4413      	add	r3, r2
 800140a:	4a11      	ldr	r2, [pc, #68]	; (8001450 <change_digit_2+0x3d4>)
 800140c:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8001410:	4a0e      	ldr	r2, [pc, #56]	; (800144c <change_digit_2+0x3d0>)
 8001412:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 98; ++j)
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	3301      	adds	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	2b62      	cmp	r3, #98	; 0x62
 8001420:	dde4      	ble.n	80013ec <change_digit_2+0x370>
		for(int i = 0; i <= 173; ++i)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2bad      	cmp	r3, #173	; 0xad
 800142c:	dddb      	ble.n	80013e6 <change_digit_2+0x36a>
	LTDC_Layer2->CFBAR = (uint32_t)screen;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <change_digit_2+0x3d8>)
 8001430:	4a06      	ldr	r2, [pc, #24]	; (800144c <change_digit_2+0x3d0>)
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8001434:	4b08      	ldr	r3, [pc, #32]	; (8001458 <change_digit_2+0x3dc>)
 8001436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001438:	4a07      	ldr	r2, [pc, #28]	; (8001458 <change_digit_2+0x3dc>)
 800143a:	f043 0302 	orr.w	r3, r3, #2
 800143e:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001440:	bf00      	nop
 8001442:	3760      	adds	r7, #96	; 0x60
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	0805757c 	.word	0x0805757c
 800144c:	20000020 	.word	0x20000020
 8001450:	0801c770 	.word	0x0801c770
 8001454:	40016904 	.word	0x40016904
 8001458:	40016800 	.word	0x40016800

0800145c <change_digit_3>:

void change_digit_3(int number)
{
 800145c:	b480      	push	{r7}
 800145e:	b0c7      	sub	sp, #284	; 0x11c
 8001460:	af00      	add	r7, sp, #0
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	6018      	str	r0, [r3, #0]
	int k = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

	if(number==0)
 800146c:	1d3b      	adds	r3, r7, #4
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	f040 809c 	bne.w	80015ae <change_digit_3+0x152>
	{
		for(int i = 0; i <= 57; ++i)
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800147c:	e029      	b.n	80014d2 <change_digit_3+0x76>
			for(int j = 0; j <= 32; ++j)
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001484:	e01c      	b.n	80014c0 <change_digit_3+0x64>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001486:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800148a:	1c53      	adds	r3, r2, #1
 800148c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001490:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8001494:	460b      	mov	r3, r1
 8001496:	011b      	lsls	r3, r3, #4
 8001498:	1a5b      	subs	r3, r3, r1
 800149a:	015b      	lsls	r3, r3, #5
 800149c:	4619      	mov	r1, r3
 800149e:	f241 3349 	movw	r3, #4937	; 0x1349
 80014a2:	440b      	add	r3, r1
 80014a4:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80014a8:	440b      	add	r3, r1
 80014aa:	49cd      	ldr	r1, [pc, #820]	; (80017e0 <change_digit_3+0x384>)
 80014ac:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80014b0:	4acc      	ldr	r2, [pc, #816]	; (80017e4 <change_digit_3+0x388>)
 80014b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80014b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014ba:	3301      	adds	r3, #1
 80014bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80014c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80014c4:	2b20      	cmp	r3, #32
 80014c6:	ddde      	ble.n	8001486 <change_digit_3+0x2a>
		for(int i = 0; i <= 57; ++i)
 80014c8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014cc:	3301      	adds	r3, #1
 80014ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80014d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80014d6:	2b39      	cmp	r3, #57	; 0x39
 80014d8:	ddd1      	ble.n	800147e <change_digit_3+0x22>
		k = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80014e0:	2300      	movs	r3, #0
 80014e2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80014e6:	e029      	b.n	800153c <change_digit_3+0xe0>
			for(int j = 0; j <= 32; ++j)
 80014e8:	2300      	movs	r3, #0
 80014ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80014ee:	e01c      	b.n	800152a <change_digit_3+0xce>
				screen[38+4861+i*480+j] = none_picture_3[k++];
 80014f0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014f4:	1c53      	adds	r3, r2, #1
 80014f6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80014fa:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80014fe:	460b      	mov	r3, r1
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	1a5b      	subs	r3, r3, r1
 8001504:	015b      	lsls	r3, r3, #5
 8001506:	4619      	mov	r1, r3
 8001508:	f241 3323 	movw	r3, #4899	; 0x1323
 800150c:	440b      	add	r3, r1
 800150e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8001512:	440b      	add	r3, r1
 8001514:	49b4      	ldr	r1, [pc, #720]	; (80017e8 <change_digit_3+0x38c>)
 8001516:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800151a:	4ab2      	ldr	r2, [pc, #712]	; (80017e4 <change_digit_3+0x388>)
 800151c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001524:	3301      	adds	r3, #1
 8001526:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800152a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800152e:	2b20      	cmp	r3, #32
 8001530:	ddde      	ble.n	80014f0 <change_digit_3+0x94>
		for(int i = 0; i <= 57; ++i)
 8001532:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001536:	3301      	adds	r3, #1
 8001538:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800153c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001540:	2b39      	cmp	r3, #57	; 0x39
 8001542:	ddd1      	ble.n	80014e8 <change_digit_3+0x8c>
		k = 0;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800154a:	2300      	movs	r3, #0
 800154c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001550:	e029      	b.n	80015a6 <change_digit_3+0x14a>
			for(int j = 0; j <= 32; ++j)
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001558:	e01c      	b.n	8001594 <change_digit_3+0x138>
				screen[4861+i*480+j] = none_picture_3[k++];
 800155a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800155e:	1c53      	adds	r3, r2, #1
 8001560:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001564:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001568:	460b      	mov	r3, r1
 800156a:	011b      	lsls	r3, r3, #4
 800156c:	1a5b      	subs	r3, r3, r1
 800156e:	015b      	lsls	r3, r3, #5
 8001570:	4619      	mov	r1, r3
 8001572:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001576:	440b      	add	r3, r1
 8001578:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800157c:	440b      	add	r3, r1
 800157e:	499a      	ldr	r1, [pc, #616]	; (80017e8 <change_digit_3+0x38c>)
 8001580:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001584:	4a97      	ldr	r2, [pc, #604]	; (80017e4 <change_digit_3+0x388>)
 8001586:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800158a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800158e:	3301      	adds	r3, #1
 8001590:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001594:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001598:	2b20      	cmp	r3, #32
 800159a:	ddde      	ble.n	800155a <change_digit_3+0xfe>
		for(int i = 0; i <= 57; ++i)
 800159c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80015a0:	3301      	adds	r3, #1
 80015a2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80015aa:	2b39      	cmp	r3, #57	; 0x39
 80015ac:	ddd1      	ble.n	8001552 <change_digit_3+0xf6>
	}

	if(number==10)
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b0a      	cmp	r3, #10
 80015b4:	f040 809c 	bne.w	80016f0 <change_digit_3+0x294>
	{
		for(int i = 0; i <= 57; ++i)
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80015be:	e029      	b.n	8001614 <change_digit_3+0x1b8>
			for(int j = 0; j <= 32; ++j)
 80015c0:	2300      	movs	r3, #0
 80015c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80015c6:	e01c      	b.n	8001602 <change_digit_3+0x1a6>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80015c8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015cc:	1c53      	adds	r3, r2, #1
 80015ce:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80015d2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80015d6:	460b      	mov	r3, r1
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	1a5b      	subs	r3, r3, r1
 80015dc:	015b      	lsls	r3, r3, #5
 80015de:	4619      	mov	r1, r3
 80015e0:	f241 3349 	movw	r3, #4937	; 0x1349
 80015e4:	440b      	add	r3, r1
 80015e6:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80015ea:	440b      	add	r3, r1
 80015ec:	497c      	ldr	r1, [pc, #496]	; (80017e0 <change_digit_3+0x384>)
 80015ee:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80015f2:	4a7c      	ldr	r2, [pc, #496]	; (80017e4 <change_digit_3+0x388>)
 80015f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80015f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80015fc:	3301      	adds	r3, #1
 80015fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001606:	2b20      	cmp	r3, #32
 8001608:	ddde      	ble.n	80015c8 <change_digit_3+0x16c>
		for(int i = 0; i <= 57; ++i)
 800160a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800160e:	3301      	adds	r3, #1
 8001610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001614:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001618:	2b39      	cmp	r3, #57	; 0x39
 800161a:	ddd1      	ble.n	80015c0 <change_digit_3+0x164>
		k = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001628:	e029      	b.n	800167e <change_digit_3+0x222>
			for(int j = 0; j <= 32; ++j)
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001630:	e01c      	b.n	800166c <change_digit_3+0x210>
				screen[38+4861+i*480+j] = one_picture_3[k++];
 8001632:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001636:	1c53      	adds	r3, r2, #1
 8001638:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800163c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001640:	460b      	mov	r3, r1
 8001642:	011b      	lsls	r3, r3, #4
 8001644:	1a5b      	subs	r3, r3, r1
 8001646:	015b      	lsls	r3, r3, #5
 8001648:	4619      	mov	r1, r3
 800164a:	f241 3323 	movw	r3, #4899	; 0x1323
 800164e:	440b      	add	r3, r1
 8001650:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8001654:	440b      	add	r3, r1
 8001656:	4965      	ldr	r1, [pc, #404]	; (80017ec <change_digit_3+0x390>)
 8001658:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800165c:	4a61      	ldr	r2, [pc, #388]	; (80017e4 <change_digit_3+0x388>)
 800165e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001662:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001666:	3301      	adds	r3, #1
 8001668:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800166c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001670:	2b20      	cmp	r3, #32
 8001672:	ddde      	ble.n	8001632 <change_digit_3+0x1d6>
		for(int i = 0; i <= 57; ++i)
 8001674:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001678:	3301      	adds	r3, #1
 800167a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800167e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001682:	2b39      	cmp	r3, #57	; 0x39
 8001684:	ddd1      	ble.n	800162a <change_digit_3+0x1ce>
		k = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 800168c:	2300      	movs	r3, #0
 800168e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001692:	e029      	b.n	80016e8 <change_digit_3+0x28c>
			for(int j = 0; j <= 32; ++j)
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800169a:	e01c      	b.n	80016d6 <change_digit_3+0x27a>
				screen[4861+i*480+j] = none_picture_3[k++];
 800169c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80016a0:	1c53      	adds	r3, r2, #1
 80016a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80016a6:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80016aa:	460b      	mov	r3, r1
 80016ac:	011b      	lsls	r3, r3, #4
 80016ae:	1a5b      	subs	r3, r3, r1
 80016b0:	015b      	lsls	r3, r3, #5
 80016b2:	4619      	mov	r1, r3
 80016b4:	f241 23fd 	movw	r3, #4861	; 0x12fd
 80016b8:	440b      	add	r3, r1
 80016ba:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80016be:	440b      	add	r3, r1
 80016c0:	4949      	ldr	r1, [pc, #292]	; (80017e8 <change_digit_3+0x38c>)
 80016c2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80016c6:	4a47      	ldr	r2, [pc, #284]	; (80017e4 <change_digit_3+0x388>)
 80016c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80016cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016d0:	3301      	adds	r3, #1
 80016d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80016d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80016da:	2b20      	cmp	r3, #32
 80016dc:	ddde      	ble.n	800169c <change_digit_3+0x240>
		for(int i = 0; i <= 57; ++i)
 80016de:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016e2:	3301      	adds	r3, #1
 80016e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80016e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80016ec:	2b39      	cmp	r3, #57	; 0x39
 80016ee:	ddd1      	ble.n	8001694 <change_digit_3+0x238>
	}

	if(number==20)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b14      	cmp	r3, #20
 80016f6:	f040 80a7 	bne.w	8001848 <change_digit_3+0x3ec>
	{
		for(int i = 0; i <= 57; ++i)
 80016fa:	2300      	movs	r3, #0
 80016fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001700:	e029      	b.n	8001756 <change_digit_3+0x2fa>
			for(int j = 0; j <= 32; ++j)
 8001702:	2300      	movs	r3, #0
 8001704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001708:	e01c      	b.n	8001744 <change_digit_3+0x2e8>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 800170a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800170e:	1c53      	adds	r3, r2, #1
 8001710:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001714:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8001718:	460b      	mov	r3, r1
 800171a:	011b      	lsls	r3, r3, #4
 800171c:	1a5b      	subs	r3, r3, r1
 800171e:	015b      	lsls	r3, r3, #5
 8001720:	4619      	mov	r1, r3
 8001722:	f241 3349 	movw	r3, #4937	; 0x1349
 8001726:	440b      	add	r3, r1
 8001728:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800172c:	440b      	add	r3, r1
 800172e:	492c      	ldr	r1, [pc, #176]	; (80017e0 <change_digit_3+0x384>)
 8001730:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001734:	4a2b      	ldr	r2, [pc, #172]	; (80017e4 <change_digit_3+0x388>)
 8001736:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800173a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800173e:	3301      	adds	r3, #1
 8001740:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001744:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001748:	2b20      	cmp	r3, #32
 800174a:	ddde      	ble.n	800170a <change_digit_3+0x2ae>
		for(int i = 0; i <= 57; ++i)
 800174c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001750:	3301      	adds	r3, #1
 8001752:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800175a:	2b39      	cmp	r3, #57	; 0x39
 800175c:	ddd1      	ble.n	8001702 <change_digit_3+0x2a6>
		k = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001764:	2300      	movs	r3, #0
 8001766:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800176a:	e029      	b.n	80017c0 <change_digit_3+0x364>
			for(int j = 0; j <= 32; ++j)
 800176c:	2300      	movs	r3, #0
 800176e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001772:	e01c      	b.n	80017ae <change_digit_3+0x352>
				screen[38+4861+i*480+j] = two_picture_3[k++];
 8001774:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001778:	1c53      	adds	r3, r2, #1
 800177a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800177e:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8001782:	460b      	mov	r3, r1
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	1a5b      	subs	r3, r3, r1
 8001788:	015b      	lsls	r3, r3, #5
 800178a:	4619      	mov	r1, r3
 800178c:	f241 3323 	movw	r3, #4899	; 0x1323
 8001790:	440b      	add	r3, r1
 8001792:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 8001796:	440b      	add	r3, r1
 8001798:	4915      	ldr	r1, [pc, #84]	; (80017f0 <change_digit_3+0x394>)
 800179a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800179e:	4a11      	ldr	r2, [pc, #68]	; (80017e4 <change_digit_3+0x388>)
 80017a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80017a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017a8:	3301      	adds	r3, #1
 80017aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80017ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80017b2:	2b20      	cmp	r3, #32
 80017b4:	ddde      	ble.n	8001774 <change_digit_3+0x318>
		for(int i = 0; i <= 57; ++i)
 80017b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017ba:	3301      	adds	r3, #1
 80017bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80017c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80017c4:	2b39      	cmp	r3, #57	; 0x39
 80017c6:	ddd1      	ble.n	800176c <change_digit_3+0x310>
		k = 0;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80017d4:	e034      	b.n	8001840 <change_digit_3+0x3e4>
			for(int j = 0; j <= 32; ++j)
 80017d6:	2300      	movs	r3, #0
 80017d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80017dc:	e027      	b.n	800182e <change_digit_3+0x3d2>
 80017de:	bf00      	nop
 80017e0:	080682a4 	.word	0x080682a4
 80017e4:	20000020 	.word	0x20000020
 80017e8:	080628ec 	.word	0x080628ec
 80017ec:	080637e0 	.word	0x080637e0
 80017f0:	080673b0 	.word	0x080673b0
				screen[4861+i*480+j] = none_picture_3[k++];
 80017f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80017f8:	1c53      	adds	r3, r2, #1
 80017fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80017fe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001802:	460b      	mov	r3, r1
 8001804:	011b      	lsls	r3, r3, #4
 8001806:	1a5b      	subs	r3, r3, r1
 8001808:	015b      	lsls	r3, r3, #5
 800180a:	4619      	mov	r1, r3
 800180c:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001810:	440b      	add	r3, r1
 8001812:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001816:	440b      	add	r3, r1
 8001818:	49cd      	ldr	r1, [pc, #820]	; (8001b50 <change_digit_3+0x6f4>)
 800181a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800181e:	4acd      	ldr	r2, [pc, #820]	; (8001b54 <change_digit_3+0x6f8>)
 8001820:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001824:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001828:	3301      	adds	r3, #1
 800182a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800182e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001832:	2b20      	cmp	r3, #32
 8001834:	ddde      	ble.n	80017f4 <change_digit_3+0x398>
		for(int i = 0; i <= 57; ++i)
 8001836:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800183a:	3301      	adds	r3, #1
 800183c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001840:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001844:	2b39      	cmp	r3, #57	; 0x39
 8001846:	ddc6      	ble.n	80017d6 <change_digit_3+0x37a>
	}

	if(number==30)
 8001848:	1d3b      	adds	r3, r7, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b1e      	cmp	r3, #30
 800184e:	f040 809c 	bne.w	800198a <change_digit_3+0x52e>
	{
		for(int i = 0; i <= 57; ++i)
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001858:	e029      	b.n	80018ae <change_digit_3+0x452>
			for(int j = 0; j <= 32; ++j)
 800185a:	2300      	movs	r3, #0
 800185c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001860:	e01c      	b.n	800189c <change_digit_3+0x440>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001862:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001866:	1c53      	adds	r3, r2, #1
 8001868:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800186c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001870:	460b      	mov	r3, r1
 8001872:	011b      	lsls	r3, r3, #4
 8001874:	1a5b      	subs	r3, r3, r1
 8001876:	015b      	lsls	r3, r3, #5
 8001878:	4619      	mov	r1, r3
 800187a:	f241 3349 	movw	r3, #4937	; 0x1349
 800187e:	440b      	add	r3, r1
 8001880:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001884:	440b      	add	r3, r1
 8001886:	49b4      	ldr	r1, [pc, #720]	; (8001b58 <change_digit_3+0x6fc>)
 8001888:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800188c:	4ab1      	ldr	r2, [pc, #708]	; (8001b54 <change_digit_3+0x6f8>)
 800188e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001896:	3301      	adds	r3, #1
 8001898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800189c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	ddde      	ble.n	8001862 <change_digit_3+0x406>
		for(int i = 0; i <= 57; ++i)
 80018a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018a8:	3301      	adds	r3, #1
 80018aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80018ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018b2:	2b39      	cmp	r3, #57	; 0x39
 80018b4:	ddd1      	ble.n	800185a <change_digit_3+0x3fe>
		k = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80018c2:	e029      	b.n	8001918 <change_digit_3+0x4bc>
			for(int j = 0; j <= 32; ++j)
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80018ca:	e01c      	b.n	8001906 <change_digit_3+0x4aa>
				screen[38+4861+i*480+j] = three_picture_3[k++];
 80018cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80018d0:	1c53      	adds	r3, r2, #1
 80018d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80018d6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80018da:	460b      	mov	r3, r1
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	1a5b      	subs	r3, r3, r1
 80018e0:	015b      	lsls	r3, r3, #5
 80018e2:	4619      	mov	r1, r3
 80018e4:	f241 3323 	movw	r3, #4899	; 0x1323
 80018e8:	440b      	add	r3, r1
 80018ea:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80018ee:	440b      	add	r3, r1
 80018f0:	499a      	ldr	r1, [pc, #616]	; (8001b5c <change_digit_3+0x700>)
 80018f2:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80018f6:	4a97      	ldr	r2, [pc, #604]	; (8001b54 <change_digit_3+0x6f8>)
 80018f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80018fc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001900:	3301      	adds	r3, #1
 8001902:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001906:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800190a:	2b20      	cmp	r3, #32
 800190c:	ddde      	ble.n	80018cc <change_digit_3+0x470>
		for(int i = 0; i <= 57; ++i)
 800190e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001912:	3301      	adds	r3, #1
 8001914:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001918:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800191c:	2b39      	cmp	r3, #57	; 0x39
 800191e:	ddd1      	ble.n	80018c4 <change_digit_3+0x468>
		k = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800192c:	e029      	b.n	8001982 <change_digit_3+0x526>
			for(int j = 0; j <= 32; ++j)
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001934:	e01c      	b.n	8001970 <change_digit_3+0x514>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001936:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800193a:	1c53      	adds	r3, r2, #1
 800193c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001940:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001944:	460b      	mov	r3, r1
 8001946:	011b      	lsls	r3, r3, #4
 8001948:	1a5b      	subs	r3, r3, r1
 800194a:	015b      	lsls	r3, r3, #5
 800194c:	4619      	mov	r1, r3
 800194e:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001952:	440b      	add	r3, r1
 8001954:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8001958:	440b      	add	r3, r1
 800195a:	497d      	ldr	r1, [pc, #500]	; (8001b50 <change_digit_3+0x6f4>)
 800195c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001960:	4a7c      	ldr	r2, [pc, #496]	; (8001b54 <change_digit_3+0x6f8>)
 8001962:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001966:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800196a:	3301      	adds	r3, #1
 800196c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001970:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001974:	2b20      	cmp	r3, #32
 8001976:	ddde      	ble.n	8001936 <change_digit_3+0x4da>
		for(int i = 0; i <= 57; ++i)
 8001978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800197c:	3301      	adds	r3, #1
 800197e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001986:	2b39      	cmp	r3, #57	; 0x39
 8001988:	ddd1      	ble.n	800192e <change_digit_3+0x4d2>
	}

	if(number==40)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2b28      	cmp	r3, #40	; 0x28
 8001990:	f040 809c 	bne.w	8001acc <change_digit_3+0x670>
	{
		for(int i = 0; i <= 57; ++i)
 8001994:	2300      	movs	r3, #0
 8001996:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800199a:	e029      	b.n	80019f0 <change_digit_3+0x594>
			for(int j = 0; j <= 32; ++j)
 800199c:	2300      	movs	r3, #0
 800199e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019a2:	e01c      	b.n	80019de <change_digit_3+0x582>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 80019a4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80019a8:	1c53      	adds	r3, r2, #1
 80019aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80019ae:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80019b2:	460b      	mov	r3, r1
 80019b4:	011b      	lsls	r3, r3, #4
 80019b6:	1a5b      	subs	r3, r3, r1
 80019b8:	015b      	lsls	r3, r3, #5
 80019ba:	4619      	mov	r1, r3
 80019bc:	f241 3349 	movw	r3, #4937	; 0x1349
 80019c0:	440b      	add	r3, r1
 80019c2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80019c6:	440b      	add	r3, r1
 80019c8:	4963      	ldr	r1, [pc, #396]	; (8001b58 <change_digit_3+0x6fc>)
 80019ca:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80019ce:	4a61      	ldr	r2, [pc, #388]	; (8001b54 <change_digit_3+0x6f8>)
 80019d0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 80019d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019d8:	3301      	adds	r3, #1
 80019da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80019de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019e2:	2b20      	cmp	r3, #32
 80019e4:	ddde      	ble.n	80019a4 <change_digit_3+0x548>
		for(int i = 0; i <= 57; ++i)
 80019e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019ea:	3301      	adds	r3, #1
 80019ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80019f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019f4:	2b39      	cmp	r3, #57	; 0x39
 80019f6:	ddd1      	ble.n	800199c <change_digit_3+0x540>
		k = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80019fe:	2300      	movs	r3, #0
 8001a00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a04:	e029      	b.n	8001a5a <change_digit_3+0x5fe>
			for(int j = 0; j <= 32; ++j)
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a0c:	e01c      	b.n	8001a48 <change_digit_3+0x5ec>
				screen[38+4861+i*480+j] = four_picture_3[k++];
 8001a0e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a12:	1c53      	adds	r3, r2, #1
 8001a14:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a18:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	1a5b      	subs	r3, r3, r1
 8001a22:	015b      	lsls	r3, r3, #5
 8001a24:	4619      	mov	r1, r3
 8001a26:	f241 3323 	movw	r3, #4899	; 0x1323
 8001a2a:	440b      	add	r3, r1
 8001a2c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001a30:	440b      	add	r3, r1
 8001a32:	494b      	ldr	r1, [pc, #300]	; (8001b60 <change_digit_3+0x704>)
 8001a34:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001a38:	4a46      	ldr	r2, [pc, #280]	; (8001b54 <change_digit_3+0x6f8>)
 8001a3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001a3e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a42:	3301      	adds	r3, #1
 8001a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a4c:	2b20      	cmp	r3, #32
 8001a4e:	ddde      	ble.n	8001a0e <change_digit_3+0x5b2>
		for(int i = 0; i <= 57; ++i)
 8001a50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a54:	3301      	adds	r3, #1
 8001a56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001a5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a5e:	2b39      	cmp	r3, #57	; 0x39
 8001a60:	ddd1      	ble.n	8001a06 <change_digit_3+0x5aa>
		k = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001a68:	2300      	movs	r3, #0
 8001a6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a6e:	e029      	b.n	8001ac4 <change_digit_3+0x668>
			for(int j = 0; j <= 32; ++j)
 8001a70:	2300      	movs	r3, #0
 8001a72:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001a76:	e01c      	b.n	8001ab2 <change_digit_3+0x656>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001a78:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001a7c:	1c53      	adds	r3, r2, #1
 8001a7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001a82:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8001a86:	460b      	mov	r3, r1
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	1a5b      	subs	r3, r3, r1
 8001a8c:	015b      	lsls	r3, r3, #5
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001a94:	440b      	add	r3, r1
 8001a96:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001a9a:	440b      	add	r3, r1
 8001a9c:	492c      	ldr	r1, [pc, #176]	; (8001b50 <change_digit_3+0x6f4>)
 8001a9e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001aa2:	4a2c      	ldr	r2, [pc, #176]	; (8001b54 <change_digit_3+0x6f8>)
 8001aa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001aa8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aac:	3301      	adds	r3, #1
 8001aae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ab2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	ddde      	ble.n	8001a78 <change_digit_3+0x61c>
		for(int i = 0; i <= 57; ++i)
 8001aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001abe:	3301      	adds	r3, #1
 8001ac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ac4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ac8:	2b39      	cmp	r3, #57	; 0x39
 8001aca:	ddd1      	ble.n	8001a70 <change_digit_3+0x614>
	}

	if(number==50)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b32      	cmp	r3, #50	; 0x32
 8001ad2:	f040 80a6 	bne.w	8001c22 <change_digit_3+0x7c6>
	{
		for(int i = 0; i <= 57; ++i)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001adc:	e029      	b.n	8001b32 <change_digit_3+0x6d6>
			for(int j = 0; j <= 32; ++j)
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001ae4:	e01c      	b.n	8001b20 <change_digit_3+0x6c4>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001ae6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001aea:	1c53      	adds	r3, r2, #1
 8001aec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001af0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8001af4:	460b      	mov	r3, r1
 8001af6:	011b      	lsls	r3, r3, #4
 8001af8:	1a5b      	subs	r3, r3, r1
 8001afa:	015b      	lsls	r3, r3, #5
 8001afc:	4619      	mov	r1, r3
 8001afe:	f241 3349 	movw	r3, #4937	; 0x1349
 8001b02:	440b      	add	r3, r1
 8001b04:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001b08:	440b      	add	r3, r1
 8001b0a:	4913      	ldr	r1, [pc, #76]	; (8001b58 <change_digit_3+0x6fc>)
 8001b0c:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b10:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <change_digit_3+0x6f8>)
 8001b12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001b20:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b24:	2b20      	cmp	r3, #32
 8001b26:	ddde      	ble.n	8001ae6 <change_digit_3+0x68a>
		for(int i = 0; i <= 57; ++i)
 8001b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b36:	2b39      	cmp	r3, #57	; 0x39
 8001b38:	ddd1      	ble.n	8001ade <change_digit_3+0x682>
		k = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001b40:	2300      	movs	r3, #0
 8001b42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001b46:	e033      	b.n	8001bb0 <change_digit_3+0x754>
			for(int j = 0; j <= 32; ++j)
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b4e:	e026      	b.n	8001b9e <change_digit_3+0x742>
 8001b50:	080628ec 	.word	0x080628ec
 8001b54:	20000020 	.word	0x20000020
 8001b58:	080682a4 	.word	0x080682a4
 8001b5c:	080664bc 	.word	0x080664bc
 8001b60:	08060b04 	.word	0x08060b04
				screen[38+4861+i*480+j] = five_picture_3[k++];
 8001b64:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001b68:	1c53      	adds	r3, r2, #1
 8001b6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8001b72:	460b      	mov	r3, r1
 8001b74:	011b      	lsls	r3, r3, #4
 8001b76:	1a5b      	subs	r3, r3, r1
 8001b78:	015b      	lsls	r3, r3, #5
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f241 3323 	movw	r3, #4899	; 0x1323
 8001b80:	440b      	add	r3, r1
 8001b82:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8001b86:	440b      	add	r3, r1
 8001b88:	49b0      	ldr	r1, [pc, #704]	; (8001e4c <change_digit_3+0x9f0>)
 8001b8a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001b8e:	4ab0      	ldr	r2, [pc, #704]	; (8001e50 <change_digit_3+0x9f4>)
 8001b90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	ddde      	ble.n	8001b64 <change_digit_3+0x708>
		for(int i = 0; i <= 57; ++i)
 8001ba6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001baa:	3301      	adds	r3, #1
 8001bac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001bb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bb4:	2b39      	cmp	r3, #57	; 0x39
 8001bb6:	ddc7      	ble.n	8001b48 <change_digit_3+0x6ec>
		k = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001bc4:	e029      	b.n	8001c1a <change_digit_3+0x7be>
			for(int j = 0; j <= 32; ++j)
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001bcc:	e01c      	b.n	8001c08 <change_digit_3+0x7ac>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001bce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001bd2:	1c53      	adds	r3, r2, #1
 8001bd4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001bd8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001bdc:	460b      	mov	r3, r1
 8001bde:	011b      	lsls	r3, r3, #4
 8001be0:	1a5b      	subs	r3, r3, r1
 8001be2:	015b      	lsls	r3, r3, #5
 8001be4:	4619      	mov	r1, r3
 8001be6:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001bea:	440b      	add	r3, r1
 8001bec:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001bf0:	440b      	add	r3, r1
 8001bf2:	4998      	ldr	r1, [pc, #608]	; (8001e54 <change_digit_3+0x9f8>)
 8001bf4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001bf8:	4a95      	ldr	r2, [pc, #596]	; (8001e50 <change_digit_3+0x9f4>)
 8001bfa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001bfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c02:	3301      	adds	r3, #1
 8001c04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c0c:	2b20      	cmp	r3, #32
 8001c0e:	ddde      	ble.n	8001bce <change_digit_3+0x772>
		for(int i = 0; i <= 57; ++i)
 8001c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c14:	3301      	adds	r3, #1
 8001c16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001c1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c1e:	2b39      	cmp	r3, #57	; 0x39
 8001c20:	ddd1      	ble.n	8001bc6 <change_digit_3+0x76a>
	}

	if(number==60)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b3c      	cmp	r3, #60	; 0x3c
 8001c28:	f040 8083 	bne.w	8001d32 <change_digit_3+0x8d6>
	{
		for(int i = 0; i <= 57; ++i)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c32:	e024      	b.n	8001c7e <change_digit_3+0x822>
			for(int j = 0; j <= 32; ++j)
 8001c34:	2300      	movs	r3, #0
 8001c36:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c38:	e019      	b.n	8001c6e <change_digit_3+0x812>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001c3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c3e:	1c53      	adds	r3, r2, #1
 8001c40:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001c44:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001c48:	460b      	mov	r3, r1
 8001c4a:	011b      	lsls	r3, r3, #4
 8001c4c:	1a5b      	subs	r3, r3, r1
 8001c4e:	015b      	lsls	r3, r3, #5
 8001c50:	4619      	mov	r1, r3
 8001c52:	f241 3349 	movw	r3, #4937	; 0x1349
 8001c56:	440b      	add	r3, r1
 8001c58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8001c5a:	440b      	add	r3, r1
 8001c5c:	497e      	ldr	r1, [pc, #504]	; (8001e58 <change_digit_3+0x9fc>)
 8001c5e:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001c62:	4a7b      	ldr	r2, [pc, #492]	; (8001e50 <change_digit_3+0x9f4>)
 8001c64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001c68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001c6e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	dde2      	ble.n	8001c3a <change_digit_3+0x7de>
		for(int i = 0; i <= 57; ++i)
 8001c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c78:	3301      	adds	r3, #1
 8001c7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001c7e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c82:	2b39      	cmp	r3, #57	; 0x39
 8001c84:	ddd6      	ble.n	8001c34 <change_digit_3+0x7d8>
		k = 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001c90:	e021      	b.n	8001cd6 <change_digit_3+0x87a>
			for(int j = 0; j <= 32; ++j)
 8001c92:	2300      	movs	r3, #0
 8001c94:	677b      	str	r3, [r7, #116]	; 0x74
 8001c96:	e018      	b.n	8001cca <change_digit_3+0x86e>
				screen[38+4861+i*480+j] = six_picture_3[k++];
 8001c98:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001c9c:	1c53      	adds	r3, r2, #1
 8001c9e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ca2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	011b      	lsls	r3, r3, #4
 8001ca8:	1a5b      	subs	r3, r3, r1
 8001caa:	015b      	lsls	r3, r3, #5
 8001cac:	4619      	mov	r1, r3
 8001cae:	f241 3323 	movw	r3, #4899	; 0x1323
 8001cb2:	440b      	add	r3, r1
 8001cb4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001cb6:	440b      	add	r3, r1
 8001cb8:	4968      	ldr	r1, [pc, #416]	; (8001e5c <change_digit_3+0xa00>)
 8001cba:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001cbe:	4a64      	ldr	r2, [pc, #400]	; (8001e50 <change_digit_3+0x9f4>)
 8001cc0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001cc4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	677b      	str	r3, [r7, #116]	; 0x74
 8001cca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	dde3      	ble.n	8001c98 <change_digit_3+0x83c>
		for(int i = 0; i <= 57; ++i)
 8001cd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8001cd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001cd8:	2b39      	cmp	r3, #57	; 0x39
 8001cda:	ddda      	ble.n	8001c92 <change_digit_3+0x836>
		k = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	673b      	str	r3, [r7, #112]	; 0x70
 8001ce6:	e021      	b.n	8001d2c <change_digit_3+0x8d0>
			for(int j = 0; j <= 32; ++j)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001cec:	e018      	b.n	8001d20 <change_digit_3+0x8c4>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001cee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001cf2:	1c53      	adds	r3, r2, #1
 8001cf4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001cf8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	1a5b      	subs	r3, r3, r1
 8001d00:	015b      	lsls	r3, r3, #5
 8001d02:	4619      	mov	r1, r3
 8001d04:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001d08:	440b      	add	r3, r1
 8001d0a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001d0c:	440b      	add	r3, r1
 8001d0e:	4951      	ldr	r1, [pc, #324]	; (8001e54 <change_digit_3+0x9f8>)
 8001d10:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <change_digit_3+0x9f4>)
 8001d16:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	dde3      	ble.n	8001cee <change_digit_3+0x892>
		for(int i = 0; i <= 57; ++i)
 8001d26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d28:	3301      	adds	r3, #1
 8001d2a:	673b      	str	r3, [r7, #112]	; 0x70
 8001d2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d2e:	2b39      	cmp	r3, #57	; 0x39
 8001d30:	ddda      	ble.n	8001ce8 <change_digit_3+0x88c>
	}

	if(number==70)
 8001d32:	1d3b      	adds	r3, r7, #4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2b46      	cmp	r3, #70	; 0x46
 8001d38:	d17d      	bne.n	8001e36 <change_digit_3+0x9da>
	{
		for(int i = 0; i <= 57; ++i)
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d3e:	e021      	b.n	8001d84 <change_digit_3+0x928>
			for(int j = 0; j <= 32; ++j)
 8001d40:	2300      	movs	r3, #0
 8001d42:	667b      	str	r3, [r7, #100]	; 0x64
 8001d44:	e018      	b.n	8001d78 <change_digit_3+0x91c>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001d46:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001d4a:	1c53      	adds	r3, r2, #1
 8001d4c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001d50:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001d52:	460b      	mov	r3, r1
 8001d54:	011b      	lsls	r3, r3, #4
 8001d56:	1a5b      	subs	r3, r3, r1
 8001d58:	015b      	lsls	r3, r3, #5
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f241 3349 	movw	r3, #4937	; 0x1349
 8001d60:	440b      	add	r3, r1
 8001d62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001d64:	440b      	add	r3, r1
 8001d66:	493c      	ldr	r1, [pc, #240]	; (8001e58 <change_digit_3+0x9fc>)
 8001d68:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001d6c:	4a38      	ldr	r2, [pc, #224]	; (8001e50 <change_digit_3+0x9f4>)
 8001d6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001d72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d74:	3301      	adds	r3, #1
 8001d76:	667b      	str	r3, [r7, #100]	; 0x64
 8001d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001d7a:	2b20      	cmp	r3, #32
 8001d7c:	dde3      	ble.n	8001d46 <change_digit_3+0x8ea>
		for(int i = 0; i <= 57; ++i)
 8001d7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d80:	3301      	adds	r3, #1
 8001d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8001d84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d86:	2b39      	cmp	r3, #57	; 0x39
 8001d88:	ddda      	ble.n	8001d40 <change_digit_3+0x8e4>
		k = 0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001d90:	2300      	movs	r3, #0
 8001d92:	663b      	str	r3, [r7, #96]	; 0x60
 8001d94:	e021      	b.n	8001dda <change_digit_3+0x97e>
			for(int j = 0; j <= 32; ++j)
 8001d96:	2300      	movs	r3, #0
 8001d98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d9a:	e018      	b.n	8001dce <change_digit_3+0x972>
				screen[38+4861+i*480+j] = seven_picture_3[k++];
 8001d9c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001da0:	1c53      	adds	r3, r2, #1
 8001da2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001da6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001da8:	460b      	mov	r3, r1
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a5b      	subs	r3, r3, r1
 8001dae:	015b      	lsls	r3, r3, #5
 8001db0:	4619      	mov	r1, r3
 8001db2:	f241 3323 	movw	r3, #4899	; 0x1323
 8001db6:	440b      	add	r3, r1
 8001db8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001dba:	440b      	add	r3, r1
 8001dbc:	4928      	ldr	r1, [pc, #160]	; (8001e60 <change_digit_3+0xa04>)
 8001dbe:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <change_digit_3+0x9f4>)
 8001dc4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001dc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dca:	3301      	adds	r3, #1
 8001dcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001dd0:	2b20      	cmp	r3, #32
 8001dd2:	dde3      	ble.n	8001d9c <change_digit_3+0x940>
		for(int i = 0; i <= 57; ++i)
 8001dd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	663b      	str	r3, [r7, #96]	; 0x60
 8001dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ddc:	2b39      	cmp	r3, #57	; 0x39
 8001dde:	ddda      	ble.n	8001d96 <change_digit_3+0x93a>
		k = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001de6:	2300      	movs	r3, #0
 8001de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dea:	e021      	b.n	8001e30 <change_digit_3+0x9d4>
			for(int j = 0; j <= 32; ++j)
 8001dec:	2300      	movs	r3, #0
 8001dee:	657b      	str	r3, [r7, #84]	; 0x54
 8001df0:	e018      	b.n	8001e24 <change_digit_3+0x9c8>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001df2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001df6:	1c53      	adds	r3, r2, #1
 8001df8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001dfc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001dfe:	460b      	mov	r3, r1
 8001e00:	011b      	lsls	r3, r3, #4
 8001e02:	1a5b      	subs	r3, r3, r1
 8001e04:	015b      	lsls	r3, r3, #5
 8001e06:	4619      	mov	r1, r3
 8001e08:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001e0c:	440b      	add	r3, r1
 8001e0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001e10:	440b      	add	r3, r1
 8001e12:	4910      	ldr	r1, [pc, #64]	; (8001e54 <change_digit_3+0x9f8>)
 8001e14:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <change_digit_3+0x9f4>)
 8001e1a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e20:	3301      	adds	r3, #1
 8001e22:	657b      	str	r3, [r7, #84]	; 0x54
 8001e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	dde3      	ble.n	8001df2 <change_digit_3+0x996>
		for(int i = 0; i <= 57; ++i)
 8001e2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e32:	2b39      	cmp	r3, #57	; 0x39
 8001e34:	ddda      	ble.n	8001dec <change_digit_3+0x990>
	}

	if(number==80)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b50      	cmp	r3, #80	; 0x50
 8001e3c:	f040 808a 	bne.w	8001f54 <change_digit_3+0xaf8>
	{
		for(int i = 0; i <= 57; ++i)
 8001e40:	2300      	movs	r3, #0
 8001e42:	653b      	str	r3, [r7, #80]	; 0x50
 8001e44:	e02d      	b.n	8001ea2 <change_digit_3+0xa46>
			for(int j = 0; j <= 32; ++j)
 8001e46:	2300      	movs	r3, #0
 8001e48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e4a:	e024      	b.n	8001e96 <change_digit_3+0xa3a>
 8001e4c:	0805fc10 	.word	0x0805fc10
 8001e50:	20000020 	.word	0x20000020
 8001e54:	080628ec 	.word	0x080628ec
 8001e58:	080682a4 	.word	0x080682a4
 8001e5c:	080655c8 	.word	0x080655c8
 8001e60:	080646d4 	.word	0x080646d4
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001e64:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001e68:	1c53      	adds	r3, r2, #1
 8001e6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001e6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001e70:	460b      	mov	r3, r1
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a5b      	subs	r3, r3, r1
 8001e76:	015b      	lsls	r3, r3, #5
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f241 3349 	movw	r3, #4937	; 0x1349
 8001e7e:	440b      	add	r3, r1
 8001e80:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001e82:	440b      	add	r3, r1
 8001e84:	49b1      	ldr	r1, [pc, #708]	; (800214c <change_digit_3+0xcf0>)
 8001e86:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001e8a:	4ab1      	ldr	r2, [pc, #708]	; (8002150 <change_digit_3+0xcf4>)
 8001e8c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e92:	3301      	adds	r3, #1
 8001e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	dde3      	ble.n	8001e64 <change_digit_3+0xa08>
		for(int i = 0; i <= 57; ++i)
 8001e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e9e:	3301      	adds	r3, #1
 8001ea0:	653b      	str	r3, [r7, #80]	; 0x50
 8001ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001ea4:	2b39      	cmp	r3, #57	; 0x39
 8001ea6:	ddce      	ble.n	8001e46 <change_digit_3+0x9ea>
		k = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001eae:	2300      	movs	r3, #0
 8001eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001eb2:	e021      	b.n	8001ef8 <change_digit_3+0xa9c>
			for(int j = 0; j <= 32; ++j)
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb8:	e018      	b.n	8001eec <change_digit_3+0xa90>
				screen[38+4861+i*480+j] = eigth_picture_3[k++];
 8001eba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001ebe:	1c53      	adds	r3, r2, #1
 8001ec0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001ec4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	011b      	lsls	r3, r3, #4
 8001eca:	1a5b      	subs	r3, r3, r1
 8001ecc:	015b      	lsls	r3, r3, #5
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f241 3323 	movw	r3, #4899	; 0x1323
 8001ed4:	440b      	add	r3, r1
 8001ed6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001ed8:	440b      	add	r3, r1
 8001eda:	499e      	ldr	r1, [pc, #632]	; (8002154 <change_digit_3+0xcf8>)
 8001edc:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001ee0:	4a9b      	ldr	r2, [pc, #620]	; (8002150 <change_digit_3+0xcf4>)
 8001ee2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee8:	3301      	adds	r3, #1
 8001eea:	647b      	str	r3, [r7, #68]	; 0x44
 8001eec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eee:	2b20      	cmp	r3, #32
 8001ef0:	dde3      	ble.n	8001eba <change_digit_3+0xa5e>
		for(int i = 0; i <= 57; ++i)
 8001ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001ef8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001efa:	2b39      	cmp	r3, #57	; 0x39
 8001efc:	ddda      	ble.n	8001eb4 <change_digit_3+0xa58>
		k = 0;
 8001efe:	2300      	movs	r3, #0
 8001f00:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001f04:	2300      	movs	r3, #0
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
 8001f08:	e021      	b.n	8001f4e <change_digit_3+0xaf2>
			for(int j = 0; j <= 32; ++j)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f0e:	e018      	b.n	8001f42 <change_digit_3+0xae6>
				screen[4861+i*480+j] = none_picture_3[k++];
 8001f10:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f14:	1c53      	adds	r3, r2, #1
 8001f16:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a5b      	subs	r3, r3, r1
 8001f22:	015b      	lsls	r3, r3, #5
 8001f24:	4619      	mov	r1, r3
 8001f26:	f241 23fd 	movw	r3, #4861	; 0x12fd
 8001f2a:	440b      	add	r3, r1
 8001f2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001f2e:	440b      	add	r3, r1
 8001f30:	4989      	ldr	r1, [pc, #548]	; (8002158 <change_digit_3+0xcfc>)
 8001f32:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f36:	4a86      	ldr	r2, [pc, #536]	; (8002150 <change_digit_3+0xcf4>)
 8001f38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f3e:	3301      	adds	r3, #1
 8001f40:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f44:	2b20      	cmp	r3, #32
 8001f46:	dde3      	ble.n	8001f10 <change_digit_3+0xab4>
		for(int i = 0; i <= 57; ++i)
 8001f48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	643b      	str	r3, [r7, #64]	; 0x40
 8001f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f50:	2b39      	cmp	r3, #57	; 0x39
 8001f52:	ddda      	ble.n	8001f0a <change_digit_3+0xaae>
	}

	if(number==90)
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b5a      	cmp	r3, #90	; 0x5a
 8001f5a:	d17d      	bne.n	8002058 <change_digit_3+0xbfc>
	{
		for(int i = 0; i <= 57; ++i)
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f60:	e021      	b.n	8001fa6 <change_digit_3+0xb4a>
			for(int j = 0; j <= 32; ++j)
 8001f62:	2300      	movs	r3, #0
 8001f64:	637b      	str	r3, [r7, #52]	; 0x34
 8001f66:	e018      	b.n	8001f9a <change_digit_3+0xb3e>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 8001f68:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001f6c:	1c53      	adds	r3, r2, #1
 8001f6e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001f72:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f74:	460b      	mov	r3, r1
 8001f76:	011b      	lsls	r3, r3, #4
 8001f78:	1a5b      	subs	r3, r3, r1
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f241 3349 	movw	r3, #4937	; 0x1349
 8001f82:	440b      	add	r3, r1
 8001f84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f86:	440b      	add	r3, r1
 8001f88:	4970      	ldr	r1, [pc, #448]	; (800214c <change_digit_3+0xcf0>)
 8001f8a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001f8e:	4a70      	ldr	r2, [pc, #448]	; (8002150 <change_digit_3+0xcf4>)
 8001f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f96:	3301      	adds	r3, #1
 8001f98:	637b      	str	r3, [r7, #52]	; 0x34
 8001f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	dde3      	ble.n	8001f68 <change_digit_3+0xb0c>
		for(int i = 0; i <= 57; ++i)
 8001fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fa8:	2b39      	cmp	r3, #57	; 0x39
 8001faa:	ddda      	ble.n	8001f62 <change_digit_3+0xb06>
		k = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001fb6:	e021      	b.n	8001ffc <change_digit_3+0xba0>
			for(int j = 0; j <= 32; ++j)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fbc:	e018      	b.n	8001ff0 <change_digit_3+0xb94>
				screen[38+4861+i*480+j] = nine_picture_3[k++];
 8001fbe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001fc2:	1c53      	adds	r3, r2, #1
 8001fc4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001fc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fca:	460b      	mov	r3, r1
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	1a5b      	subs	r3, r3, r1
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	f241 3323 	movw	r3, #4899	; 0x1323
 8001fd8:	440b      	add	r3, r1
 8001fda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fdc:	440b      	add	r3, r1
 8001fde:	495f      	ldr	r1, [pc, #380]	; (800215c <change_digit_3+0xd00>)
 8001fe0:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8001fe4:	4a5a      	ldr	r2, [pc, #360]	; (8002150 <change_digit_3+0xcf4>)
 8001fe6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8001fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fec:	3301      	adds	r3, #1
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff2:	2b20      	cmp	r3, #32
 8001ff4:	dde3      	ble.n	8001fbe <change_digit_3+0xb62>
		for(int i = 0; i <= 57; ++i)
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
 8001ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ffe:	2b39      	cmp	r3, #57	; 0x39
 8002000:	ddda      	ble.n	8001fb8 <change_digit_3+0xb5c>
		k = 0;
 8002002:	2300      	movs	r3, #0
 8002004:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8002008:	2300      	movs	r3, #0
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
 800200c:	e021      	b.n	8002052 <change_digit_3+0xbf6>
			for(int j = 0; j <= 32; ++j)
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e018      	b.n	8002046 <change_digit_3+0xbea>
				screen[4861+i*480+j] = none_picture_3[k++];
 8002014:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002018:	1c53      	adds	r3, r2, #1
 800201a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800201e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002020:	460b      	mov	r3, r1
 8002022:	011b      	lsls	r3, r3, #4
 8002024:	1a5b      	subs	r3, r3, r1
 8002026:	015b      	lsls	r3, r3, #5
 8002028:	4619      	mov	r1, r3
 800202a:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800202e:	440b      	add	r3, r1
 8002030:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002032:	440b      	add	r3, r1
 8002034:	4948      	ldr	r1, [pc, #288]	; (8002158 <change_digit_3+0xcfc>)
 8002036:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800203a:	4a45      	ldr	r2, [pc, #276]	; (8002150 <change_digit_3+0xcf4>)
 800203c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	3301      	adds	r3, #1
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	2b20      	cmp	r3, #32
 800204a:	dde3      	ble.n	8002014 <change_digit_3+0xbb8>
		for(int i = 0; i <= 57; ++i)
 800204c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204e:	3301      	adds	r3, #1
 8002050:	62bb      	str	r3, [r7, #40]	; 0x28
 8002052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002054:	2b39      	cmp	r3, #57	; 0x39
 8002056:	ddda      	ble.n	800200e <change_digit_3+0xbb2>
	}

	if(number==100)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	f040 80b1 	bne.w	80021c4 <change_digit_3+0xd68>
	{
		for(int i = 0; i <= 57; ++i)
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
 8002066:	e021      	b.n	80020ac <change_digit_3+0xc50>
			for(int j = 0; j <= 32; ++j)
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	e018      	b.n	80020a0 <change_digit_3+0xc44>
				screen[76+4861+i*480+j] = zero_picture_3[k++];
 800206e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002072:	1c53      	adds	r3, r2, #1
 8002074:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002078:	6a39      	ldr	r1, [r7, #32]
 800207a:	460b      	mov	r3, r1
 800207c:	011b      	lsls	r3, r3, #4
 800207e:	1a5b      	subs	r3, r3, r1
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	4619      	mov	r1, r3
 8002084:	f241 3349 	movw	r3, #4937	; 0x1349
 8002088:	440b      	add	r3, r1
 800208a:	69f9      	ldr	r1, [r7, #28]
 800208c:	440b      	add	r3, r1
 800208e:	492f      	ldr	r1, [pc, #188]	; (800214c <change_digit_3+0xcf0>)
 8002090:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8002094:	4a2e      	ldr	r2, [pc, #184]	; (8002150 <change_digit_3+0xcf4>)
 8002096:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3301      	adds	r3, #1
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	69fb      	ldr	r3, [r7, #28]
 80020a2:	2b20      	cmp	r3, #32
 80020a4:	dde3      	ble.n	800206e <change_digit_3+0xc12>
		for(int i = 0; i <= 57; ++i)
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	3301      	adds	r3, #1
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	6a3b      	ldr	r3, [r7, #32]
 80020ae:	2b39      	cmp	r3, #57	; 0x39
 80020b0:	ddda      	ble.n	8002068 <change_digit_3+0xc0c>
		k = 0;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 80020b8:	f107 0318 	add.w	r3, r7, #24
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e031      	b.n	8002126 <change_digit_3+0xcca>
			for(int j = 0; j <= 32; ++j)
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	e020      	b.n	800210e <change_digit_3+0xcb2>
				screen[38+4861+i*480+j] = zero_picture_3[k++];
 80020cc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020d0:	1c53      	adds	r3, r2, #1
 80020d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80020d6:	f107 0318 	add.w	r3, r7, #24
 80020da:	6819      	ldr	r1, [r3, #0]
 80020dc:	460b      	mov	r3, r1
 80020de:	011b      	lsls	r3, r3, #4
 80020e0:	1a5b      	subs	r3, r3, r1
 80020e2:	015b      	lsls	r3, r3, #5
 80020e4:	4619      	mov	r1, r3
 80020e6:	f241 3323 	movw	r3, #4899	; 0x1323
 80020ea:	440b      	add	r3, r1
 80020ec:	f107 0114 	add.w	r1, r7, #20
 80020f0:	6809      	ldr	r1, [r1, #0]
 80020f2:	440b      	add	r3, r1
 80020f4:	4915      	ldr	r1, [pc, #84]	; (800214c <change_digit_3+0xcf0>)
 80020f6:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80020fa:	4a15      	ldr	r2, [pc, #84]	; (8002150 <change_digit_3+0xcf4>)
 80020fc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002100:	f107 0314 	add.w	r3, r7, #20
 8002104:	f107 0214 	add.w	r2, r7, #20
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	3201      	adds	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b20      	cmp	r3, #32
 8002116:	ddd9      	ble.n	80020cc <change_digit_3+0xc70>
		for(int i = 0; i <= 57; ++i)
 8002118:	f107 0318 	add.w	r3, r7, #24
 800211c:	f107 0218 	add.w	r2, r7, #24
 8002120:	6812      	ldr	r2, [r2, #0]
 8002122:	3201      	adds	r2, #1
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	f107 0318 	add.w	r3, r7, #24
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b39      	cmp	r3, #57	; 0x39
 800212e:	ddc8      	ble.n	80020c2 <change_digit_3+0xc66>
		k = 0;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		for(int i = 0; i <= 57; ++i)
 8002136:	f107 0310 	add.w	r3, r7, #16
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	e03c      	b.n	80021ba <change_digit_3+0xd5e>
			for(int j = 0; j <= 32; ++j)
 8002140:	f107 030c 	add.w	r3, r7, #12
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	e02b      	b.n	80021a2 <change_digit_3+0xd46>
 800214a:	bf00      	nop
 800214c:	080682a4 	.word	0x080682a4
 8002150:	20000020 	.word	0x20000020
 8002154:	08069198 	.word	0x08069198
 8002158:	080628ec 	.word	0x080628ec
 800215c:	080619f8 	.word	0x080619f8
				screen[4861+i*480+j] = one_picture_3[k++];
 8002160:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002164:	1c53      	adds	r3, r2, #1
 8002166:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800216a:	f107 0310 	add.w	r3, r7, #16
 800216e:	6819      	ldr	r1, [r3, #0]
 8002170:	460b      	mov	r3, r1
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a5b      	subs	r3, r3, r1
 8002176:	015b      	lsls	r3, r3, #5
 8002178:	4619      	mov	r1, r3
 800217a:	f241 23fd 	movw	r3, #4861	; 0x12fd
 800217e:	440b      	add	r3, r1
 8002180:	f107 010c 	add.w	r1, r7, #12
 8002184:	6809      	ldr	r1, [r1, #0]
 8002186:	440b      	add	r3, r1
 8002188:	4916      	ldr	r1, [pc, #88]	; (80021e4 <change_digit_3+0xd88>)
 800218a:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800218e:	4a16      	ldr	r2, [pc, #88]	; (80021e8 <change_digit_3+0xd8c>)
 8002190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			for(int j = 0; j <= 32; ++j)
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	f107 020c 	add.w	r2, r7, #12
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	3201      	adds	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b20      	cmp	r3, #32
 80021aa:	ddd9      	ble.n	8002160 <change_digit_3+0xd04>
		for(int i = 0; i <= 57; ++i)
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	f107 0210 	add.w	r2, r7, #16
 80021b4:	6812      	ldr	r2, [r2, #0]
 80021b6:	3201      	adds	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
 80021ba:	f107 0310 	add.w	r3, r7, #16
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b39      	cmp	r3, #57	; 0x39
 80021c2:	ddbd      	ble.n	8002140 <change_digit_3+0xce4>
	}

	LTDC_Layer2->CFBAR = (uint32_t)screen;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <change_digit_3+0xd90>)
 80021c6:	4a08      	ldr	r2, [pc, #32]	; (80021e8 <change_digit_3+0xd8c>)
 80021c8:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 80021ca:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <change_digit_3+0xd94>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	4a08      	ldr	r2, [pc, #32]	; (80021f0 <change_digit_3+0xd94>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80021d6:	bf00      	nop
 80021d8:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	080637e0 	.word	0x080637e0
 80021e8:	20000020 	.word	0x20000020
 80021ec:	40016904 	.word	0x40016904
 80021f0:	40016800 	.word	0x40016800

080021f4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	++cnt;
 80021f8:	4b47      	ldr	r3, [pc, #284]	; (8002318 <SysTick_Handler+0x124>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a46      	ldr	r2, [pc, #280]	; (8002318 <SysTick_Handler+0x124>)
 8002200:	6013      	str	r3, [r2, #0]
	if(cnt == 587500)
 8002202:	4b45      	ldr	r3, [pc, #276]	; (8002318 <SysTick_Handler+0x124>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a45      	ldr	r2, [pc, #276]	; (800231c <SysTick_Handler+0x128>)
 8002208:	4293      	cmp	r3, r2
 800220a:	f040 8082 	bne.w	8002312 <SysTick_Handler+0x11e>
	{
		if(minute == 0)
 800220e:	4b44      	ldr	r3, [pc, #272]	; (8002320 <SysTick_Handler+0x12c>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d164      	bne.n	80022e0 <SysTick_Handler+0xec>
		{
			if(minute_2 == 0)
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <SysTick_Handler+0x130>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d148      	bne.n	80022b0 <SysTick_Handler+0xbc>
			{
				if(hour == 0)
 800221e:	4b42      	ldr	r3, [pc, #264]	; (8002328 <SysTick_Handler+0x134>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d125      	bne.n	8002272 <SysTick_Handler+0x7e>
				{
					cnt = 819;
 8002226:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <SysTick_Handler+0x124>)
 8002228:	f240 3233 	movw	r2, #819	; 0x333
 800222c:	601a      	str	r2, [r3, #0]
					hour = 9;
 800222e:	4b3e      	ldr	r3, [pc, #248]	; (8002328 <SysTick_Handler+0x134>)
 8002230:	2209      	movs	r2, #9
 8002232:	701a      	strb	r2, [r3, #0]
					minute_2 = 5;
 8002234:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <SysTick_Handler+0x130>)
 8002236:	2205      	movs	r2, #5
 8002238:	701a      	strb	r2, [r3, #0]
					minute = 9;
 800223a:	4b39      	ldr	r3, [pc, #228]	; (8002320 <SysTick_Handler+0x12c>)
 800223c:	2209      	movs	r2, #9
 800223e:	701a      	strb	r2, [r3, #0]
					--hour_2;
 8002240:	4b3a      	ldr	r3, [pc, #232]	; (800232c <SysTick_Handler+0x138>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	3b01      	subs	r3, #1
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b38      	ldr	r3, [pc, #224]	; (800232c <SysTick_Handler+0x138>)
 800224a:	701a      	strb	r2, [r3, #0]
					change_digit_2(1,hour_2);
 800224c:	4b37      	ldr	r3, [pc, #220]	; (800232c <SysTick_Handler+0x138>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	4619      	mov	r1, r3
 8002252:	2001      	movs	r0, #1
 8002254:	f7fe ff12 	bl	800107c <change_digit_2>
					change_digit_2(2,9);
 8002258:	2109      	movs	r1, #9
 800225a:	2002      	movs	r0, #2
 800225c:	f7fe ff0e 	bl	800107c <change_digit_2>
					change_digit_2(3,5);
 8002260:	2105      	movs	r1, #5
 8002262:	2003      	movs	r0, #3
 8002264:	f7fe ff0a 	bl	800107c <change_digit_2>
					change_digit_2(4,9);
 8002268:	2109      	movs	r1, #9
 800226a:	2004      	movs	r0, #4
 800226c:	f7fe ff06 	bl	800107c <change_digit_2>
 8002270:	e045      	b.n	80022fe <SysTick_Handler+0x10a>
				}
				else
				{
					cnt = 683;
 8002272:	4b29      	ldr	r3, [pc, #164]	; (8002318 <SysTick_Handler+0x124>)
 8002274:	f240 22ab 	movw	r2, #683	; 0x2ab
 8002278:	601a      	str	r2, [r3, #0]
					minute_2 = 5;
 800227a:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <SysTick_Handler+0x130>)
 800227c:	2205      	movs	r2, #5
 800227e:	701a      	strb	r2, [r3, #0]
					minute = 9;
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <SysTick_Handler+0x12c>)
 8002282:	2209      	movs	r2, #9
 8002284:	701a      	strb	r2, [r3, #0]
					--hour;
 8002286:	4b28      	ldr	r3, [pc, #160]	; (8002328 <SysTick_Handler+0x134>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	3b01      	subs	r3, #1
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <SysTick_Handler+0x134>)
 8002290:	701a      	strb	r2, [r3, #0]
					change_digit_2(2,hour);
 8002292:	4b25      	ldr	r3, [pc, #148]	; (8002328 <SysTick_Handler+0x134>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	4619      	mov	r1, r3
 8002298:	2002      	movs	r0, #2
 800229a:	f7fe feef 	bl	800107c <change_digit_2>
					change_digit_2(3,5);
 800229e:	2105      	movs	r1, #5
 80022a0:	2003      	movs	r0, #3
 80022a2:	f7fe feeb 	bl	800107c <change_digit_2>
					change_digit_2(4,9);
 80022a6:	2109      	movs	r1, #9
 80022a8:	2004      	movs	r0, #4
 80022aa:	f7fe fee7 	bl	800107c <change_digit_2>
 80022ae:	e026      	b.n	80022fe <SysTick_Handler+0x10a>
				}
			}
			else
			{
				cnt = 414;
 80022b0:	4b19      	ldr	r3, [pc, #100]	; (8002318 <SysTick_Handler+0x124>)
 80022b2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80022b6:	601a      	str	r2, [r3, #0]
				minute = 9;
 80022b8:	4b19      	ldr	r3, [pc, #100]	; (8002320 <SysTick_Handler+0x12c>)
 80022ba:	2209      	movs	r2, #9
 80022bc:	701a      	strb	r2, [r3, #0]
				--minute_2;
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <SysTick_Handler+0x130>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <SysTick_Handler+0x130>)
 80022c8:	701a      	strb	r2, [r3, #0]
				change_digit_2(3,minute_2);
 80022ca:	4b16      	ldr	r3, [pc, #88]	; (8002324 <SysTick_Handler+0x130>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	4619      	mov	r1, r3
 80022d0:	2003      	movs	r0, #3
 80022d2:	f7fe fed3 	bl	800107c <change_digit_2>
				change_digit_2(4,9);
 80022d6:	2109      	movs	r1, #9
 80022d8:	2004      	movs	r0, #4
 80022da:	f7fe fecf 	bl	800107c <change_digit_2>
 80022de:	e00e      	b.n	80022fe <SysTick_Handler+0x10a>
			}
		}
		else
		{
			cnt = 136;
 80022e0:	4b0d      	ldr	r3, [pc, #52]	; (8002318 <SysTick_Handler+0x124>)
 80022e2:	2288      	movs	r2, #136	; 0x88
 80022e4:	601a      	str	r2, [r3, #0]
			--minute;
 80022e6:	4b0e      	ldr	r3, [pc, #56]	; (8002320 <SysTick_Handler+0x12c>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <SysTick_Handler+0x12c>)
 80022f0:	701a      	strb	r2, [r3, #0]
			change_digit_2(4,minute);
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <SysTick_Handler+0x12c>)
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	4619      	mov	r1, r3
 80022f8:	2004      	movs	r0, #4
 80022fa:	f7fe febf 	bl	800107c <change_digit_2>
		}
		change_digit_3(minute*10);
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <SysTick_Handler+0x12c>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	4618      	mov	r0, r3
 800230e:	f7ff f8a5 	bl	800145c <change_digit_3>
	}
}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	2003fc20 	.word	0x2003fc20
 800231c:	0008f6ec 	.word	0x0008f6ec
 8002320:	2003fc24 	.word	0x2003fc24
 8002324:	2003fc25 	.word	0x2003fc25
 8002328:	2003fc26 	.word	0x2003fc26
 800232c:	20000000 	.word	0x20000000

08002330 <main>:

int main(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b082      	sub	sp, #8
 8002334:	af00      	add	r7, sp, #0
	initialization();
 8002336:	f7fd ffbb 	bl	80002b0 <initialization>

	// Initialization picture
	LTDC_Layer2->CFBAR = (uint32_t)init_picture;
 800233a:	4b2b      	ldr	r3, [pc, #172]	; (80023e8 <main+0xb8>)
 800233c:	4a2b      	ldr	r2, [pc, #172]	; (80023ec <main+0xbc>)
 800233e:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <main+0xc0>)
 8002342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002344:	4a2a      	ldr	r2, [pc, #168]	; (80023f0 <main+0xc0>)
 8002346:	f043 0302 	orr.w	r3, r3, #2
 800234a:	6253      	str	r3, [r2, #36]	; 0x24
	for(int i = 0; i <= 5000000; ++i);
 800234c:	2300      	movs	r3, #0
 800234e:	607b      	str	r3, [r7, #4]
 8002350:	e002      	b.n	8002358 <main+0x28>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3301      	adds	r3, #1
 8002356:	607b      	str	r3, [r7, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	4a26      	ldr	r2, [pc, #152]	; (80023f4 <main+0xc4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	ddf8      	ble.n	8002352 <main+0x22>

	// Main picture
	LTDC_Layer2->CFBAR = (uint32_t)main_picture;
 8002360:	4b21      	ldr	r3, [pc, #132]	; (80023e8 <main+0xb8>)
 8002362:	4a25      	ldr	r2, [pc, #148]	; (80023f8 <main+0xc8>)
 8002364:	629a      	str	r2, [r3, #40]	; 0x28
	LTDC->SRCR |= LTDC_SRCR_VBR;
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <main+0xc0>)
 8002368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <main+0xc0>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	6253      	str	r3, [r2, #36]	; 0x24

	// Time
	change_digit_1(1,hour_2);
 8002372:	4b22      	ldr	r3, [pc, #136]	; (80023fc <main+0xcc>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	4619      	mov	r1, r3
 8002378:	2001      	movs	r0, #1
 800237a:	f7fe fc93 	bl	8000ca4 <change_digit_1>
	change_digit_1(2,hour);
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <main+0xd0>)
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4619      	mov	r1, r3
 8002384:	2002      	movs	r0, #2
 8002386:	f7fe fc8d 	bl	8000ca4 <change_digit_1>
	change_digit_1(3,minute_2);
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <main+0xd4>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	2003      	movs	r0, #3
 8002392:	f7fe fc87 	bl	8000ca4 <change_digit_1>
	change_digit_1(4,minute);
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <main+0xd8>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4619      	mov	r1, r3
 800239c:	2004      	movs	r0, #4
 800239e:	f7fe fc81 	bl	8000ca4 <change_digit_1>

	// Time 2
	change_digit_2(1,hour_2);
 80023a2:	4b16      	ldr	r3, [pc, #88]	; (80023fc <main+0xcc>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4619      	mov	r1, r3
 80023a8:	2001      	movs	r0, #1
 80023aa:	f7fe fe67 	bl	800107c <change_digit_2>
	change_digit_2(2,hour);
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <main+0xd0>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	4619      	mov	r1, r3
 80023b4:	2002      	movs	r0, #2
 80023b6:	f7fe fe61 	bl	800107c <change_digit_2>
	change_digit_2(3,minute_2);
 80023ba:	4b12      	ldr	r3, [pc, #72]	; (8002404 <main+0xd4>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	4619      	mov	r1, r3
 80023c0:	2003      	movs	r0, #3
 80023c2:	f7fe fe5b 	bl	800107c <change_digit_2>
	change_digit_2(4,minute);
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <main+0xd8>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	4619      	mov	r1, r3
 80023cc:	2004      	movs	r0, #4
 80023ce:	f7fe fe55 	bl	800107c <change_digit_2>

	// Power
	change_digit_3(100);
 80023d2:	2064      	movs	r0, #100	; 0x64
 80023d4:	f7ff f842 	bl	800145c <change_digit_3>

	SysTick_Config(180);
 80023d8:	20b4      	movs	r0, #180	; 0xb4
 80023da:	f7fd ff3f 	bl	800025c <SysTick_Config>
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40016904 	.word	0x40016904
 80023ec:	0806a08c 	.word	0x0806a08c
 80023f0:	40016800 	.word	0x40016800
 80023f4:	004c4b40 	.word	0x004c4b40
 80023f8:	080a9c8c 	.word	0x080a9c8c
 80023fc:	20000000 	.word	0x20000000
 8002400:	2003fc26 	.word	0x2003fc26
 8002404:	2003fc25 	.word	0x2003fc25
 8002408:	2003fc24 	.word	0x2003fc24

0800240c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800240c:	480d      	ldr	r0, [pc, #52]	; (8002444 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800240e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002410:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <LoopForever+0x6>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	; (800244c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <LoopForever+0xe>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	; (8002454 <LoopForever+0x12>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	; (8002458 <LoopForever+0x16>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800243a:	f000 f811 	bl	8002460 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800243e:	f7ff ff77 	bl	8002330 <main>

08002442 <LoopForever>:

LoopForever:
    b LoopForever
 8002442:	e7fe      	b.n	8002442 <LoopForever>
  ldr   r0, =_estack
 8002444:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002450:	080e9894 	.word	0x080e9894
  ldr r2, =_sbss
 8002454:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002458:	2003fc28 	.word	0x2003fc28

0800245c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>
	...

08002460 <__libc_init_array>:
 8002460:	b570      	push	{r4, r5, r6, lr}
 8002462:	4d0d      	ldr	r5, [pc, #52]	; (8002498 <__libc_init_array+0x38>)
 8002464:	4c0d      	ldr	r4, [pc, #52]	; (800249c <__libc_init_array+0x3c>)
 8002466:	1b64      	subs	r4, r4, r5
 8002468:	10a4      	asrs	r4, r4, #2
 800246a:	2600      	movs	r6, #0
 800246c:	42a6      	cmp	r6, r4
 800246e:	d109      	bne.n	8002484 <__libc_init_array+0x24>
 8002470:	4d0b      	ldr	r5, [pc, #44]	; (80024a0 <__libc_init_array+0x40>)
 8002472:	4c0c      	ldr	r4, [pc, #48]	; (80024a4 <__libc_init_array+0x44>)
 8002474:	f000 f818 	bl	80024a8 <_init>
 8002478:	1b64      	subs	r4, r4, r5
 800247a:	10a4      	asrs	r4, r4, #2
 800247c:	2600      	movs	r6, #0
 800247e:	42a6      	cmp	r6, r4
 8002480:	d105      	bne.n	800248e <__libc_init_array+0x2e>
 8002482:	bd70      	pop	{r4, r5, r6, pc}
 8002484:	f855 3b04 	ldr.w	r3, [r5], #4
 8002488:	4798      	blx	r3
 800248a:	3601      	adds	r6, #1
 800248c:	e7ee      	b.n	800246c <__libc_init_array+0xc>
 800248e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002492:	4798      	blx	r3
 8002494:	3601      	adds	r6, #1
 8002496:	e7f2      	b.n	800247e <__libc_init_array+0x1e>
 8002498:	080e988c 	.word	0x080e988c
 800249c:	080e988c 	.word	0x080e988c
 80024a0:	080e988c 	.word	0x080e988c
 80024a4:	080e9890 	.word	0x080e9890

080024a8 <_init>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr

080024b4 <_fini>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr
